[
  {
    "ID": 5,
    "Title": "CWE-5: J2EE Misconfiguration: Data Transmission Without Encryption",
    "Name": "J2EE Misconfiguration: Data Transmission Without Encryption",
    "Description": "Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 6,
    "Title": "CWE-6: J2EE Misconfiguration: Insufficient Session-ID Length",
    "Name": "J2EE Misconfiguration: Insufficient Session-ID Length",
    "Description": "The J2EE application is configured to use an insufficient session ID length.",
    "ExtendedDescription": "If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.",
    "Status": "Incomplete"
  },
  {
    "ID": 7,
    "Title": "CWE-7: J2EE Misconfiguration: Missing Custom Error Page",
    "Name": "J2EE Misconfiguration: Missing Custom Error Page",
    "Description": "The default error page of a web application should not display sensitive information about the product.",
    "ExtendedDescription": "\n\nA Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.\n\n\nWhen an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 8,
    "Title": "CWE-8: J2EE Misconfiguration: Entity Bean Declared Remote",
    "Name": "J2EE Misconfiguration: Entity Bean Declared Remote",
    "Description": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 9,
    "Title": "CWE-9: J2EE Misconfiguration: Weak Access Permissions for EJB Methods",
    "Name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods",
    "Description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.",
    "ExtendedDescription": "If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.",
    "Status": "Draft"
  },
  {
    "ID": 11,
    "Title": "CWE-11: ASP.NET Misconfiguration: Creating Debug Binary",
    "Name": "ASP.NET Misconfiguration: Creating Debug Binary",
    "Description": "Debugging messages help attackers learn about the system and plan a form of attack.",
    "ExtendedDescription": "ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.",
    "Status": "Draft"
  },
  {
    "ID": 12,
    "Title": "CWE-12: ASP.NET Misconfiguration: Missing Custom Error Page",
    "Name": "ASP.NET Misconfiguration: Missing Custom Error Page",
    "Description": "An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 13,
    "Title": "CWE-13: ASP.NET Misconfiguration: Password in Configuration File",
    "Name": "ASP.NET Misconfiguration: Password in Configuration File",
    "Description": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 14,
    "Title": "CWE-14: Compiler Removal of Code to Clear Buffers",
    "Name": "Compiler Removal of Code to Clear Buffers",
    "Description": "Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka \"dead store removal.\"",
    "ExtendedDescription": "\n\nThis compiler optimization error occurs when:\n\n\n  1. Secret data are stored in memory.\n\n  1. The secret data are scrubbed from memory by overwriting its contents.\n\n  1. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 15,
    "Title": "CWE-15: External Control of System or Configuration Setting",
    "Name": "External Control of System or Configuration Setting",
    "Description": "One or more system settings or configuration elements can be externally controlled by a user.",
    "ExtendedDescription": "Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.",
    "Status": "Incomplete"
  },
  {
    "ID": 20,
    "Title": "CWE-20: Improper Input Validation",
    "Name": "Improper Input Validation",
    "Description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "ExtendedDescription": "\n\nInput validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.\n\n\nInput validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.)\n\n\nInput validation can be applied to:\n\n\n  - raw data - strings, numbers, parameters, file contents, etc.\n\n  - metadata - information about the raw data, such as headers or size\n\nData can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data.\n\nMany properties of raw data or metadata may need to be validated upon entry into the code, such as:\n\n\n  - specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.\n\n  - implied or derived quantities, such as the actual size of a file instead of a specified size\n\n  - indexes, offsets, or positions into more complex data structures\n\n  - symbolic keys or other elements into hash tables, associative arrays, etc.\n\n  - well-formedness, i.e. syntactic correctness - compliance with expected syntax \n\n  - lexical token correctness - compliance with rules for what is treated as a token\n\n  - specified or derived type - the actual type of the input (or what the input appears to be)\n\n  - consistency - between individual data elements, between raw data and metadata, between references, etc.\n\n  - conformance to domain-specific rules, e.g. business logic \n\n  - equivalence - ensuring that equivalent inputs are treated the same\n\n  - authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data\n\nImplied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. \n\nNote that \"input validation\" has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation.\n\n\nFinally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n",
    "Status": "Stable"
  },
  {
    "ID": 22,
    "Title": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "Name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "Description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "ExtendedDescription": "\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n",
    "Status": "Stable"
  },
  {
    "ID": 23,
    "Title": "CWE-23: Relative Path Traversal",
    "Name": "Relative Path Traversal",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.",
    "Status": "Draft"
  },
  {
    "ID": 24,
    "Title": "CWE-24: Path Traversal: '../filedir'",
    "Name": "Path Traversal: '../filedir'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\".\n",
    "Status": "Incomplete"
  },
  {
    "ID": 25,
    "Title": "CWE-25: Path Traversal: '/../filedir'",
    "Name": "Path Traversal: '/../filedir'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nSometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 26,
    "Title": "CWE-26: Path Traversal: '/dir/../filename'",
    "Name": "Path Traversal: '/dir/../filename'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/dir/../filename\" sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n",
    "Status": "Draft"
  },
  {
    "ID": 27,
    "Title": "CWE-27: Path Traversal: 'dir/../../filename'",
    "Name": "Path Traversal: 'dir/../../filename'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal \"../\" sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one \"../\" sequence, so multiple \"../\" can bypass that check. Alternately, this manipulation could be used to bypass a check for \"../\" at the beginning of the pathname, moving up more than one directory level.\n",
    "Status": "Draft"
  },
  {
    "ID": 28,
    "Title": "CWE-28: Path Traversal: '..\\filedir'",
    "Name": "Path Traversal: '..\\filedir'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"..\\\" sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '..\\' manipulation is the canonical manipulation for operating systems that use \"\\\" as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the \"/\" separator is valid.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 29,
    "Title": "CWE-29: Path Traversal: '\\..\\filename'",
    "Name": "Path Traversal: '\\..\\filename'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThis is similar to CWE-25, except using \"\\\" instead of \"/\". Sometimes a program checks for \"..\\\" at the beginning of the input, so a \"\\..\\\" can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the \"/\" separator is valid.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 30,
    "Title": "CWE-30: Path Traversal: '\\dir\\..\\filename'",
    "Name": "Path Traversal: '\\dir\\..\\filename'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\dir\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThis is similar to CWE-26, except using \"\\\" instead of \"/\". The '\\dir\\..\\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"..\\\" at the beginning of the input, so a \"\\..\\\" can bypass that check.\n",
    "Status": "Draft"
  },
  {
    "ID": 31,
    "Title": "CWE-31: Path Traversal: 'dir\\..\\..\\filename'",
    "Name": "Path Traversal: 'dir\\..\\..\\filename'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\\..\\..\\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe 'dir\\..\\..\\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one \"..\\\" sequence, so multiple \"..\\\" can bypass that check. Alternately, this manipulation could be used to bypass a check for \"..\\\" at the beginning of the pathname, moving up more than one directory level.\n",
    "Status": "Draft"
  },
  {
    "ID": 32,
    "Title": "CWE-32: Path Traversal: '...' (Triple Dot)",
    "Name": "Path Traversal: '...' (Triple Dot)",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182).\n",
    "Status": "Incomplete"
  },
  {
    "ID": 33,
    "Title": "CWE-33: Path Traversal: '....' (Multiple Dot)",
    "Name": "Path Traversal: '....' (Multiple Dot)",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182).\n",
    "Status": "Incomplete"
  },
  {
    "ID": 34,
    "Title": "CWE-34: Path Traversal: '....//'",
    "Name": "Path Traversal: '....//'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '....//' manipulation is useful for bypassing some path traversal protection schemes. If \"../\" is filtered in a sequential fashion, as done by some regular expression engines, then \"....//\" can collapse into the \"../\" unsafe value (CWE-182). It could also be useful when \"..\" is removed, if the operating system treats \"//\" and \"/\" as equivalent.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 35,
    "Title": "CWE-35: Path Traversal: '.../...//'",
    "Name": "Path Traversal: '.../...//'",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If \"../\" is filtered in a sequential fashion, as done by some regular expression engines, then \".../...//\" can collapse into the \"../\" unsafe value (CWE-182). Removing the first \"../\" yields \"....//\"; the second removal yields \"../\". Depending on the algorithm, the product could be susceptible to CWE-34 but not CWE-35, or vice versa.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 36,
    "Title": "CWE-36: Absolute Path Traversal",
    "Name": "Absolute Path Traversal",
    "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.",
    "Status": "Draft"
  },
  {
    "ID": 37,
    "Title": "CWE-37: Path Traversal: '/absolute/pathname/here'",
    "Name": "Path Traversal: '/absolute/pathname/here'",
    "Description": "The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 38,
    "Title": "CWE-38: Path Traversal: '\\absolute\\pathname\\here'",
    "Name": "Path Traversal: '\\absolute\\pathname\\here'",
    "Description": "The product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 39,
    "Title": "CWE-39: Path Traversal: 'C:dirname'",
    "Name": "Path Traversal: 'C:dirname'",
    "Description": "The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 40,
    "Title": "CWE-40: Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)",
    "Name": "Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)",
    "Description": "The product accepts input that identifies a Windows UNC share ('\\\\UNC\\share\\name') that potentially redirects access to an unintended location or arbitrary file.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 41,
    "Title": "CWE-41: Improper Resolution of Path Equivalence",
    "Name": "Improper Resolution of Path Equivalence",
    "Description": "The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.",
    "ExtendedDescription": "Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.",
    "Status": "Incomplete"
  },
  {
    "ID": 42,
    "Title": "CWE-42: Path Equivalence: 'filename.' (Trailing Dot)",
    "Name": "Path Equivalence: 'filename.' (Trailing Dot)",
    "Description": "The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 43,
    "Title": "CWE-43: Path Equivalence: 'filename....' (Multiple Trailing Dot)",
    "Name": "Path Equivalence: 'filename....' (Multiple Trailing Dot)",
    "Description": "The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 44,
    "Title": "CWE-44: Path Equivalence: 'file.name' (Internal Dot)",
    "Name": "Path Equivalence: 'file.name' (Internal Dot)",
    "Description": "The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 45,
    "Title": "CWE-45: Path Equivalence: 'file...name' (Multiple Internal Dot)",
    "Name": "Path Equivalence: 'file...name' (Multiple Internal Dot)",
    "Description": "The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 46,
    "Title": "CWE-46: Path Equivalence: 'filename ' (Trailing Space)",
    "Name": "Path Equivalence: 'filename ' (Trailing Space)",
    "Description": "The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 47,
    "Title": "CWE-47: Path Equivalence: ' filename' (Leading Space)",
    "Name": "Path Equivalence: ' filename' (Leading Space)",
    "Description": "The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 48,
    "Title": "CWE-48: Path Equivalence: 'file name' (Internal Whitespace)",
    "Name": "Path Equivalence: 'file name' (Internal Whitespace)",
    "Description": "The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 49,
    "Title": "CWE-49: Path Equivalence: 'filename/' (Trailing Slash)",
    "Name": "Path Equivalence: 'filename/' (Trailing Slash)",
    "Description": "The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 50,
    "Title": "CWE-50: Path Equivalence: '//multiple/leading/slash'",
    "Name": "Path Equivalence: '//multiple/leading/slash'",
    "Description": "The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 51,
    "Title": "CWE-51: Path Equivalence: '/multiple//internal/slash'",
    "Name": "Path Equivalence: '/multiple//internal/slash'",
    "Description": "The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 52,
    "Title": "CWE-52: Path Equivalence: '/multiple/trailing/slash//'",
    "Name": "Path Equivalence: '/multiple/trailing/slash//'",
    "Description": "The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 53,
    "Title": "CWE-53: Path Equivalence: '\\multiple\\\\internal\\backslash'",
    "Name": "Path Equivalence: '\\multiple\\\\internal\\backslash'",
    "Description": "The product accepts path input in the form of multiple internal backslash ('\\multiple\\trailing\\\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 54,
    "Title": "CWE-54: Path Equivalence: 'filedir\\' (Trailing Backslash)",
    "Name": "Path Equivalence: 'filedir\\' (Trailing Backslash)",
    "Description": "The product accepts path input in the form of trailing backslash ('filedir\\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 55,
    "Title": "CWE-55: Path Equivalence: '/./' (Single Dot Directory)",
    "Name": "Path Equivalence: '/./' (Single Dot Directory)",
    "Description": "The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 56,
    "Title": "CWE-56: Path Equivalence: 'filedir*' (Wildcard)",
    "Name": "Path Equivalence: 'filedir*' (Wildcard)",
    "Description": "The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 57,
    "Title": "CWE-57: Path Equivalence: 'fakedir/../realdir/filename'",
    "Name": "Path Equivalence: 'fakedir/../realdir/filename'",
    "Description": "The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 58,
    "Title": "CWE-58: Path Equivalence: Windows 8.3 Filename",
    "Name": "Path Equivalence: Windows 8.3 Filename",
    "Description": "The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short \"8.3\" filename.",
    "ExtendedDescription": "On later Windows operating systems, a file can have a \"long name\" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These \"8.3\" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.",
    "Status": "Incomplete"
  },
  {
    "ID": 59,
    "Title": "CWE-59: Improper Link Resolution Before File Access ('Link Following')",
    "Name": "Improper Link Resolution Before File Access ('Link Following')",
    "Description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 61,
    "Title": "CWE-61: UNIX Symbolic Link (Symlink) Following",
    "Name": "UNIX Symbolic Link (Symlink) Following",
    "Description": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "ExtendedDescription": "A product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.",
    "Status": "Incomplete"
  },
  {
    "ID": 62,
    "Title": "CWE-62: UNIX Hard Link",
    "Name": "UNIX Hard Link",
    "Description": "The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "ExtendedDescription": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.",
    "Status": "Incomplete"
  },
  {
    "ID": 64,
    "Title": "CWE-64: Windows Shortcut Following (.LNK)",
    "Name": "Windows Shortcut Following (.LNK)",
    "Description": "The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "ExtendedDescription": "The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.",
    "Status": "Incomplete"
  },
  {
    "ID": 65,
    "Title": "CWE-65: Windows Hard Link",
    "Name": "Windows Hard Link",
    "Description": "The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "ExtendedDescription": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.",
    "Status": "Incomplete"
  },
  {
    "ID": 66,
    "Title": "CWE-66: Improper Handling of File Names that Identify Virtual Resources",
    "Name": "Improper Handling of File Names that Identify Virtual Resources",
    "Description": "The product does not handle or incorrectly handles a file name that identifies a \"virtual\" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.",
    "ExtendedDescription": "Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.",
    "Status": "Draft"
  },
  {
    "ID": 67,
    "Title": "CWE-67: Improper Handling of Windows Device Names",
    "Name": "Improper Handling of Windows Device Names",
    "Description": "The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.",
    "ExtendedDescription": "Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A product that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.",
    "Status": "Incomplete"
  },
  {
    "ID": 69,
    "Title": "CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream",
    "Name": "Improper Handling of Windows ::DATA Alternate Data Stream",
    "Description": "The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).",
    "ExtendedDescription": "An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.",
    "Status": "Incomplete"
  },
  {
    "ID": 71,
    "Title": "CWE-71: DEPRECATED: Apple '.DS_Store'",
    "Name": "DEPRECATED: Apple '.DS_Store'",
    "Description": "This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 72,
    "Title": "CWE-72: Improper Handling of Apple HFS+ Alternate Data Stream Path",
    "Name": "Improper Handling of Apple HFS+ Alternate Data Stream Path",
    "Description": "The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.",
    "ExtendedDescription": "If the product chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the product may take unexpected actions. Further, if the product intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.",
    "Status": "Incomplete"
  },
  {
    "ID": 73,
    "Title": "CWE-73: External Control of File Name or Path",
    "Name": "External Control of File Name or Path",
    "Description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
    "ExtendedDescription": "\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.",
    "Status": "Draft"
  },
  {
    "ID": 74,
    "Title": "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "Name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "Description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "ExtendedDescription": "Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.",
    "Status": "Incomplete"
  },
  {
    "ID": 75,
    "Title": "CWE-75: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
    "Name": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
    "Description": "The product does not adequately filter user-controlled input for special elements with control implications.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 76,
    "Title": "CWE-76: Improper Neutralization of Equivalent Special Elements",
    "Name": "Improper Neutralization of Equivalent Special Elements",
    "Description": "The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.",
    "ExtendedDescription": "The product may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the product may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the product might filter a dangerous \"-e\" command-line switch when calling an external program, but it might not account for \"--exec\" or other switches that have the same semantics.",
    "Status": "Draft"
  },
  {
    "ID": 77,
    "Title": "CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "Name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "Description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "ExtendedDescription": "\n\nMany protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.\n",
    "Status": "Draft"
  },
  {
    "ID": 78,
    "Title": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "Name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "Description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "ExtendedDescription": "\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
    "Status": "Stable"
  },
  {
    "ID": 79,
    "Title": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "Name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "Description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "ExtendedDescription": "\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n\n  1. Untrusted data enters a web application, typically from a web request.\n\n  1. The web application dynamically generates a web page that contains this untrusted data.\n\n  1. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.\n\n  1. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.\n\n  1. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.\n\n  1. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.\n\nThere are three main kinds of XSS:\n\n  -  **Type 1: Reflected XSS (or Non-Persistent)**  - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.\n\n  -  **Type 2: Stored XSS (or Persistent)**  - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. \n\n  -  **Type 0: DOM-Based XSS**  - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. \n\nOnce the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"\n\nIn many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.\n",
    "Status": "Stable"
  },
  {
    "ID": 80,
    "Title": "CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
    "Name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
    "ExtendedDescription": "This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.",
    "Status": "Incomplete"
  },
  {
    "ID": 81,
    "Title": "CWE-81: Improper Neutralization of Script in an Error Message Web Page",
    "Name": "Improper Neutralization of Script in an Error Message Web Page",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.",
    "ExtendedDescription": "\n\nError pages may include customized 403 Forbidden or 404 Not Found pages.\n\n\nWhen an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 82,
    "Title": "CWE-82: Improper Neutralization of Script in Attributes of IMG Tags in a Web Page",
    "Name": "Improper Neutralization of Script in Attributes of IMG Tags in a Web Page",
    "Description": "The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.",
    "ExtendedDescription": "Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.",
    "Status": "Incomplete"
  },
  {
    "ID": 83,
    "Title": "CWE-83: Improper Neutralization of Script in Attributes in a Web Page",
    "Name": "Improper Neutralization of Script in Attributes in a Web Page",
    "Description": "The product does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 84,
    "Title": "CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page",
    "Name": "Improper Neutralization of Encoded URI Schemes in a Web Page",
    "Description": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 85,
    "Title": "CWE-85: Doubled Character XSS Manipulations",
    "Name": "Doubled Character XSS Manipulations",
    "Description": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 86,
    "Title": "CWE-86: Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
    "Name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
    "Description": "The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.",
    "ExtendedDescription": "Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the product may attempt to remove a \"javascript:\" URI scheme, but a \"java%00script:\" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.",
    "Status": "Draft"
  },
  {
    "ID": 87,
    "Title": "CWE-87: Improper Neutralization of Alternate XSS Syntax",
    "Name": "Improper Neutralization of Alternate XSS Syntax",
    "Description": "The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 88,
    "Title": "CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "Name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "Description": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
    "ExtendedDescription": "\n\nWhen creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.\n",
    "Status": "Draft"
  },
  {
    "ID": 89,
    "Title": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "Name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "Description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "ExtendedDescription": null,
    "Status": "Stable"
  },
  {
    "ID": 90,
    "Title": "CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
    "Name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
    "Description": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 91,
    "Title": "CWE-91: XML Injection (aka Blind XPath Injection)",
    "Name": "XML Injection (aka Blind XPath Injection)",
    "Description": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
    "ExtendedDescription": "Within XML, special elements could include reserved words or characters such as \"<\", \">\", \"\"\", and \"&\", which could then be used to add new data or modify XML syntax.",
    "Status": "Draft"
  },
  {
    "ID": 92,
    "Title": "CWE-92: DEPRECATED: Improper Sanitization of Custom Special Characters",
    "Name": "DEPRECATED: Improper Sanitization of Custom Special Characters",
    "Description": "This entry has been deprecated. It originally came from PLOVER, which sometimes defined \"other\" and \"miscellaneous\" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 93,
    "Title": "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')",
    "Name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
    "Description": "The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 94,
    "Title": "CWE-94: Improper Control of Generation of Code ('Code Injection')",
    "Name": "Improper Control of Generation of Code ('Code Injection')",
    "Description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "ExtendedDescription": "\n\nWhen a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution.\n\n\nInjection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.\n",
    "Status": "Draft"
  },
  {
    "ID": 95,
    "Title": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
    "Name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
    "ExtendedDescription": "This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.",
    "Status": "Incomplete"
  },
  {
    "ID": 96,
    "Title": "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
    "Name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 97,
    "Title": "CWE-97: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page",
    "Name": "Improper Neutralization of Server-Side Includes (SSI) Within a Web Page",
    "Description": "The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 98,
    "Title": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
    "Name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
    "Description": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.",
    "ExtendedDescription": "In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.",
    "Status": "Draft"
  },
  {
    "ID": 99,
    "Title": "CWE-99: Improper Control of Resource Identifiers ('Resource Injection')",
    "Name": "Improper Control of Resource Identifiers ('Resource Injection')",
    "Description": "The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.",
    "ExtendedDescription": "\n\nA resource injection issue occurs when the following two conditions are met:\n\n\n  1. An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.\n\n  1. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.\n\nThis may enable an attacker to access or modify otherwise protected system resources.",
    "Status": "Draft"
  },
  {
    "ID": 102,
    "Title": "CWE-102: Struts: Duplicate Validation Forms",
    "Name": "Struts: Duplicate Validation Forms",
    "Description": "The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.",
    "ExtendedDescription": "If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.",
    "Status": "Incomplete"
  },
  {
    "ID": 103,
    "Title": "CWE-103: Struts: Incomplete validate() Method Definition",
    "Name": "Struts: Incomplete validate() Method Definition",
    "Description": "The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().",
    "ExtendedDescription": "If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.",
    "Status": "Draft"
  },
  {
    "ID": 104,
    "Title": "CWE-104: Struts: Form Bean Does Not Extend Validation Class",
    "Name": "Struts: Form Bean Does Not Extend Validation Class",
    "Description": "If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 105,
    "Title": "CWE-105: Struts: Form Field Without Validator",
    "Name": "Struts: Form Field Without Validator",
    "Description": "The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.",
    "ExtendedDescription": "Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
    "Status": "Draft"
  },
  {
    "ID": 106,
    "Title": "CWE-106: Struts: Plug-in Framework not in Use",
    "Name": "Struts: Plug-in Framework not in Use",
    "Description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",
    "ExtendedDescription": "\n\nUnchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.\n\n\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\n",
    "Status": "Draft"
  },
  {
    "ID": 107,
    "Title": "CWE-107: Struts: Unused Validation Form",
    "Name": "Struts: Unused Validation Form",
    "Description": "An unused validation form indicates that validation logic is not up-to-date.",
    "ExtendedDescription": "It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.",
    "Status": "Draft"
  },
  {
    "ID": 108,
    "Title": "CWE-108: Struts: Unvalidated Action Form",
    "Name": "Struts: Unvalidated Action Form",
    "Description": "Every Action Form must have a corresponding validation form.",
    "ExtendedDescription": "If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.",
    "Status": "Incomplete"
  },
  {
    "ID": 109,
    "Title": "CWE-109: Struts: Validator Turned Off",
    "Name": "Struts: Validator Turned Off",
    "Description": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 110,
    "Title": "CWE-110: Struts: Validator Without Form Field",
    "Name": "Struts: Validator Without Form Field",
    "Description": "Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.",
    "ExtendedDescription": "\n\nIt is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.\n\n\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\n",
    "Status": "Draft"
  },
  {
    "ID": 111,
    "Title": "CWE-111: Direct Use of Unsafe JNI",
    "Name": "Direct Use of Unsafe JNI",
    "Description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",
    "ExtendedDescription": "Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",
    "Status": "Draft"
  },
  {
    "ID": 112,
    "Title": "CWE-112: Missing XML Validation",
    "Name": "Missing XML Validation",
    "Description": "The product accepts XML from an untrusted source but does not validate the XML against the proper schema.",
    "ExtendedDescription": "Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.",
    "Status": "Draft"
  },
  {
    "ID": 113,
    "Title": "CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
    "Name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
    "Description": "The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",
    "ExtendedDescription": "\n\n HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response. \n\n\nWhen an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as \"splitting\" the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or \\r, and LF is line feed, also given by %0a or \\n.\n\n\nIn addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or \\t) and SP (space, also given as + sign or %20).\n\n\nThese types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second \"split\" message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks.\n\n\nHTTP response splitting weaknesses may be present when:\n\n\n  1. Data enters a web application through an untrusted source, most frequently an HTTP request.\n\n  1. The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 114,
    "Title": "CWE-114: Process Control",
    "Name": "Process Control",
    "Description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.",
    "ExtendedDescription": "Process control vulnerabilities take two forms: \n\n  - An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n  - An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nProcess control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.",
    "Status": "Incomplete"
  },
  {
    "ID": 115,
    "Title": "CWE-115: Misinterpretation of Input",
    "Name": "Misinterpretation of Input",
    "Description": "The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 116,
    "Title": "CWE-116: Improper Encoding or Escaping of Output",
    "Name": "Improper Encoding or Escaping of Output",
    "Description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
    "ExtendedDescription": "\n\nImproper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.\n\n\nMost products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\").\n\n\nIf an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.\n",
    "Status": "Draft"
  },
  {
    "ID": 117,
    "Title": "CWE-117: Improper Output Neutralization for Logs",
    "Name": "Improper Output Neutralization for Logs",
    "Description": "The product does not neutralize or incorrectly neutralizes output that is written to logs.",
    "ExtendedDescription": "\n\nThis can allow an attacker to forge log entries or inject malicious content into logs.\n\n\nLog forging vulnerabilities occur when:\n\n\n  1. Data enters an application from an untrusted source.\n\n  1. The data is written to an application or system log file.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 118,
    "Title": "CWE-118: Incorrect Access of Indexable Resource ('Range Error')",
    "Name": "Incorrect Access of Indexable Resource ('Range Error')",
    "Description": "The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 119,
    "Title": "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "Name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "Description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "ExtendedDescription": "\n\nCertain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data.\n",
    "Status": "Stable"
  },
  {
    "ID": 120,
    "Title": "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
    "Name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
    "Description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
    "ExtendedDescription": "A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the \"classic\" case in which the product copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.",
    "Status": "Incomplete"
  },
  {
    "ID": 121,
    "Title": "CWE-121: Stack-based Buffer Overflow",
    "Name": "Stack-based Buffer Overflow",
    "Description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 122,
    "Title": "CWE-122: Heap-based Buffer Overflow",
    "Name": "Heap-based Buffer Overflow",
    "Description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 123,
    "Title": "CWE-123: Write-what-where Condition",
    "Name": "Write-what-where Condition",
    "Description": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 124,
    "Title": "CWE-124: Buffer Underwrite ('Buffer Underflow')",
    "Name": "Buffer Underwrite ('Buffer Underflow')",
    "Description": "The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
    "ExtendedDescription": "This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",
    "Status": "Incomplete"
  },
  {
    "ID": 125,
    "Title": "CWE-125: Out-of-bounds Read",
    "Name": "Out-of-bounds Read",
    "Description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 126,
    "Title": "CWE-126: Buffer Over-read",
    "Name": "Buffer Over-read",
    "Description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
    "ExtendedDescription": "This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.",
    "Status": "Draft"
  },
  {
    "ID": 127,
    "Title": "CWE-127: Buffer Under-read",
    "Name": "Buffer Under-read",
    "Description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.",
    "ExtendedDescription": "This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.",
    "Status": "Draft"
  },
  {
    "ID": 128,
    "Title": "CWE-128: Wrap-around Error",
    "Name": "Wrap-around Error",
    "Description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 129,
    "Title": "CWE-129: Improper Validation of Array Index",
    "Name": "Improper Validation of Array Index",
    "Description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 130,
    "Title": "CWE-130: Improper Handling of Length Parameter Inconsistency",
    "Name": "Improper Handling of Length Parameter Inconsistency",
    "Description": "The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",
    "ExtendedDescription": "If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.",
    "Status": "Incomplete"
  },
  {
    "ID": 131,
    "Title": "CWE-131: Incorrect Calculation of Buffer Size",
    "Name": "Incorrect Calculation of Buffer Size",
    "Description": "The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 132,
    "Title": "CWE-132: DEPRECATED: Miscalculated Null Termination",
    "Name": "DEPRECATED: Miscalculated Null Termination",
    "Description": "This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 134,
    "Title": "CWE-134: Use of Externally-Controlled Format String",
    "Name": "Use of Externally-Controlled Format String",
    "Description": "The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",
    "ExtendedDescription": "\n\nWhen an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.\n\n\nIt should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.\n",
    "Status": "Draft"
  },
  {
    "ID": 135,
    "Title": "CWE-135: Incorrect Calculation of Multi-Byte String Length",
    "Name": "Incorrect Calculation of Multi-Byte String Length",
    "Description": "The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 138,
    "Title": "CWE-138: Improper Neutralization of Special Elements",
    "Name": "Improper Neutralization of Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
    "ExtendedDescription": "Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If product does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (\"less than\") as meaning \"read input from a file\".",
    "Status": "Draft"
  },
  {
    "ID": 140,
    "Title": "CWE-140: Improper Neutralization of Delimiters",
    "Name": "Improper Neutralization of Delimiters",
    "Description": "The product does not neutralize or incorrectly neutralizes delimiters.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 141,
    "Title": "CWE-141: Improper Neutralization of Parameter/Argument Delimiters",
    "Name": "Improper Neutralization of Parameter/Argument Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
    "Status": "Draft"
  },
  {
    "ID": 142,
    "Title": "CWE-142: Improper Neutralization of Value Delimiters",
    "Name": "Improper Neutralization of Value Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
    "Status": "Draft"
  },
  {
    "ID": 143,
    "Title": "CWE-143: Improper Neutralization of Record Delimiters",
    "Name": "Improper Neutralization of Record Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
    "Status": "Draft"
  },
  {
    "ID": 144,
    "Title": "CWE-144: Improper Neutralization of Line Delimiters",
    "Name": "Improper Neutralization of Line Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
    "Status": "Draft"
  },
  {
    "ID": 145,
    "Title": "CWE-145: Improper Neutralization of Section Delimiters",
    "Name": "Improper Neutralization of Section Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "\n\nAs data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.\n\n\nOne example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 146,
    "Title": "CWE-146: Improper Neutralization of Expression/Command Delimiters",
    "Name": "Improper Neutralization of Expression/Command Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
    "Status": "Incomplete"
  },
  {
    "ID": 147,
    "Title": "CWE-147: Improper Neutralization of Input Terminators",
    "Name": "Improper Neutralization of Input Terminators",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.",
    "ExtendedDescription": "For example, a \".\" in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.",
    "Status": "Draft"
  },
  {
    "ID": 148,
    "Title": "CWE-148: Improper Neutralization of Input Leaders",
    "Name": "Improper Neutralization of Input Leaders",
    "Description": "The product does not properly handle when a leading character or sequence (\"leader\") is missing or malformed, or if multiple leaders are used when only one should be allowed.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 149,
    "Title": "CWE-149: Improper Neutralization of Quoting Syntax",
    "Name": "Improper Neutralization of Quoting Syntax",
    "Description": "Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 150,
    "Title": "CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences",
    "Name": "Improper Neutralization of Escape, Meta, or Control Sequences",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
    "Status": "Incomplete"
  },
  {
    "ID": 151,
    "Title": "CWE-151: Improper Neutralization of Comment Delimiters",
    "Name": "Improper Neutralization of Comment Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 152,
    "Title": "CWE-152: Improper Neutralization of Macro Symbols",
    "Name": "Improper Neutralization of Macro Symbols",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 153,
    "Title": "CWE-153: Improper Neutralization of Substitution Characters",
    "Name": "Improper Neutralization of Substitution Characters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 154,
    "Title": "CWE-154: Improper Neutralization of Variable Name Delimiters",
    "Name": "Improper Neutralization of Variable Name Delimiters",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: \"$\" for an environment variable.",
    "Status": "Incomplete"
  },
  {
    "ID": 155,
    "Title": "CWE-155: Improper Neutralization of Wildcards or Matching Symbols",
    "Name": "Improper Neutralization of Wildcards or Matching Symbols",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected element may cause the process to take unexpected actions.",
    "Status": "Draft"
  },
  {
    "ID": 156,
    "Title": "CWE-156: Improper Neutralization of Whitespace",
    "Name": "Improper Neutralization of Whitespace",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.",
    "ExtendedDescription": "This can include space, tab, etc.",
    "Status": "Draft"
  },
  {
    "ID": 157,
    "Title": "CWE-157: Failure to Sanitize Paired Delimiters",
    "Name": "Failure to Sanitize Paired Delimiters",
    "Description": "The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.",
    "ExtendedDescription": "\n\nPaired delimiters might include:\n\n\n  - < and > angle brackets\n\n  - ( and ) parentheses\n\n  - { and } braces\n\n  - [ and ] square brackets\n\n  - \" \" double quotes\n\n  - ' ' single quotes\n\n",
    "Status": "Draft"
  },
  {
    "ID": 158,
    "Title": "CWE-158: Improper Neutralization of Null Byte or NUL Character",
    "Name": "Improper Neutralization of Null Byte or NUL Character",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, an injected NUL character or null byte may cause the product to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.",
    "Status": "Incomplete"
  },
  {
    "ID": 159,
    "Title": "CWE-159: Improper Handling of Invalid Use of Special Elements",
    "Name": "Improper Handling of Invalid Use of Special Elements",
    "Description": "The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 160,
    "Title": "CWE-160: Improper Neutralization of Leading Special Elements",
    "Name": "Improper Neutralization of Leading Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 161,
    "Title": "CWE-161: Improper Neutralization of Multiple Leading Special Elements",
    "Name": "Improper Neutralization of Multiple Leading Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 162,
    "Title": "CWE-162: Improper Neutralization of Trailing Special Elements",
    "Name": "Improper Neutralization of Trailing Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 163,
    "Title": "CWE-163: Improper Neutralization of Multiple Trailing Special Elements",
    "Name": "Improper Neutralization of Multiple Trailing Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 164,
    "Title": "CWE-164: Improper Neutralization of Internal Special Elements",
    "Name": "Improper Neutralization of Internal Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 165,
    "Title": "CWE-165: Improper Neutralization of Multiple Internal Special Elements",
    "Name": "Improper Neutralization of Multiple Internal Special Elements",
    "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "ExtendedDescription": "As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 166,
    "Title": "CWE-166: Improper Handling of Missing Special Element",
    "Name": "Improper Handling of Missing Special Element",
    "Description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 167,
    "Title": "CWE-167: Improper Handling of Additional Special Element",
    "Name": "Improper Handling of Additional Special Element",
    "Description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 168,
    "Title": "CWE-168: Improper Handling of Inconsistent Special Elements",
    "Name": "Improper Handling of Inconsistent Special Elements",
    "Description": "The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.",
    "ExtendedDescription": "An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.",
    "Status": "Draft"
  },
  {
    "ID": 170,
    "Title": "CWE-170: Improper Null Termination",
    "Name": "Improper Null Termination",
    "Description": "The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.",
    "ExtendedDescription": "Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.",
    "Status": "Incomplete"
  },
  {
    "ID": 172,
    "Title": "CWE-172: Encoding Error",
    "Name": "Encoding Error",
    "Description": "The product does not properly encode or decode the data, resulting in unexpected values.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 173,
    "Title": "CWE-173: Improper Handling of Alternate Encoding",
    "Name": "Improper Handling of Alternate Encoding",
    "Description": "The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 174,
    "Title": "CWE-174: Double Decoding of the Same Data",
    "Name": "Double Decoding of the Same Data",
    "Description": "The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 175,
    "Title": "CWE-175: Improper Handling of Mixed Encoding",
    "Name": "Improper Handling of Mixed Encoding",
    "Description": "The product does not properly handle when the same input uses several different (mixed) encodings.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 176,
    "Title": "CWE-176: Improper Handling of Unicode Encoding",
    "Name": "Improper Handling of Unicode Encoding",
    "Description": "The product does not properly handle when an input contains Unicode encoding.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 177,
    "Title": "CWE-177: Improper Handling of URL Encoding (Hex Encoding)",
    "Name": "Improper Handling of URL Encoding (Hex Encoding)",
    "Description": "The product does not properly handle when all or part of an input has been URL encoded.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 178,
    "Title": "CWE-178: Improper Handling of Case Sensitivity",
    "Name": "Improper Handling of Case Sensitivity",
    "Description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.",
    "ExtendedDescription": "\n\nImproperly handled case sensitive data can lead to several possible consequences, including:\n\n\n  - case-insensitive passwords reducing the size of the key space, making brute force attacks easier\n\n  - bypassing filters or access controls using alternate names\n\n  - multiple interpretation errors using alternate names.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 179,
    "Title": "CWE-179: Incorrect Behavior Order: Early Validation",
    "Name": "Incorrect Behavior Order: Early Validation",
    "Description": "The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",
    "ExtendedDescription": "Product needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.",
    "Status": "Incomplete"
  },
  {
    "ID": 180,
    "Title": "CWE-180: Incorrect Behavior Order: Validate Before Canonicalize",
    "Name": "Incorrect Behavior Order: Validate Before Canonicalize",
    "Description": "The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.",
    "ExtendedDescription": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",
    "Status": "Draft"
  },
  {
    "ID": 181,
    "Title": "CWE-181: Incorrect Behavior Order: Validate Before Filter",
    "Name": "Incorrect Behavior Order: Validate Before Filter",
    "Description": "The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.",
    "ExtendedDescription": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",
    "Status": "Draft"
  },
  {
    "ID": 182,
    "Title": "CWE-182: Collapse of Data into Unsafe Value",
    "Name": "Collapse of Data into Unsafe Value",
    "Description": "The product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 183,
    "Title": "CWE-183: Permissive List of Allowed Inputs",
    "Name": "Permissive List of Allowed Inputs",
    "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 184,
    "Title": "CWE-184: Incomplete List of Disallowed Inputs",
    "Name": "Incomplete List of Disallowed Inputs",
    "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",
    "ExtendedDescription": "Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.",
    "Status": "Draft"
  },
  {
    "ID": 185,
    "Title": "CWE-185: Incorrect Regular Expression",
    "Name": "Incorrect Regular Expression",
    "Description": "The product specifies a regular expression in a way that causes data to be improperly matched or compared.",
    "ExtendedDescription": "When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.",
    "Status": "Draft"
  },
  {
    "ID": 186,
    "Title": "CWE-186: Overly Restrictive Regular Expression",
    "Name": "Overly Restrictive Regular Expression",
    "Description": "A regular expression is overly restrictive, which prevents dangerous values from being detected.",
    "ExtendedDescription": "This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not \"complex\" but the value \"9\" is not matched when maybe the programmer planned to check for it.",
    "Status": "Draft"
  },
  {
    "ID": 187,
    "Title": "CWE-187: Partial String Comparison",
    "Name": "Partial String Comparison",
    "Description": "The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.",
    "ExtendedDescription": "For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.",
    "Status": "Incomplete"
  },
  {
    "ID": 188,
    "Title": "CWE-188: Reliance on Data/Memory Layout",
    "Name": "Reliance on Data/Memory Layout",
    "Description": "The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",
    "ExtendedDescription": "\n\nWhen changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.\n\n\nIn protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.\n",
    "Status": "Draft"
  },
  {
    "ID": 190,
    "Title": "CWE-190: Integer Overflow or Wraparound",
    "Name": "Integer Overflow or Wraparound",
    "Description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "ExtendedDescription": null,
    "Status": "Stable"
  },
  {
    "ID": 191,
    "Title": "CWE-191: Integer Underflow (Wrap or Wraparound)",
    "Name": "Integer Underflow (Wrap or Wraparound)",
    "Description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
    "ExtendedDescription": "This can happen in signed and unsigned cases.",
    "Status": "Draft"
  },
  {
    "ID": 192,
    "Title": "CWE-192: Integer Coercion Error",
    "Name": "Integer Coercion Error",
    "Description": "Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",
    "ExtendedDescription": "Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.",
    "Status": "Incomplete"
  },
  {
    "ID": 193,
    "Title": "CWE-193: Off-by-one Error",
    "Name": "Off-by-one Error",
    "Description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 194,
    "Title": "CWE-194: Unexpected Sign Extension",
    "Name": "Unexpected Sign Extension",
    "Description": "The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 195,
    "Title": "CWE-195: Signed to Unsigned Conversion Error",
    "Name": "Signed to Unsigned Conversion Error",
    "Description": "The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.",
    "ExtendedDescription": "\n\nIt is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program.\n\n\nOften, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.\n",
    "Status": "Draft"
  },
  {
    "ID": 196,
    "Title": "CWE-196: Unsigned to Signed Conversion Error",
    "Name": "Unsigned to Signed Conversion Error",
    "Description": "The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.",
    "ExtendedDescription": "Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.",
    "Status": "Draft"
  },
  {
    "ID": 197,
    "Title": "CWE-197: Numeric Truncation Error",
    "Name": "Numeric Truncation Error",
    "Description": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
    "ExtendedDescription": "When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.",
    "Status": "Incomplete"
  },
  {
    "ID": 198,
    "Title": "CWE-198: Use of Incorrect Byte Ordering",
    "Name": "Use of Incorrect Byte Ordering",
    "Description": "The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 200,
    "Title": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
    "Name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "Description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "ExtendedDescription": "\n\nThere are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include:\n\n\n  - private, personal information, such as personal messages, financial data, health records, geographic location, or contact details\n\n  - system status and environment, such as the operating system and installed packages\n\n  - business secrets and intellectual property\n\n  - network status and configuration\n\n  - the product's own code or internal state\n\n  - metadata, e.g. logging of connections or message headers\n\n  - indirect information, such as a discrepancy between two internal operations that can be observed by an outsider\n\nInformation might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include:\n\n  - the product's own users\n\n  - people or organizations whose information is created or used by the product, even if they are not direct product users\n\n  - the product's administrators, including the admins of the system(s) and/or networks on which the product operates\n\n  - the developer\n\nInformation exposures can occur in different ways:\n\n  - the code  **explicitly inserts**  sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been \"scrubbed\" or \"sanitized\"\n\n  - a different weakness or mistake  **indirectly inserts**  the sensitive information into resources, such as a web script error revealing the full system path of the program.\n\n  - the code manages resources that intentionally contain sensitive information, but the resources are  **unintentionally made accessible**  to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place.\n\nIt is common practice to describe any loss of confidentiality as an \"information exposure,\" but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.",
    "Status": "Draft"
  },
  {
    "ID": 201,
    "Title": "CWE-201: Insertion of Sensitive Information Into Sent Data",
    "Name": "Insertion of Sensitive Information Into Sent Data",
    "Description": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",
    "ExtendedDescription": "Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).",
    "Status": "Draft"
  },
  {
    "ID": 202,
    "Title": "CWE-202: Exposure of Sensitive Information Through Data Queries",
    "Name": "Exposure of Sensitive Information Through Data Queries",
    "Description": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",
    "ExtendedDescription": "In situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.",
    "Status": "Draft"
  },
  {
    "ID": 203,
    "Title": "CWE-203: Observable Discrepancy",
    "Name": "Observable Discrepancy",
    "Description": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
    "ExtendedDescription": "Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.",
    "Status": "Incomplete"
  },
  {
    "ID": 204,
    "Title": "CWE-204: Observable Response Discrepancy",
    "Name": "Observable Response Discrepancy",
    "Description": "The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.",
    "ExtendedDescription": "This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).",
    "Status": "Incomplete"
  },
  {
    "ID": 205,
    "Title": "CWE-205: Observable Behavioral Discrepancy",
    "Name": "Observable Behavioral Discrepancy",
    "Description": "The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.",
    "ExtendedDescription": "Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel.",
    "Status": "Incomplete"
  },
  {
    "ID": 206,
    "Title": "CWE-206: Observable Internal Behavioral Discrepancy",
    "Name": "Observable Internal Behavioral Discrepancy",
    "Description": "The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.",
    "ExtendedDescription": "Ideally, a product should provide as little information as possible to an attacker. Any hints that the attacker may be making progress can then be used to simplify or optimize the attack. For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure. However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct. If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password.",
    "Status": "Incomplete"
  },
  {
    "ID": 207,
    "Title": "CWE-207: Observable Behavioral Discrepancy With Equivalent Products",
    "Name": "Observable Behavioral Discrepancy With Equivalent Products",
    "Description": "The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.",
    "ExtendedDescription": "For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system. Attackers often perform \"fingerprinting,\" which uses discrepancies in order to identify which specific product is in use. Once the specific product has been identified, the attacks can be made more customized and efficient. Often, an organization might intentionally allow the specific product to be identifiable. However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way. In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc.",
    "Status": "Draft"
  },
  {
    "ID": 208,
    "Title": "CWE-208: Observable Timing Discrepancy",
    "Name": "Observable Timing Discrepancy",
    "Description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
    "ExtendedDescription": "In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel.",
    "Status": "Incomplete"
  },
  {
    "ID": 209,
    "Title": "CWE-209: Generation of Error Message Containing Sensitive Information",
    "Name": "Generation of Error Message Containing Sensitive Information",
    "Description": "The product generates an error message that includes sensitive information about its environment, users, or associated data.",
    "ExtendedDescription": "\n\nThe sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:\n\n\n  - self-generated: the source code explicitly constructs the error message and delivers it\n\n  - externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer\n\nAn attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.",
    "Status": "Draft"
  },
  {
    "ID": 210,
    "Title": "CWE-210: Self-generated Error Message Containing Sensitive Information",
    "Name": "Self-generated Error Message Containing Sensitive Information",
    "Description": "The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 211,
    "Title": "CWE-211: Externally-Generated Error Message Containing Sensitive Information",
    "Name": "Externally-Generated Error Message Containing Sensitive Information",
    "Description": "The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 212,
    "Title": "CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer",
    "Name": "Improper Removal of Sensitive Information Before Storage or Transfer",
    "Description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
    "ExtendedDescription": "\n\nResources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.\n\n\nFor example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 213,
    "Title": "CWE-213: Exposure of Sensitive Information Due to Incompatible Policies",
    "Name": "Exposure of Sensitive Information Due to Incompatible Policies",
    "Description": "The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.",
    "ExtendedDescription": "\n\nWhen handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.\n",
    "Status": "Draft"
  },
  {
    "ID": 214,
    "Title": "CWE-214: Invocation of Process Using Visible Sensitive Information",
    "Name": "Invocation of Process Using Visible Sensitive Information",
    "Description": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.",
    "ExtendedDescription": "Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.",
    "Status": "Incomplete"
  },
  {
    "ID": 215,
    "Title": "CWE-215: Insertion of Sensitive Information Into Debugging Code",
    "Name": "Insertion of Sensitive Information Into Debugging Code",
    "Description": "The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.",
    "ExtendedDescription": "When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.",
    "Status": "Draft"
  },
  {
    "ID": 216,
    "Title": "CWE-216: DEPRECATED: Containment Errors (Container Errors)",
    "Name": "DEPRECATED: Containment Errors (Container Errors)",
    "Description": "This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the \"container\" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 217,
    "Title": "CWE-217: DEPRECATED: Failure to Protect Stored Data from Modification",
    "Name": "DEPRECATED: Failure to Protect Stored Data from Modification",
    "Description": "This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 218,
    "Title": "CWE-218: DEPRECATED: Failure to provide confidentiality for stored data",
    "Name": "DEPRECATED: Failure to provide confidentiality for stored data",
    "Description": "This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 219,
    "Title": "CWE-219: Storage of File with Sensitive Data Under Web Root",
    "Name": "Storage of File with Sensitive Data Under Web Root",
    "Description": "The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.",
    "ExtendedDescription": "Besides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.",
    "Status": "Draft"
  },
  {
    "ID": 220,
    "Title": "CWE-220: Storage of File With Sensitive Data Under FTP Root",
    "Name": "Storage of File With Sensitive Data Under FTP Root",
    "Description": "The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 221,
    "Title": "CWE-221: Information Loss or Omission",
    "Name": "Information Loss or Omission",
    "Description": "The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.",
    "ExtendedDescription": "This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.",
    "Status": "Incomplete"
  },
  {
    "ID": 222,
    "Title": "CWE-222: Truncation of Security-relevant Information",
    "Name": "Truncation of Security-relevant Information",
    "Description": "The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 223,
    "Title": "CWE-223: Omission of Security-relevant Information",
    "Name": "Omission of Security-relevant Information",
    "Description": "The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 224,
    "Title": "CWE-224: Obscured Security-relevant Information by Alternate Name",
    "Name": "Obscured Security-relevant Information by Alternate Name",
    "Description": "The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 225,
    "Title": "CWE-225: DEPRECATED: General Information Management Problems",
    "Name": "DEPRECATED: General Information Management Problems",
    "Description": "This weakness can be found at CWE-199.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 226,
    "Title": "CWE-226: Sensitive Information in Resource Not Removed Before Reuse",
    "Name": "Sensitive Information in Resource Not Removed Before Reuse",
    "Description": "The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.",
    "ExtendedDescription": "\n\nWhen resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.\n\n\nEven when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.\n\n\nThis weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\n",
    "Status": "Draft"
  },
  {
    "ID": 228,
    "Title": "CWE-228: Improper Handling of Syntactically Invalid Structure",
    "Name": "Improper Handling of Syntactically Invalid Structure",
    "Description": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 229,
    "Title": "CWE-229: Improper Handling of Values",
    "Name": "Improper Handling of Values",
    "Description": "The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 230,
    "Title": "CWE-230: Improper Handling of Missing Values",
    "Name": "Improper Handling of Missing Values",
    "Description": "The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 231,
    "Title": "CWE-231: Improper Handling of Extra Values",
    "Name": "Improper Handling of Extra Values",
    "Description": "The product does not handle or incorrectly handles when more values are provided than expected.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 232,
    "Title": "CWE-232: Improper Handling of Undefined Values",
    "Name": "Improper Handling of Undefined Values",
    "Description": "The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 233,
    "Title": "CWE-233: Improper Handling of Parameters",
    "Name": "Improper Handling of Parameters",
    "Description": "The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 234,
    "Title": "CWE-234: Failure to Handle Missing Parameter",
    "Name": "Failure to Handle Missing Parameter",
    "Description": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 235,
    "Title": "CWE-235: Improper Handling of Extra Parameters",
    "Name": "Improper Handling of Extra Parameters",
    "Description": "The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 236,
    "Title": "CWE-236: Improper Handling of Undefined Parameters",
    "Name": "Improper Handling of Undefined Parameters",
    "Description": "The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 237,
    "Title": "CWE-237: Improper Handling of Structural Elements",
    "Name": "Improper Handling of Structural Elements",
    "Description": "The product does not handle or incorrectly handles inputs that are related to complex structures.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 238,
    "Title": "CWE-238: Improper Handling of Incomplete Structural Elements",
    "Name": "Improper Handling of Incomplete Structural Elements",
    "Description": "The product does not handle or incorrectly handles when a particular structural element is not completely specified.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 239,
    "Title": "CWE-239: Failure to Handle Incomplete Element",
    "Name": "Failure to Handle Incomplete Element",
    "Description": "The product does not properly handle when a particular element is not completely specified.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 240,
    "Title": "CWE-240: Improper Handling of Inconsistent Structural Elements",
    "Name": "Improper Handling of Inconsistent Structural Elements",
    "Description": "The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 241,
    "Title": "CWE-241: Improper Handling of Unexpected Data Type",
    "Name": "Improper Handling of Unexpected Data Type",
    "Description": "The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 242,
    "Title": "CWE-242: Use of Inherently Dangerous Function",
    "Name": "Use of Inherently Dangerous Function",
    "Description": "The product calls a function that can never be guaranteed to work safely.",
    "ExtendedDescription": "Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.",
    "Status": "Draft"
  },
  {
    "ID": 243,
    "Title": "CWE-243: Creation of chroot Jail Without Changing Working Directory",
    "Name": "Creation of chroot Jail Without Changing Working Directory",
    "Description": "The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.",
    "ExtendedDescription": "Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.",
    "Status": "Draft"
  },
  {
    "ID": 244,
    "Title": "CWE-244: Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
    "Name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
    "Description": "Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.",
    "ExtendedDescription": "When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a \"heap inspection\" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.",
    "Status": "Draft"
  },
  {
    "ID": 245,
    "Title": "CWE-245: J2EE Bad Practices: Direct Management of Connections",
    "Name": "J2EE Bad Practices: Direct Management of Connections",
    "Description": "The J2EE application directly manages connections, instead of using the container's connection management facilities.",
    "ExtendedDescription": "The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.",
    "Status": "Draft"
  },
  {
    "ID": 246,
    "Title": "CWE-246: J2EE Bad Practices: Direct Use of Sockets",
    "Name": "J2EE Bad Practices: Direct Use of Sockets",
    "Description": "The J2EE application directly uses sockets instead of using framework method calls.",
    "ExtendedDescription": "\n\nThe J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.\n\n\nWithout significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.\n",
    "Status": "Draft"
  },
  {
    "ID": 247,
    "Title": "CWE-247: DEPRECATED: Reliance on DNS Lookups in a Security Decision",
    "Name": "DEPRECATED: Reliance on DNS Lookups in a Security Decision",
    "Description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 248,
    "Title": "CWE-248: Uncaught Exception",
    "Name": "Uncaught Exception",
    "Description": "An exception is thrown from a function, but it is not caught.",
    "ExtendedDescription": "When an exception is not caught, it may cause the program to crash or expose sensitive information.",
    "Status": "Draft"
  },
  {
    "ID": 249,
    "Title": "CWE-249: DEPRECATED: Often Misused: Path Manipulation",
    "Name": "DEPRECATED: Often Misused: Path Manipulation",
    "Description": "This entry has been deprecated because of name\n\tconfusion and an accidental combination of multiple\n\tweaknesses. Most of its content has been transferred to\n\tCWE-785.",
    "ExtendedDescription": "\n\nThis entry was deprecated for several reasons. The primary reason is over-loading of the \"path manipulation\" term and the description. The original description for this entry was the same as that for the \"Often Misused: File System\" item in the original Seven Pernicious Kingdoms paper. However, Seven Pernicious Kingdoms also has a \"Path Manipulation\" phrase that is for external control of pathnames (CWE-73), which is a factor in symbolic link following and path traversal, neither of which is explicitly mentioned in 7PK. Fortify uses the phrase \"Often Misused: Path Manipulation\" for a broader range of problems, generally for issues related to buffer management. Given the multiple conflicting uses of this term, there is a chance that CWE users may have incorrectly mapped to this entry.\n\n\nThe second reason for deprecation is an implied combination of multiple weaknesses within buffer-handling functions. The focus of this entry was generally on the path-conversion functions and their association with buffer overflows. However, some of Fortify's Vulncat entries have the term \"path manipulation\" but describe a non-overflow weakness in which the buffer is not guaranteed to contain the entire pathname, i.e., there is information truncation (see CWE-222 for a similar concept). A new entry for this non-overflow weakness may be created in a future version of CWE.\n",
    "Status": "Deprecated"
  },
  {
    "ID": 250,
    "Title": "CWE-250: Execution with Unnecessary Privileges",
    "Name": "Execution with Unnecessary Privileges",
    "Description": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
    "ExtendedDescription": "\n\nNew weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.\n\n\nPrivilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.\n",
    "Status": "Draft"
  },
  {
    "ID": 252,
    "Title": "CWE-252: Unchecked Return Value",
    "Name": "Unchecked Return Value",
    "Description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
    "ExtendedDescription": "Two common programmer assumptions are \"this function call can never fail\" and \"it doesn't matter if this function call fails\". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the product is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",
    "Status": "Draft"
  },
  {
    "ID": 253,
    "Title": "CWE-253: Incorrect Check of Function Return Value",
    "Name": "Incorrect Check of Function Return Value",
    "Description": "The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.",
    "ExtendedDescription": "Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.",
    "Status": "Incomplete"
  },
  {
    "ID": 256,
    "Title": "CWE-256: Plaintext Storage of a Password",
    "Name": "Plaintext Storage of a Password",
    "Description": "Storing a password in plaintext may result in a system compromise.",
    "ExtendedDescription": "Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.",
    "Status": "Incomplete"
  },
  {
    "ID": 257,
    "Title": "CWE-257: Storing Passwords in a Recoverable Format",
    "Name": "Storing Passwords in a Recoverable Format",
    "Description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 258,
    "Title": "CWE-258: Empty Password in Configuration File",
    "Name": "Empty Password in Configuration File",
    "Description": "Using an empty string as a password is insecure.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 259,
    "Title": "CWE-259: Use of Hard-coded Password",
    "Name": "Use of Hard-coded Password",
    "Description": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",
    "ExtendedDescription": "\n\nA hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\n\n```\n\t\tInbound: the product contains an authentication mechanism that checks for a hard-coded password.\n\t\tOutbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.\n```\nIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\n\nThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\n",
    "Status": "Draft"
  },
  {
    "ID": 260,
    "Title": "CWE-260: Password in Configuration File",
    "Name": "Password in Configuration File",
    "Description": "The product stores a password in a configuration file that might be accessible to actors who do not know the password.",
    "ExtendedDescription": "This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.",
    "Status": "Incomplete"
  },
  {
    "ID": 261,
    "Title": "CWE-261: Weak Encoding for Password",
    "Name": "Weak Encoding for Password",
    "Description": "Obscuring a password with a trivial encoding does not protect the password.",
    "ExtendedDescription": "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.",
    "Status": "Incomplete"
  },
  {
    "ID": 262,
    "Title": "CWE-262: Not Using Password Aging",
    "Name": "Not Using Password Aging",
    "Description": "The product does not have a mechanism in place for managing password aging.",
    "ExtendedDescription": "\n\nPassword aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. Without mechanisms such as aging, users might not change their passwords in a timely manner.\n\n\nNote that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).\n",
    "Status": "Draft"
  },
  {
    "ID": 263,
    "Title": "CWE-263: Password Aging with Long Expiration",
    "Name": "Password Aging with Long Expiration",
    "Description": "The product supports password aging, but the expiration period is too long.",
    "ExtendedDescription": "\n\nPassword aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. A long expiration provides more time for attackers to conduct password cracking before users are forced to change to a new password.\n\n\nNote that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).\n",
    "Status": "Draft"
  },
  {
    "ID": 266,
    "Title": "CWE-266: Incorrect Privilege Assignment",
    "Name": "Incorrect Privilege Assignment",
    "Description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 267,
    "Title": "CWE-267: Privilege Defined With Unsafe Actions",
    "Name": "Privilege Defined With Unsafe Actions",
    "Description": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 268,
    "Title": "CWE-268: Privilege Chaining",
    "Name": "Privilege Chaining",
    "Description": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 269,
    "Title": "CWE-269: Improper Privilege Management",
    "Name": "Improper Privilege Management",
    "Description": "The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 270,
    "Title": "CWE-270: Privilege Context Switching Error",
    "Name": "Privilege Context Switching Error",
    "Description": "The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 271,
    "Title": "CWE-271: Privilege Dropping / Lowering Errors",
    "Name": "Privilege Dropping / Lowering Errors",
    "Description": "The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.",
    "ExtendedDescription": "In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.",
    "Status": "Incomplete"
  },
  {
    "ID": 272,
    "Title": "CWE-272: Least Privilege Violation",
    "Name": "Least Privilege Violation",
    "Description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 273,
    "Title": "CWE-273: Improper Check for Dropped Privileges",
    "Name": "Improper Check for Dropped Privileges",
    "Description": "The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.",
    "ExtendedDescription": "If the drop fails, the product will continue to run with the raised privileges, which might provide additional access to unprivileged users.",
    "Status": "Incomplete"
  },
  {
    "ID": 274,
    "Title": "CWE-274: Improper Handling of Insufficient Privileges",
    "Name": "Improper Handling of Insufficient Privileges",
    "Description": "The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 276,
    "Title": "CWE-276: Incorrect Default Permissions",
    "Name": "Incorrect Default Permissions",
    "Description": "During installation, installed file permissions are set to allow anyone to modify those files.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 277,
    "Title": "CWE-277: Insecure Inherited Permissions",
    "Name": "Insecure Inherited Permissions",
    "Description": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 278,
    "Title": "CWE-278: Insecure Preserved Inherited Permissions",
    "Name": "Insecure Preserved Inherited Permissions",
    "Description": "A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 279,
    "Title": "CWE-279: Incorrect Execution-Assigned Permissions",
    "Name": "Incorrect Execution-Assigned Permissions",
    "Description": "While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 280,
    "Title": "CWE-280: Improper Handling of Insufficient Permissions or Privileges ",
    "Name": "Improper Handling of Insufficient Permissions or Privileges ",
    "Description": "The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 281,
    "Title": "CWE-281: Improper Preservation of Permissions",
    "Name": "Improper Preservation of Permissions",
    "Description": "The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 282,
    "Title": "CWE-282: Improper Ownership Management",
    "Name": "Improper Ownership Management",
    "Description": "The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 283,
    "Title": "CWE-283: Unverified Ownership",
    "Name": "Unverified Ownership",
    "Description": "The product does not properly verify that a critical resource is owned by the proper entity.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 284,
    "Title": "CWE-284: Improper Access Control",
    "Name": "Improper Access Control",
    "Description": "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
    "ExtendedDescription": "\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 285,
    "Title": "CWE-285: Improper Authorization",
    "Name": "Improper Authorization",
    "Description": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
    "ExtendedDescription": "\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n",
    "Status": "Draft"
  },
  {
    "ID": 286,
    "Title": "CWE-286: Incorrect User Management",
    "Name": "Incorrect User Management",
    "Description": "The product does not properly manage a user within its environment.",
    "ExtendedDescription": "Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.",
    "Status": "Incomplete"
  },
  {
    "ID": 287,
    "Title": "CWE-287: Improper Authentication",
    "Name": "Improper Authentication",
    "Description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 288,
    "Title": "CWE-288: Authentication Bypass Using an Alternate Path or Channel",
    "Name": "Authentication Bypass Using an Alternate Path or Channel",
    "Description": "A product requires authentication, but the product has an alternate path or channel that does not require authentication.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 289,
    "Title": "CWE-289: Authentication Bypass by Alternate Name",
    "Name": "Authentication Bypass by Alternate Name",
    "Description": "The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 290,
    "Title": "CWE-290: Authentication Bypass by Spoofing",
    "Name": "Authentication Bypass by Spoofing",
    "Description": "This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 291,
    "Title": "CWE-291: Reliance on IP Address for Authentication",
    "Name": "Reliance on IP Address for Authentication",
    "Description": "The product uses an IP address for authentication.",
    "ExtendedDescription": "IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.",
    "Status": "Incomplete"
  },
  {
    "ID": 292,
    "Title": "CWE-292: DEPRECATED: Trusting Self-reported DNS Name",
    "Name": "DEPRECATED: Trusting Self-reported DNS Name",
    "Description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 293,
    "Title": "CWE-293: Using Referer Field for Authentication",
    "Name": "Using Referer Field for Authentication",
    "Description": "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 294,
    "Title": "CWE-294: Authentication Bypass by Capture-replay",
    "Name": "Authentication Bypass by Capture-replay",
    "Description": "A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).",
    "ExtendedDescription": "Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.",
    "Status": "Incomplete"
  },
  {
    "ID": 295,
    "Title": "CWE-295: Improper Certificate Validation",
    "Name": "Improper Certificate Validation",
    "Description": "The product does not validate, or incorrectly validates, a certificate.",
    "ExtendedDescription": "When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.",
    "Status": "Draft"
  },
  {
    "ID": 296,
    "Title": "CWE-296: Improper Following of a Certificate's Chain of Trust",
    "Name": "Improper Following of a Certificate's Chain of Trust",
    "Description": "The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.",
    "ExtendedDescription": "\n\nIf a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.\n\n\nIn some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.\n\n\nThere are several ways in which the chain of trust might be broken, including but not limited to:\n\n\n  - Any certificate in the chain is self-signed, unless it the root.\n\n  - Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.\n\n  - An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.\n\n  - The root certificate has been compromised or authorized to the wrong party.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 297,
    "Title": "CWE-297: Improper Validation of Certificate with Host Mismatch",
    "Name": "Improper Validation of Certificate with Host Mismatch",
    "Description": "The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.",
    "ExtendedDescription": "\n\nEven if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the product is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.\n\n\nEven if the product attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.\n\n\nThis weakness can occur even when the product uses Certificate Pinning, if the product does not verify the hostname at the time a certificate is pinned.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 298,
    "Title": "CWE-298: Improper Validation of Certificate Expiration",
    "Name": "Improper Validation of Certificate Expiration",
    "Description": "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.",
    "ExtendedDescription": "When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.",
    "Status": "Draft"
  },
  {
    "ID": 299,
    "Title": "CWE-299: Improper Check for Certificate Revocation",
    "Name": "Improper Check for Certificate Revocation",
    "Description": "The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.",
    "ExtendedDescription": "An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.",
    "Status": "Draft"
  },
  {
    "ID": 300,
    "Title": "CWE-300: Channel Accessible by Non-Endpoint",
    "Name": "Channel Accessible by Non-Endpoint",
    "Description": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
    "ExtendedDescription": "In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.",
    "Status": "Draft"
  },
  {
    "ID": 301,
    "Title": "CWE-301: Reflection Attack in an Authentication Protocol",
    "Name": "Reflection Attack in an Authentication Protocol",
    "Description": "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.",
    "ExtendedDescription": "\n\nA mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.\n\n\nReflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user.\n",
    "Status": "Draft"
  },
  {
    "ID": 302,
    "Title": "CWE-302: Authentication Bypass by Assumed-Immutable Data",
    "Name": "Authentication Bypass by Assumed-Immutable Data",
    "Description": "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 303,
    "Title": "CWE-303: Incorrect Implementation of Authentication Algorithm",
    "Name": "Incorrect Implementation of Authentication Algorithm",
    "Description": "The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",
    "ExtendedDescription": "This incorrect implementation may allow authentication to be bypassed.",
    "Status": "Draft"
  },
  {
    "ID": 304,
    "Title": "CWE-304: Missing Critical Step in Authentication",
    "Name": "Missing Critical Step in Authentication",
    "Description": "The product implements an authentication technique, but it skips a step that weakens the technique.",
    "ExtendedDescription": "Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.",
    "Status": "Draft"
  },
  {
    "ID": 305,
    "Title": "CWE-305: Authentication Bypass by Primary Weakness",
    "Name": "Authentication Bypass by Primary Weakness",
    "Description": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 306,
    "Title": "CWE-306: Missing Authentication for Critical Function",
    "Name": "Missing Authentication for Critical Function",
    "Description": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 307,
    "Title": "CWE-307: Improper Restriction of Excessive Authentication Attempts",
    "Name": "Improper Restriction of Excessive Authentication Attempts",
    "Description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 308,
    "Title": "CWE-308: Use of Single-factor Authentication",
    "Name": "Use of Single-factor Authentication",
    "Description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.",
    "ExtendedDescription": "While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.",
    "Status": "Draft"
  },
  {
    "ID": 309,
    "Title": "CWE-309: Use of Password System for Primary Authentication",
    "Name": "Use of Password System for Primary Authentication",
    "Description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 311,
    "Title": "CWE-311: Missing Encryption of Sensitive Data",
    "Name": "Missing Encryption of Sensitive Data",
    "Description": "The product does not encrypt sensitive or critical information before storage or transmission.",
    "ExtendedDescription": "The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.",
    "Status": "Draft"
  },
  {
    "ID": 312,
    "Title": "CWE-312: Cleartext Storage of Sensitive Information",
    "Name": "Cleartext Storage of Sensitive Information",
    "Description": "The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.",
    "ExtendedDescription": "\n\nBecause the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.\n\n\nWhen organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet.\n\n\nIn some systems/environments such as cloud, the use of \"double encryption\" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.\n",
    "Status": "Draft"
  },
  {
    "ID": 313,
    "Title": "CWE-313: Cleartext Storage in a File or on Disk",
    "Name": "Cleartext Storage in a File or on Disk",
    "Description": "The product stores sensitive information in cleartext in a file, or on disk.",
    "ExtendedDescription": "The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
    "Status": "Draft"
  },
  {
    "ID": 314,
    "Title": "CWE-314: Cleartext Storage in the Registry",
    "Name": "Cleartext Storage in the Registry",
    "Description": "The product stores sensitive information in cleartext in the registry.",
    "ExtendedDescription": "Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
    "Status": "Draft"
  },
  {
    "ID": 315,
    "Title": "CWE-315: Cleartext Storage of Sensitive Information in a Cookie",
    "Name": "Cleartext Storage of Sensitive Information in a Cookie",
    "Description": "The product stores sensitive information in cleartext in a cookie.",
    "ExtendedDescription": "Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
    "Status": "Draft"
  },
  {
    "ID": 316,
    "Title": "CWE-316: Cleartext Storage of Sensitive Information in Memory",
    "Name": "Cleartext Storage of Sensitive Information in Memory",
    "Description": "The product stores sensitive information in cleartext in memory.",
    "ExtendedDescription": "\n\nThe sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the product crashes, or if the programmer does not properly clear the memory before freeing it.\n\n\nIt could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.\n",
    "Status": "Draft"
  },
  {
    "ID": 317,
    "Title": "CWE-317: Cleartext Storage of Sensitive Information in GUI",
    "Name": "Cleartext Storage of Sensitive Information in GUI",
    "Description": "The product stores sensitive information in cleartext within the GUI.",
    "ExtendedDescription": "An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
    "Status": "Draft"
  },
  {
    "ID": 318,
    "Title": "CWE-318: Cleartext Storage of Sensitive Information in Executable",
    "Name": "Cleartext Storage of Sensitive Information in Executable",
    "Description": "The product stores sensitive information in cleartext in an executable.",
    "ExtendedDescription": "Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
    "Status": "Draft"
  },
  {
    "ID": 319,
    "Title": "CWE-319: Cleartext Transmission of Sensitive Information",
    "Name": "Cleartext Transmission of Sensitive Information",
    "Description": "The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.",
    "ExtendedDescription": "\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n",
    "Status": "Draft"
  },
  {
    "ID": 321,
    "Title": "CWE-321: Use of Hard-coded Cryptographic Key",
    "Name": "Use of Hard-coded Cryptographic Key",
    "Description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 322,
    "Title": "CWE-322: Key Exchange without Entity Authentication",
    "Name": "Key Exchange without Entity Authentication",
    "Description": "The product performs a key exchange with an actor without verifying the identity of that actor.",
    "ExtendedDescription": "Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.",
    "Status": "Draft"
  },
  {
    "ID": 323,
    "Title": "CWE-323: Reusing a Nonce, Key Pair in Encryption",
    "Name": "Reusing a Nonce, Key Pair in Encryption",
    "Description": "Nonces should be used for the present occasion and only once.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 324,
    "Title": "CWE-324: Use of a Key Past its Expiration Date",
    "Name": "Use of a Key Past its Expiration Date",
    "Description": "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.",
    "ExtendedDescription": "While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.",
    "Status": "Draft"
  },
  {
    "ID": 325,
    "Title": "CWE-325: Missing Cryptographic Step",
    "Name": "Missing Cryptographic Step",
    "Description": "The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 326,
    "Title": "CWE-326: Inadequate Encryption Strength",
    "Name": "Inadequate Encryption Strength",
    "Description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",
    "ExtendedDescription": "A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.",
    "Status": "Draft"
  },
  {
    "ID": 327,
    "Title": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
    "Name": "Use of a Broken or Risky Cryptographic Algorithm",
    "Description": "The product uses a broken or risky cryptographic algorithm or protocol.",
    "ExtendedDescription": "\n\nCryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.\n\n\nIt is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.\n\n\nSince the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.\n\n\nFor a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.\n",
    "Status": "Draft"
  },
  {
    "ID": 328,
    "Title": "CWE-328: Use of Weak Hash",
    "Name": "Use of Weak Hash",
    "Description": "The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
    "ExtendedDescription": "\n\nA hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:\n\n\n  1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")\n\n  1. The algorithm is deterministic; the same input produces the same digest every time\n\n Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:\n\n  1. the original input (preimage attack), given only the digest\n\n  1. another input that can produce the same digest (2nd preimage attack), given the original input\n\n  1. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times\n\nWhat is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.\n\nAny algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.\n\n\nIn addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\n",
    "Status": "Draft"
  },
  {
    "ID": 329,
    "Title": "CWE-329: Generation of Predictable IV with CBC Mode",
    "Name": "Generation of Predictable IV with CBC Mode",
    "Description": "The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.",
    "ExtendedDescription": "\n\nCBC mode eliminates a weakness of Electronic Code Book (ECB) mode by allowing identical plaintext blocks to be encrypted to different ciphertext blocks. This is possible by the XOR-ing of an IV with the initial plaintext block so that every plaintext block in the chain is XOR'd with a different value before encryption. If IVs are reused, then identical plaintexts would be encrypted to identical ciphertexts. However, even if IVs are not identical but are predictable, then they still break the security of CBC mode against Chosen Plaintext Attacks (CPA).\n",
    "Status": "Draft"
  },
  {
    "ID": 330,
    "Title": "CWE-330: Use of Insufficiently Random Values",
    "Name": "Use of Insufficiently Random Values",
    "Description": "The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.",
    "ExtendedDescription": "When product generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.",
    "Status": "Stable"
  },
  {
    "ID": 331,
    "Title": "CWE-331: Insufficient Entropy",
    "Name": "Insufficient Entropy",
    "Description": "The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 332,
    "Title": "CWE-332: Insufficient Entropy in PRNG",
    "Name": "Insufficient Entropy in PRNG",
    "Description": "The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 333,
    "Title": "CWE-333: Improper Handling of Insufficient Entropy in TRNG",
    "Name": "Improper Handling of Insufficient Entropy in TRNG",
    "Description": "True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.",
    "ExtendedDescription": "The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.",
    "Status": "Draft"
  },
  {
    "ID": 334,
    "Title": "CWE-334: Small Space of Random Values",
    "Name": "Small Space of Random Values",
    "Description": "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 335,
    "Title": "CWE-335: Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
    "Name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
    "Description": "The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.",
    "ExtendedDescription": "\n\n PRNGs are deterministic and, while their output appears random, they cannot actually create entropy. They rely on cryptographically secure and unique seeds for entropy so proper seeding is critical to the secure operation of the PRNG.\n\n\n Management of seeds could be broken down into two main areas: \n\n\n  -  (1) protecting seeds as cryptographic material (such as a cryptographic key); \n\n  -  (2) whenever possible, using a uniquely generated seed from a cryptographically secure source \n\n PRNGs require a seed as input to generate a stream of numbers that are functionally indistinguishable from random numbers. While the output is, in many cases, sufficient for cryptographic uses, the output of any PRNG is directly determined by the seed provided as input. If the seed can be ascertained by a third party, the entire output of the PRNG can be made known to them. As such, the seed should be kept secret and should ideally not be able to be guessed. For example, the current time may be a poor seed. Knowing the approximate time the PRNG was seeded greatly reduces the possible key space. \n\n Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered. \n",
    "Status": "Draft"
  },
  {
    "ID": 336,
    "Title": "CWE-336: Same Seed in Pseudo-Random Number Generator (PRNG)",
    "Name": "Same Seed in Pseudo-Random Number Generator (PRNG)",
    "Description": "A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.",
    "ExtendedDescription": "Given the deterministic nature of PRNGs, using the same seed for each initialization will lead to the same output in the same order. If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.",
    "Status": "Draft"
  },
  {
    "ID": 337,
    "Title": "CWE-337: Predictable Seed in Pseudo-Random Number Generator (PRNG)",
    "Name": "Predictable Seed in Pseudo-Random Number Generator (PRNG)",
    "Description": "A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.",
    "ExtendedDescription": "The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.",
    "Status": "Draft"
  },
  {
    "ID": 338,
    "Title": "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
    "Name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
    "Description": "The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.",
    "ExtendedDescription": "\n\nWhen a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.\n\n\nOften a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.\n",
    "Status": "Draft"
  },
  {
    "ID": 339,
    "Title": "CWE-339: Small Seed Space in PRNG",
    "Name": "Small Seed Space in PRNG",
    "Description": "A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.",
    "ExtendedDescription": "PRNGs are entirely deterministic once seeded, so it should be extremely difficult to guess the seed. If an attacker can collect the outputs of a PRNG and then brute force the seed by trying every possibility to see which seed matches the observed output, then the attacker will know the output of any subsequent calls to the PRNG. A small seed space implies that the attacker will have far fewer possible values to try to exhaust all possibilities.",
    "Status": "Draft"
  },
  {
    "ID": 340,
    "Title": "CWE-340: Generation of Predictable Numbers or Identifiers",
    "Name": "Generation of Predictable Numbers or Identifiers",
    "Description": "The product uses a scheme that generates numbers or identifiers that are more predictable than required.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 341,
    "Title": "CWE-341: Predictable from Observable State",
    "Name": "Predictable from Observable State",
    "Description": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 342,
    "Title": "CWE-342: Predictable Exact Value from Previous Values",
    "Name": "Predictable Exact Value from Previous Values",
    "Description": "An exact value or random number can be precisely predicted by observing previous values.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 343,
    "Title": "CWE-343: Predictable Value Range from Previous Values",
    "Name": "Predictable Value Range from Previous Values",
    "Description": "The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.",
    "ExtendedDescription": "The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.",
    "Status": "Draft"
  },
  {
    "ID": 344,
    "Title": "CWE-344: Use of Invariant Value in Dynamically Changing Context",
    "Name": "Use of Invariant Value in Dynamically Changing Context",
    "Description": "The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 345,
    "Title": "CWE-345: Insufficient Verification of Data Authenticity",
    "Name": "Insufficient Verification of Data Authenticity",
    "Description": "The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 346,
    "Title": "CWE-346: Origin Validation Error",
    "Name": "Origin Validation Error",
    "Description": "The product does not properly verify that the source of data or communication is valid.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 347,
    "Title": "CWE-347: Improper Verification of Cryptographic Signature",
    "Name": "Improper Verification of Cryptographic Signature",
    "Description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 348,
    "Title": "CWE-348: Use of Less Trusted Source",
    "Name": "Use of Less Trusted Source",
    "Description": "The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 349,
    "Title": "CWE-349: Acceptance of Extraneous Untrusted Data With Trusted Data",
    "Name": "Acceptance of Extraneous Untrusted Data With Trusted Data",
    "Description": "The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 350,
    "Title": "CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action",
    "Name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
    "Description": "The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",
    "ExtendedDescription": "\n\nSince DNS names can be easily spoofed or misreported, and it may be difficult for the product to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism.\n\n\nWhen the product performs a reverse DNS resolution for an IP address, if an attacker controls the DNS server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks.\n\n\nAttackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.\n",
    "Status": "Draft"
  },
  {
    "ID": 351,
    "Title": "CWE-351: Insufficient Type Distinction",
    "Name": "Insufficient Type Distinction",
    "Description": "The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 352,
    "Title": "CWE-352: Cross-Site Request Forgery (CSRF)",
    "Name": "Cross-Site Request Forgery (CSRF)",
    "Description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
    "ExtendedDescription": "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.",
    "Status": "Stable"
  },
  {
    "ID": 353,
    "Title": "CWE-353: Missing Support for Integrity Check",
    "Name": "Missing Support for Integrity Check",
    "Description": "The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.",
    "ExtendedDescription": "If integrity check values or \"checksums\" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.",
    "Status": "Draft"
  },
  {
    "ID": 354,
    "Title": "CWE-354: Improper Validation of Integrity Check Value",
    "Name": "Improper Validation of Integrity Check Value",
    "Description": "The product does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",
    "ExtendedDescription": "Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.",
    "Status": "Draft"
  },
  {
    "ID": 356,
    "Title": "CWE-356: Product UI does not Warn User of Unsafe Actions",
    "Name": "Product UI does not Warn User of Unsafe Actions",
    "Description": "The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.",
    "ExtendedDescription": "Product systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.",
    "Status": "Incomplete"
  },
  {
    "ID": 357,
    "Title": "CWE-357: Insufficient UI Warning of Dangerous Operations",
    "Name": "Insufficient UI Warning of Dangerous Operations",
    "Description": "The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 358,
    "Title": "CWE-358: Improperly Implemented Security Check for Standard",
    "Name": "Improperly Implemented Security Check for Standard",
    "Description": "The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 359,
    "Title": "CWE-359: Exposure of Private Personal Information to an Unauthorized Actor",
    "Name": "Exposure of Private Personal Information to an Unauthorized Actor",
    "Description": "The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.",
    "ExtendedDescription": "\n\nThere are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation.\n\n\nSome types of private information include:\n\n\n  - Government identifiers, such as Social Security Numbers\n\n  - Contact information, such as home addresses and telephone numbers\n\n  - Geographic location - where the user is (or was)\n\n  - Employment history\n\n  - Financial data - such as credit card numbers, salary, bank accounts, and debts\n\n  - Pictures, video, or audio\n\n  - Behavioral patterns - such as web surfing history, when certain activities are performed, etc.\n\n  - Relationships (and types of relationships) with others - family, friends, contacts, etc.\n\n  - Communications - e-mail addresses, private messages, text messages, chat logs, etc.\n\n  - Health - medical conditions, insurance status, prescription records\n\n  - Account passwords and other credentials\n\nSome of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.\n\nSometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 360,
    "Title": "CWE-360: Trust of System Event Data",
    "Name": "Trust of System Event Data",
    "Description": "Security based on event locations are insecure and can be spoofed.",
    "ExtendedDescription": "Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.",
    "Status": "Incomplete"
  },
  {
    "ID": 362,
    "Title": "CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "Name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "Description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "ExtendedDescription": "\n\nThis can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.\n\n\nA race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.\n\n\nA race condition violates these properties, which are closely related:\n\n\n  - Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.\n\n  - Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.\n\nA race condition exists when an \"interfering code sequence\" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single \"x++\" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).\n\nThe interfering code sequence could be \"trusted\" or \"untrusted.\" A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.\n",
    "Status": "Draft"
  },
  {
    "ID": 363,
    "Title": "CWE-363: Race Condition Enabling Link Following",
    "Name": "Race Condition Enabling Link Following",
    "Description": "The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.",
    "ExtendedDescription": "While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.",
    "Status": "Draft"
  },
  {
    "ID": 364,
    "Title": "CWE-364: Signal Handler Race Condition",
    "Name": "Signal Handler Race Condition",
    "Description": "The product uses a signal handler that introduces a race condition.",
    "ExtendedDescription": "\n\nRace conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution.\n\n\nThese issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the \"regular\" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.\n\n\nThere are several known behaviors related to signal handlers that have received the label of \"signal handler race condition\":\n\n\n  - Shared state (e.g. global data or static variables) that are accessible to both a signal handler and \"regular\" code\n\n  - Shared state between a signal handler and other signal handlers\n\n  - Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution.\n\n  - Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses.\n\n  - Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality\n\n  - While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses.\n\nSignal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:\n\n  - Avoiding shared state\n\n  - Using synchronization in the signal handler\n\n  - Using synchronization in the regular code\n\n  - Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 365,
    "Title": "CWE-365: DEPRECATED: Race Condition in Switch",
    "Name": "DEPRECATED: Race Condition in Switch",
    "Description": "This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.",
    "ExtendedDescription": "It is likely that this entry was initially created based on a misinterpretation of the original source material. The original source intended to explain how switches could be unpredictable when using threads, if the control expressions used data or variables that could change between execution of different threads. That weakness is already covered by CWE-367. Despite the ambiguity in the documentation for some languages and compilers, in practice, they all evaluate the switch control expression only once. If future languages state that the code explicitly evaluates the control expression more than once, then this would not be a weakness, but the language performing as designed.",
    "Status": "Deprecated"
  },
  {
    "ID": 366,
    "Title": "CWE-366: Race Condition within a Thread",
    "Name": "Race Condition within a Thread",
    "Description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 367,
    "Title": "CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition",
    "Name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
    "Description": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
    "ExtendedDescription": "This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.",
    "Status": "Incomplete"
  },
  {
    "ID": 368,
    "Title": "CWE-368: Context Switching Race Condition",
    "Name": "Context Switching Race Condition",
    "Description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.",
    "ExtendedDescription": "This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.",
    "Status": "Draft"
  },
  {
    "ID": 369,
    "Title": "CWE-369: Divide By Zero",
    "Name": "Divide By Zero",
    "Description": "The product divides a value by zero.",
    "ExtendedDescription": "This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.",
    "Status": "Draft"
  },
  {
    "ID": 370,
    "Title": "CWE-370: Missing Check for Certificate Revocation after Initial Check",
    "Name": "Missing Check for Certificate Revocation after Initial Check",
    "Description": "The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.",
    "ExtendedDescription": "If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.",
    "Status": "Draft"
  },
  {
    "ID": 372,
    "Title": "CWE-372: Incomplete Internal State Distinction",
    "Name": "Incomplete Internal State Distinction",
    "Description": "The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 373,
    "Title": "CWE-373: DEPRECATED: State Synchronization Error",
    "Name": "DEPRECATED: State Synchronization Error",
    "Description": "This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 374,
    "Title": "CWE-374: Passing Mutable Objects to an Untrusted Method",
    "Name": "Passing Mutable Objects to an Untrusted Method",
    "Description": "The product sends non-cloned mutable data as an argument to a method or function.",
    "ExtendedDescription": "The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.",
    "Status": "Draft"
  },
  {
    "ID": 375,
    "Title": "CWE-375: Returning a Mutable Object to an Untrusted Caller",
    "Name": "Returning a Mutable Object to an Untrusted Caller",
    "Description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.",
    "ExtendedDescription": "In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.",
    "Status": "Draft"
  },
  {
    "ID": 377,
    "Title": "CWE-377: Insecure Temporary File",
    "Name": "Insecure Temporary File",
    "Description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 378,
    "Title": "CWE-378: Creation of Temporary File With Insecure Permissions",
    "Name": "Creation of Temporary File With Insecure Permissions",
    "Description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 379,
    "Title": "CWE-379: Creation of Temporary File in Directory with Insecure Permissions",
    "Name": "Creation of Temporary File in Directory with Insecure Permissions",
    "Description": "The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.",
    "ExtendedDescription": "On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.",
    "Status": "Incomplete"
  },
  {
    "ID": 382,
    "Title": "CWE-382: J2EE Bad Practices: Use of System.exit()",
    "Name": "J2EE Bad Practices: Use of System.exit()",
    "Description": "A J2EE application uses System.exit(), which also shuts down its container.",
    "ExtendedDescription": "It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.",
    "Status": "Draft"
  },
  {
    "ID": 383,
    "Title": "CWE-383: J2EE Bad Practices: Direct Use of Threads",
    "Name": "J2EE Bad Practices: Direct Use of Threads",
    "Description": "Thread management in a Web application is forbidden in some circumstances and is always highly error prone.",
    "ExtendedDescription": "Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.",
    "Status": "Draft"
  },
  {
    "ID": 384,
    "Title": "CWE-384: Session Fixation",
    "Name": "Session Fixation",
    "Description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
    "ExtendedDescription": "\n\nSuch a scenario is commonly observed when:\n\n\n  - A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.\n\n  - An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.\n\n  - The application or container uses predictable session identifiers.\n\nIn the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.",
    "Status": "Incomplete"
  },
  {
    "ID": 385,
    "Title": "CWE-385: Covert Timing Channel",
    "Name": "Covert Timing Channel",
    "Description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.",
    "ExtendedDescription": "\n\nIn some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state.\n\n\nCovert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 386,
    "Title": "CWE-386: Symbolic Name not Mapping to Correct Object",
    "Name": "Symbolic Name not Mapping to Correct Object",
    "Description": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 390,
    "Title": "CWE-390: Detection of Error Condition Without Action",
    "Name": "Detection of Error Condition Without Action",
    "Description": "The product detects a specific error, but takes no actions to handle the error.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 391,
    "Title": "CWE-391: Unchecked Error Condition",
    "Name": "Unchecked Error Condition",
    "Description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 392,
    "Title": "CWE-392: Missing Report of Error Condition",
    "Name": "Missing Report of Error Condition",
    "Description": "The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 393,
    "Title": "CWE-393: Return of Wrong Status Code",
    "Name": "Return of Wrong Status Code",
    "Description": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.",
    "ExtendedDescription": "This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the product to assume that an action is safe, even when it is not.",
    "Status": "Draft"
  },
  {
    "ID": 394,
    "Title": "CWE-394: Unexpected Status Code or Return Value",
    "Name": "Unexpected Status Code or Return Value",
    "Description": "The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 395,
    "Title": "CWE-395: Use of NullPointerException Catch to Detect NULL Pointer Dereference",
    "Name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
    "Description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.",
    "ExtendedDescription": "\n\nProgrammers typically catch NullPointerException under three circumstances:\n\n\n  - The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem.\n\n  - The program explicitly throws a NullPointerException to signal an error condition.\n\n  - The code is part of a test harness that supplies unexpected input to the classes under test.\n\nOf these three circumstances, only the last is acceptable.",
    "Status": "Draft"
  },
  {
    "ID": 396,
    "Title": "CWE-396: Declaration of Catch for Generic Exception",
    "Name": "Declaration of Catch for Generic Exception",
    "Description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
    "ExtendedDescription": "Multiple catch blocks can get ugly and repetitive, but \"condensing\" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.",
    "Status": "Draft"
  },
  {
    "ID": 397,
    "Title": "CWE-397: Declaration of Throws for Generic Exception",
    "Name": "Declaration of Throws for Generic Exception",
    "Description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
    "ExtendedDescription": "Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.",
    "Status": "Draft"
  },
  {
    "ID": 400,
    "Title": "CWE-400: Uncontrolled Resource Consumption",
    "Name": "Uncontrolled Resource Consumption",
    "Description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "ExtendedDescription": "\n\nLimited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.\n\n\nThere are at least three distinct scenarios which can commonly lead to resource exhaustion:\n\n\n  - Lack of throttling for the number of allocated resources\n\n  - Losing all references to a resource before reaching the shutdown stage\n\n  - Not closing/returning a resource after processing\n\nResource exhaustion problems are often result due to an incorrect implementation of the following situations:\n\n  - Error conditions and other exceptional circumstances.\n\n  - Confusion over which part of the program is responsible for releasing the resource.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 401,
    "Title": "CWE-401: Missing Release of Memory after Effective Lifetime",
    "Name": "Missing Release of Memory after Effective Lifetime",
    "Description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
    "ExtendedDescription": "This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.",
    "Status": "Draft"
  },
  {
    "ID": 402,
    "Title": "CWE-402: Transmission of Private Resources into a New Sphere ('Resource Leak')",
    "Name": "Transmission of Private Resources into a New Sphere ('Resource Leak')",
    "Description": "The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 403,
    "Title": "CWE-403: Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
    "Name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
    "Description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.",
    "ExtendedDescription": "When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.",
    "Status": "Draft"
  },
  {
    "ID": 404,
    "Title": "CWE-404: Improper Resource Shutdown or Release",
    "Name": "Improper Resource Shutdown or Release",
    "Description": "The product does not release or incorrectly releases a resource before it is made available for re-use.",
    "ExtendedDescription": "When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.",
    "Status": "Draft"
  },
  {
    "ID": 405,
    "Title": "CWE-405: Asymmetric Resource Consumption (Amplification)",
    "Name": "Asymmetric Resource Consumption (Amplification)",
    "Description": "The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is \"asymmetric.\"",
    "ExtendedDescription": "This can lead to poor performance due to \"amplification\" of resource consumption, typically in a non-linear fashion. This situation is worsened if the product allows malicious users or attackers to consume more resources than their access level permits.",
    "Status": "Incomplete"
  },
  {
    "ID": 406,
    "Title": "CWE-406: Insufficient Control of Network Message Volume (Network Amplification)",
    "Name": "Insufficient Control of Network Message Volume (Network Amplification)",
    "Description": "The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.",
    "ExtendedDescription": "In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.",
    "Status": "Incomplete"
  },
  {
    "ID": 407,
    "Title": "CWE-407: Inefficient Algorithmic Complexity",
    "Name": "Inefficient Algorithmic Complexity",
    "Description": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 408,
    "Title": "CWE-408: Incorrect Behavior Order: Early Amplification",
    "Name": "Incorrect Behavior Order: Early Amplification",
    "Description": "The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 409,
    "Title": "CWE-409: Improper Handling of Highly Compressed Data (Data Amplification)",
    "Name": "Improper Handling of Highly Compressed Data (Data Amplification)",
    "Description": "The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.",
    "ExtendedDescription": "An example of data amplification is a \"decompression bomb,\" a small ZIP file that can produce a large amount of data when it is decompressed.",
    "Status": "Incomplete"
  },
  {
    "ID": 410,
    "Title": "CWE-410: Insufficient Resource Pool",
    "Name": "Insufficient Resource Pool",
    "Description": "The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",
    "ExtendedDescription": "Frequently the consequence is a \"flood\" of connection or sessions.",
    "Status": "Incomplete"
  },
  {
    "ID": 412,
    "Title": "CWE-412: Unrestricted Externally Accessible Lock",
    "Name": "Unrestricted Externally Accessible Lock",
    "Description": "The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.",
    "ExtendedDescription": "This prevents the product from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.",
    "Status": "Incomplete"
  },
  {
    "ID": 413,
    "Title": "CWE-413: Improper Resource Locking",
    "Name": "Improper Resource Locking",
    "Description": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
    "ExtendedDescription": "When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.",
    "Status": "Draft"
  },
  {
    "ID": 414,
    "Title": "CWE-414: Missing Lock Check",
    "Name": "Missing Lock Check",
    "Description": "A product does not check to see if a lock is present before performing sensitive operations on a resource.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 415,
    "Title": "CWE-415: Double Free",
    "Name": "Double Free",
    "Description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
    "ExtendedDescription": "When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.",
    "Status": "Draft"
  },
  {
    "ID": 416,
    "Title": "CWE-416: Use After Free",
    "Name": "Use After Free",
    "Description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "ExtendedDescription": null,
    "Status": "Stable"
  },
  {
    "ID": 419,
    "Title": "CWE-419: Unprotected Primary Channel",
    "Name": "Unprotected Primary Channel",
    "Description": "The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 420,
    "Title": "CWE-420: Unprotected Alternate Channel",
    "Name": "Unprotected Alternate Channel",
    "Description": "The product protects a primary channel, but it does not use the same level of protection for an alternate channel.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 421,
    "Title": "CWE-421: Race Condition During Access to Alternate Channel",
    "Name": "Race Condition During Access to Alternate Channel",
    "Description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",
    "ExtendedDescription": "This creates a race condition that allows an attacker to access the channel before the authorized user does.",
    "Status": "Draft"
  },
  {
    "ID": 422,
    "Title": "CWE-422: Unprotected Windows Messaging Channel ('Shatter')",
    "Name": "Unprotected Windows Messaging Channel ('Shatter')",
    "Description": "The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 423,
    "Title": "CWE-423: DEPRECATED: Proxied Trusted Channel",
    "Name": "DEPRECATED: Proxied Trusted Channel",
    "Description": "This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 424,
    "Title": "CWE-424: Improper Protection of Alternate Path",
    "Name": "Improper Protection of Alternate Path",
    "Description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 425,
    "Title": "CWE-425: Direct Request ('Forced Browsing')",
    "Name": "Direct Request ('Forced Browsing')",
    "Description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
    "ExtendedDescription": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",
    "Status": "Incomplete"
  },
  {
    "ID": 426,
    "Title": "CWE-426: Untrusted Search Path",
    "Name": "Untrusted Search Path",
    "Description": "The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.",
    "ExtendedDescription": "\n\nThis might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the product uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted product would then execute. The problem extends to any type of critical resource that the product trusts.\n\n\nSome of the most common variants of untrusted search path are:\n\n\n  - In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.\n\n  - In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.\n\n",
    "Status": "Stable"
  },
  {
    "ID": 427,
    "Title": "CWE-427: Uncontrolled Search Path Element",
    "Name": "Uncontrolled Search Path Element",
    "Description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",
    "ExtendedDescription": "\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n",
    "Status": "Draft"
  },
  {
    "ID": 428,
    "Title": "CWE-428: Unquoted Search Path or Element",
    "Name": "Unquoted Search Path or Element",
    "Description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.",
    "ExtendedDescription": "If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as \"C:\\Program.exe\" to be run by a privileged program making use of WinExec.",
    "Status": "Draft"
  },
  {
    "ID": 430,
    "Title": "CWE-430: Deployment of Wrong Handler",
    "Name": "Deployment of Wrong Handler",
    "Description": "The wrong \"handler\" is assigned to process an object.",
    "ExtendedDescription": "An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically \"determining\" type of the object even if it is contradictory to an explicitly specified type.",
    "Status": "Incomplete"
  },
  {
    "ID": 431,
    "Title": "CWE-431: Missing Handler",
    "Name": "Missing Handler",
    "Description": "A handler is not available or implemented.",
    "ExtendedDescription": "When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.",
    "Status": "Draft"
  },
  {
    "ID": 432,
    "Title": "CWE-432: Dangerous Signal Handler not Disabled During Sensitive Operations",
    "Name": "Dangerous Signal Handler not Disabled During Sensitive Operations",
    "Description": "The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",
    "ExtendedDescription": "During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",
    "Status": "Draft"
  },
  {
    "ID": 433,
    "Title": "CWE-433: Unparsed Raw Web Content Delivery",
    "Name": "Unparsed Raw Web Content Delivery",
    "Description": "The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.",
    "ExtendedDescription": "If code is stored in a file with an extension such as \".inc\" or \".pl\", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.",
    "Status": "Incomplete"
  },
  {
    "ID": 434,
    "Title": "CWE-434: Unrestricted Upload of File with Dangerous Type",
    "Name": "Unrestricted Upload of File with Dangerous Type",
    "Description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 435,
    "Title": "CWE-435: Improper Interaction Between Multiple Correctly-Behaving Entities",
    "Name": "Improper Interaction Between Multiple Correctly-Behaving Entities",
    "Description": "An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.",
    "ExtendedDescription": "When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level. However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.",
    "Status": "Draft"
  },
  {
    "ID": 436,
    "Title": "CWE-436: Interpretation Conflict",
    "Name": "Interpretation Conflict",
    "Description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "ExtendedDescription": "This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.",
    "Status": "Incomplete"
  },
  {
    "ID": 437,
    "Title": "CWE-437: Incomplete Model of Endpoint Features",
    "Name": "Incomplete Model of Endpoint Features",
    "Description": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 439,
    "Title": "CWE-439: Behavioral Change in New Version or Environment",
    "Name": "Behavioral Change in New Version or Environment",
    "Description": "A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 440,
    "Title": "CWE-440: Expected Behavior Violation",
    "Name": "Expected Behavior Violation",
    "Description": "A feature, API, or function does not perform according to its specification.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 441,
    "Title": "CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')",
    "Name": "Unintended Proxy or Intermediary ('Confused Deputy')",
    "Description": "The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.",
    "ExtendedDescription": "\n\nIf an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.\n\n\nSince proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:\n\n\n  - The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;\n\n  - The attacker is prevented from making the request directly to the target; and\n\n  - The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 443,
    "Title": "CWE-443: DEPRECATED: HTTP response splitting",
    "Name": "DEPRECATED: HTTP response splitting",
    "Description": "This weakness can be found at CWE-113.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 444,
    "Title": "CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "Name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "Description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "ExtendedDescription": "\n\nHTTP requests or responses (\"messages\") can be malformed or unexpected in ways that cause web servers or clients to interpret the messages in different ways than intermediary HTTP agents such as load balancers, reverse proxies, web caching proxies, application firewalls, etc. For example, an adversary may be able to add duplicate or different header fields that a client or server might interpret as one set of messages, whereas the intermediary might interpret the same sequence of bytes as a different set of messages. For example, discrepancies can arise in how to handle duplicate headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious HTTP message will have different headers for TE and CL.\n\n\nThe inconsistent parsing and interpretation of messages can allow the adversary to \"smuggle\" a message to the client/server without the intermediary being aware of it.\n\n\nThis weakness is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 446,
    "Title": "CWE-446: UI Discrepancy for Security Feature",
    "Name": "UI Discrepancy for Security Feature",
    "Description": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.",
    "ExtendedDescription": "When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the product does not actually enable the encryption. Alternately, the user might provide a \"restrict ALL\" access control rule, but the product only implements \"restrict SOME\".",
    "Status": "Incomplete"
  },
  {
    "ID": 447,
    "Title": "CWE-447: Unimplemented or Unsupported Feature in UI",
    "Name": "Unimplemented or Unsupported Feature in UI",
    "Description": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 448,
    "Title": "CWE-448: Obsolete Feature in UI",
    "Name": "Obsolete Feature in UI",
    "Description": "A UI function is obsolete and the product does not warn the user.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 449,
    "Title": "CWE-449: The UI Performs the Wrong Action",
    "Name": "The UI Performs the Wrong Action",
    "Description": "The UI performs the wrong action with respect to the user's request.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 450,
    "Title": "CWE-450: Multiple Interpretations of UI Input",
    "Name": "Multiple Interpretations of UI Input",
    "Description": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 451,
    "Title": "CWE-451: User Interface (UI) Misrepresentation of Critical Information",
    "Name": "User Interface (UI) Misrepresentation of Critical Information",
    "Description": "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.",
    "ExtendedDescription": "\n\nIf an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.\n\n\nUI misrepresentation can take many forms:\n\n\n  - Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes.\n\n  - Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay.\n\n  - Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF)\n\n  - Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error.\n\n  - Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. \"filename.txt .exe\"). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string.\n\n  - Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display.\n\n  - Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 453,
    "Title": "CWE-453: Insecure Default Variable Initialization",
    "Name": "Insecure Default Variable Initialization",
    "Description": "The product, by default, initializes an internal variable with an insecure or less secure value than is possible.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 454,
    "Title": "CWE-454: External Initialization of Trusted Variables or Data Stores",
    "Name": "External Initialization of Trusted Variables or Data Stores",
    "Description": "The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.",
    "ExtendedDescription": "A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.",
    "Status": "Draft"
  },
  {
    "ID": 455,
    "Title": "CWE-455: Non-exit on Failed Initialization",
    "Name": "Non-exit on Failed Initialization",
    "Description": "The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 456,
    "Title": "CWE-456: Missing Initialization of a Variable",
    "Name": "Missing Initialization of a Variable",
    "Description": "The product does not initialize critical variables, which causes the execution environment to use unexpected values.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 457,
    "Title": "CWE-457: Use of Uninitialized Variable",
    "Name": "Use of Uninitialized Variable",
    "Description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",
    "ExtendedDescription": "In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.",
    "Status": "Draft"
  },
  {
    "ID": 458,
    "Title": "CWE-458: DEPRECATED: Incorrect Initialization",
    "Name": "DEPRECATED: Incorrect Initialization",
    "Description": "This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 459,
    "Title": "CWE-459: Incomplete Cleanup",
    "Name": "Incomplete Cleanup",
    "Description": "The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 460,
    "Title": "CWE-460: Improper Cleanup on Thrown Exception",
    "Name": "Improper Cleanup on Thrown Exception",
    "Description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",
    "ExtendedDescription": "Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.",
    "Status": "Draft"
  },
  {
    "ID": 462,
    "Title": "CWE-462: Duplicate Key in Associative List (Alist)",
    "Name": "Duplicate Key in Associative List (Alist)",
    "Description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.",
    "ExtendedDescription": "A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.",
    "Status": "Incomplete"
  },
  {
    "ID": 463,
    "Title": "CWE-463: Deletion of Data Structure Sentinel",
    "Name": "Deletion of Data Structure Sentinel",
    "Description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems.",
    "ExtendedDescription": "Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.",
    "Status": "Incomplete"
  },
  {
    "ID": 464,
    "Title": "CWE-464: Addition of Data Structure Sentinel",
    "Name": "Addition of Data Structure Sentinel",
    "Description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems.",
    "ExtendedDescription": "Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",
    "Status": "Incomplete"
  },
  {
    "ID": 466,
    "Title": "CWE-466: Return of Pointer Value Outside of Expected Range",
    "Name": "Return of Pointer Value Outside of Expected Range",
    "Description": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 467,
    "Title": "CWE-467: Use of sizeof() on a Pointer Type",
    "Name": "Use of sizeof() on a Pointer Type",
    "Description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",
    "ExtendedDescription": "The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.",
    "Status": "Draft"
  },
  {
    "ID": 468,
    "Title": "CWE-468: Incorrect Pointer Scaling",
    "Name": "Incorrect Pointer Scaling",
    "Description": "In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 469,
    "Title": "CWE-469: Use of Pointer Subtraction to Determine Size",
    "Name": "Use of Pointer Subtraction to Determine Size",
    "Description": "The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 470,
    "Title": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
    "Name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
    "Description": "The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",
    "ExtendedDescription": "If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.",
    "Status": "Draft"
  },
  {
    "ID": 471,
    "Title": "CWE-471: Modification of Assumed-Immutable Data (MAID)",
    "Name": "Modification of Assumed-Immutable Data (MAID)",
    "Description": "The product does not properly protect an assumed-immutable element from being modified by an attacker.",
    "ExtendedDescription": "This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.",
    "Status": "Draft"
  },
  {
    "ID": 472,
    "Title": "CWE-472: External Control of Assumed-Immutable Web Parameter",
    "Name": "External Control of Assumed-Immutable Web Parameter",
    "Description": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
    "ExtendedDescription": "\n\nIf a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.\n\n\nFor example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.\n",
    "Status": "Draft"
  },
  {
    "ID": 473,
    "Title": "CWE-473: PHP External Variable Modification",
    "Name": "PHP External Variable Modification",
    "Description": "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 474,
    "Title": "CWE-474: Use of Function with Inconsistent Implementations",
    "Name": "Use of Function with Inconsistent Implementations",
    "Description": "The code uses a function that has inconsistent implementations across operating systems and versions.",
    "ExtendedDescription": "\n\nThe use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases.\n\n\nThe implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include:\n\n\n  - Slight differences in the way parameters are interpreted leading to inconsistent results.\n\n  - Some implementations of the function carry significant security risks.\n\n  - The function might not be defined on all platforms.\n\n  - The function might change which return codes it can provide, or change the meaning of its return codes.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 475,
    "Title": "CWE-475: Undefined Behavior for Input to API",
    "Name": "Undefined Behavior for Input to API",
    "Description": "The behavior of this function is undefined unless its control parameter is set to a specific value.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 476,
    "Title": "CWE-476: NULL Pointer Dereference",
    "Name": "NULL Pointer Dereference",
    "Description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "ExtendedDescription": null,
    "Status": "Stable"
  },
  {
    "ID": 477,
    "Title": "CWE-477: Use of Obsolete Function",
    "Name": "Use of Obsolete Function",
    "Description": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",
    "ExtendedDescription": "\n\nAs programming languages evolve, functions occasionally become obsolete due to:\n\n\n  - Advances in the language\n\n  - Improved understanding of how operations should be performed effectively and securely\n\n  - Changes in the conventions that govern certain operations\n\nFunctions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.",
    "Status": "Draft"
  },
  {
    "ID": 478,
    "Title": "CWE-478: Missing Default Case in Multiple Condition Expression",
    "Name": "Missing Default Case in Multiple Condition Expression",
    "Description": "The code does not have a default case in an expression with multiple conditions, such as a switch statement.",
    "ExtendedDescription": "If a multiple-condition expression (such as a switch in C) omits the default case but does not consider or handle all possible values that could occur, then this might lead to complex logical errors and resultant weaknesses. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.",
    "Status": "Draft"
  },
  {
    "ID": 479,
    "Title": "CWE-479: Signal Handler Use of a Non-reentrant Function",
    "Name": "Signal Handler Use of a Non-reentrant Function",
    "Description": "The product defines a signal handler that calls a non-reentrant function.",
    "ExtendedDescription": "\n\nNon-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution.\n\n\nMany functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as \"scratch space.\" If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.\n",
    "Status": "Draft"
  },
  {
    "ID": 480,
    "Title": "CWE-480: Use of Incorrect Operator",
    "Name": "Use of Incorrect Operator",
    "Description": "The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.",
    "ExtendedDescription": "These types of errors are generally the result of a typo by the programmer.",
    "Status": "Draft"
  },
  {
    "ID": 481,
    "Title": "CWE-481: Assigning instead of Comparing",
    "Name": "Assigning instead of Comparing",
    "Description": "The code uses an operator for assignment when the intention was to perform a comparison.",
    "ExtendedDescription": "In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.",
    "Status": "Draft"
  },
  {
    "ID": 482,
    "Title": "CWE-482: Comparing instead of Assigning",
    "Name": "Comparing instead of Assigning",
    "Description": "The code uses an operator for comparison when the intention was to perform an assignment.",
    "ExtendedDescription": "In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.",
    "Status": "Draft"
  },
  {
    "ID": 483,
    "Title": "CWE-483: Incorrect Block Delimitation",
    "Name": "Incorrect Block Delimitation",
    "Description": "The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",
    "ExtendedDescription": "In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.",
    "Status": "Draft"
  },
  {
    "ID": 484,
    "Title": "CWE-484: Omitted Break Statement in Switch",
    "Name": "Omitted Break Statement in Switch",
    "Description": "The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",
    "ExtendedDescription": "This can lead to critical code executing in situations where it should not.",
    "Status": "Draft"
  },
  {
    "ID": 486,
    "Title": "CWE-486: Comparison of Classes by Name",
    "Name": "Comparison of Classes by Name",
    "Description": "The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.",
    "ExtendedDescription": "If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.",
    "Status": "Draft"
  },
  {
    "ID": 487,
    "Title": "CWE-487: Reliance on Package-level Scope",
    "Name": "Reliance on Package-level Scope",
    "Description": "Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.",
    "ExtendedDescription": "The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.",
    "Status": "Incomplete"
  },
  {
    "ID": 488,
    "Title": "CWE-488: Exposure of Data Element to Wrong Session",
    "Name": "Exposure of Data Element to Wrong Session",
    "Description": "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",
    "ExtendedDescription": "\n\nData can \"bleed\" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.\n\n\nIn the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.\n",
    "Status": "Draft"
  },
  {
    "ID": 489,
    "Title": "CWE-489: Active Debug Code",
    "Name": "Active Debug Code",
    "Description": "The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.",
    "ExtendedDescription": "A common development practice is to add \"back door\" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.",
    "Status": "Draft"
  },
  {
    "ID": 491,
    "Title": "CWE-491: Public cloneable() Method Without Final ('Object Hijack')",
    "Name": "Public cloneable() Method Without Final ('Object Hijack')",
    "Description": "A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 492,
    "Title": "CWE-492: Use of Inner Class Containing Sensitive Data",
    "Name": "Use of Inner Class Containing Sensitive Data",
    "Description": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.",
    "ExtendedDescription": "Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.",
    "Status": "Draft"
  },
  {
    "ID": 493,
    "Title": "CWE-493: Critical Public Variable Without Final Modifier",
    "Name": "Critical Public Variable Without Final Modifier",
    "Description": "The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.",
    "ExtendedDescription": "If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.",
    "Status": "Draft"
  },
  {
    "ID": 494,
    "Title": "CWE-494: Download of Code Without Integrity Check",
    "Name": "Download of Code Without Integrity Check",
    "Description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.",
    "ExtendedDescription": "An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.",
    "Status": "Draft"
  },
  {
    "ID": 495,
    "Title": "CWE-495: Private Data Structure Returned From A Public Method",
    "Name": "Private Data Structure Returned From A Public Method",
    "Description": "The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 496,
    "Title": "CWE-496: Public Data Assigned to Private Array-Typed Field",
    "Name": "Public Data Assigned to Private Array-Typed Field",
    "Description": "Assigning public data to a private array is equivalent to giving public access to the array.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 497,
    "Title": "CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere",
    "Name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere",
    "Description": "The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.",
    "ExtendedDescription": "\n\nNetwork-based products, such as web applications, often run on top of an operating system or similar environment. When the product communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan.\n\n\nAn information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 498,
    "Title": "CWE-498: Cloneable Class Containing Sensitive Information",
    "Name": "Cloneable Class Containing Sensitive Information",
    "Description": "The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.",
    "ExtendedDescription": "Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.",
    "Status": "Draft"
  },
  {
    "ID": 499,
    "Title": "CWE-499: Serializable Class Containing Sensitive Data",
    "Name": "Serializable Class Containing Sensitive Data",
    "Description": "The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.",
    "ExtendedDescription": "Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.",
    "Status": "Draft"
  },
  {
    "ID": 500,
    "Title": "CWE-500: Public Static Field Not Marked Final",
    "Name": "Public Static Field Not Marked Final",
    "Description": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",
    "ExtendedDescription": "Public static variables can be read without an accessor and changed without a mutator by any classes in the application.",
    "Status": "Draft"
  },
  {
    "ID": 501,
    "Title": "CWE-501: Trust Boundary Violation",
    "Name": "Trust Boundary Violation",
    "Description": "The product mixes trusted and untrusted data in the same data structure or structured message.",
    "ExtendedDescription": "A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.",
    "Status": "Draft"
  },
  {
    "ID": 502,
    "Title": "CWE-502: Deserialization of Untrusted Data",
    "Name": "Deserialization of Untrusted Data",
    "Description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
    "ExtendedDescription": "\n\nIt is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.\n\n\nData that is untrusted can not be trusted to be well-formed.\n\n\nWhen developers place no restrictions on \"gadget chains,\" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.\n",
    "Status": "Draft"
  },
  {
    "ID": 506,
    "Title": "CWE-506: Embedded Malicious Code",
    "Name": "Embedded Malicious Code",
    "Description": "The product contains code that appears to be malicious in nature.",
    "ExtendedDescription": "Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of a product or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.",
    "Status": "Incomplete"
  },
  {
    "ID": 507,
    "Title": "CWE-507: Trojan Horse",
    "Name": "Trojan Horse",
    "Description": "The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 508,
    "Title": "CWE-508: Non-Replicating Malicious Code",
    "Name": "Non-Replicating Malicious Code",
    "Description": "Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 509,
    "Title": "CWE-509: Replicating Malicious Code (Virus or Worm)",
    "Name": "Replicating Malicious Code (Virus or Worm)",
    "Description": "Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 510,
    "Title": "CWE-510: Trapdoor",
    "Name": "Trapdoor",
    "Description": "A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 511,
    "Title": "CWE-511: Logic/Time Bomb",
    "Name": "Logic/Time Bomb",
    "Description": "The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.",
    "ExtendedDescription": "When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.",
    "Status": "Incomplete"
  },
  {
    "ID": 512,
    "Title": "CWE-512: Spyware",
    "Name": "Spyware",
    "Description": "The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.",
    "ExtendedDescription": "\"Spyware\" is a commonly used term with many definitions and interpretations. In general, it is meant to refer to products that collect information or install functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.",
    "Status": "Incomplete"
  },
  {
    "ID": 514,
    "Title": "CWE-514: Covert Channel",
    "Name": "Covert Channel",
    "Description": "A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.",
    "ExtendedDescription": "Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.",
    "Status": "Incomplete"
  },
  {
    "ID": 515,
    "Title": "CWE-515: Covert Storage Channel",
    "Name": "Covert Storage Channel",
    "Description": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.",
    "ExtendedDescription": "Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.",
    "Status": "Incomplete"
  },
  {
    "ID": 516,
    "Title": "CWE-516: DEPRECATED: Covert Timing Channel",
    "Name": "DEPRECATED: Covert Timing Channel",
    "Description": "This weakness can be found at CWE-385.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 520,
    "Title": "CWE-520: .NET Misconfiguration: Use of Impersonation",
    "Name": ".NET Misconfiguration: Use of Impersonation",
    "Description": "Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.",
    "ExtendedDescription": ".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.",
    "Status": "Incomplete"
  },
  {
    "ID": 521,
    "Title": "CWE-521: Weak Password Requirements",
    "Name": "Weak Password Requirements",
    "Description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",
    "ExtendedDescription": "Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.",
    "Status": "Draft"
  },
  {
    "ID": 522,
    "Title": "CWE-522: Insufficiently Protected Credentials",
    "Name": "Insufficiently Protected Credentials",
    "Description": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 523,
    "Title": "CWE-523: Unprotected Transport of Credentials",
    "Name": "Unprotected Transport of Credentials",
    "Description": "Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 524,
    "Title": "CWE-524: Use of Cache Containing Sensitive Information",
    "Name": "Use of Cache Containing Sensitive Information",
    "Description": "The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",
    "ExtendedDescription": "Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information.",
    "Status": "Incomplete"
  },
  {
    "ID": 525,
    "Title": "CWE-525: Use of Web Browser Cache Containing Sensitive Information",
    "Name": "Use of Web Browser Cache Containing Sensitive Information",
    "Description": "The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 526,
    "Title": "CWE-526: Cleartext Storage of Sensitive Information in an Environment Variable",
    "Name": "Cleartext Storage of Sensitive Information in an Environment Variable",
    "Description": "The product uses an environment variable to store unencrypted sensitive information.",
    "ExtendedDescription": "Information stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.",
    "Status": "Incomplete"
  },
  {
    "ID": 527,
    "Title": "CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere",
    "Name": "Exposure of Version-Control Repository to an Unauthorized Control Sphere",
    "Description": "The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
    "ExtendedDescription": "Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed \"diff\" data about how files have been changed - which could reveal source code snippets that were never intended to be made public.",
    "Status": "Incomplete"
  },
  {
    "ID": 528,
    "Title": "CWE-528: Exposure of Core Dump File to an Unauthorized Control Sphere",
    "Name": "Exposure of Core Dump File to an Unauthorized Control Sphere",
    "Description": "The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 529,
    "Title": "CWE-529: Exposure of Access Control List Files to an Unauthorized Control Sphere",
    "Name": "Exposure of Access Control List Files to an Unauthorized Control Sphere",
    "Description": "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.",
    "ExtendedDescription": "Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.",
    "Status": "Incomplete"
  },
  {
    "ID": 530,
    "Title": "CWE-530: Exposure of Backup File to an Unauthorized Control Sphere",
    "Name": "Exposure of Backup File to an Unauthorized Control Sphere",
    "Description": "A backup file is stored in a directory or archive that is made accessible to unauthorized actors.",
    "ExtendedDescription": "Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.",
    "Status": "Incomplete"
  },
  {
    "ID": 531,
    "Title": "CWE-531: Inclusion of Sensitive Information in Test Code",
    "Name": "Inclusion of Sensitive Information in Test Code",
    "Description": "Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 532,
    "Title": "CWE-532: Insertion of Sensitive Information into Log File",
    "Name": "Insertion of Sensitive Information into Log File",
    "Description": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.",
    "ExtendedDescription": "\n\nWhile logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.\n\n\nDifferent log files may be produced and stored for:\n\n\n  - Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.\n\n  - log files that are used for debugging\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 533,
    "Title": "CWE-533: DEPRECATED: Information Exposure Through Server Log Files",
    "Name": "DEPRECATED: Information Exposure Through Server Log Files",
    "Description": "This entry has been deprecated because its abstraction was too low-level.  See CWE-532.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 534,
    "Title": "CWE-534: DEPRECATED: Information Exposure Through Debug Log Files",
    "Name": "DEPRECATED: Information Exposure Through Debug Log Files",
    "Description": "This entry has been deprecated because its abstraction was too low-level.  See CWE-532.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 535,
    "Title": "CWE-535: Exposure of Information Through Shell Error Message",
    "Name": "Exposure of Information Through Shell Error Message",
    "Description": "A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 536,
    "Title": "CWE-536: Servlet Runtime Error Message Containing Sensitive Information",
    "Name": "Servlet Runtime Error Message Containing Sensitive Information",
    "Description": "A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 537,
    "Title": "CWE-537: Java Runtime Error Message Containing Sensitive Information",
    "Name": "Java Runtime Error Message Containing Sensitive Information",
    "Description": "In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 538,
    "Title": "CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory",
    "Name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
    "Description": "The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 539,
    "Title": "CWE-539: Use of Persistent Cookies Containing Sensitive Information",
    "Name": "Use of Persistent Cookies Containing Sensitive Information",
    "Description": "The web application uses persistent cookies, but the cookies contain sensitive information.",
    "ExtendedDescription": "Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.",
    "Status": "Incomplete"
  },
  {
    "ID": 540,
    "Title": "CWE-540: Inclusion of Sensitive Information in Source Code",
    "Name": "Inclusion of Sensitive Information in Source Code",
    "Description": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.",
    "ExtendedDescription": "There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.",
    "Status": "Incomplete"
  },
  {
    "ID": 541,
    "Title": "CWE-541: Inclusion of Sensitive Information in an Include File",
    "Name": "Inclusion of Sensitive Information in an Include File",
    "Description": "If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 542,
    "Title": "CWE-542: DEPRECATED: Information Exposure Through Cleanup Log Files",
    "Name": "DEPRECATED: Information Exposure Through Cleanup Log Files",
    "Description": "This entry has been deprecated because its abstraction was too low-level.  See CWE-532.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 543,
    "Title": "CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
    "Name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
    "Description": "The product uses the singleton pattern when creating a resource within a multithreaded environment.",
    "ExtendedDescription": "The use of a singleton pattern may not be thread-safe.",
    "Status": "Incomplete"
  },
  {
    "ID": 544,
    "Title": "CWE-544: Missing Standardized Error Handling Mechanism",
    "Name": "Missing Standardized Error Handling Mechanism",
    "Description": "The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",
    "ExtendedDescription": "If the product handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.",
    "Status": "Draft"
  },
  {
    "ID": 545,
    "Title": "CWE-545: DEPRECATED: Use of Dynamic Class Loading",
    "Name": "DEPRECATED: Use of Dynamic Class Loading",
    "Description": "This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 546,
    "Title": "CWE-546: Suspicious Comment",
    "Name": "Suspicious Comment",
    "Description": "The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.",
    "ExtendedDescription": "Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.",
    "Status": "Draft"
  },
  {
    "ID": 547,
    "Title": "CWE-547: Use of Hard-coded, Security-relevant Constants",
    "Name": "Use of Hard-coded, Security-relevant Constants",
    "Description": "The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.",
    "ExtendedDescription": "If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.",
    "Status": "Draft"
  },
  {
    "ID": 548,
    "Title": "CWE-548: Exposure of Information Through Directory Listing",
    "Name": "Exposure of Information Through Directory Listing",
    "Description": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",
    "ExtendedDescription": "A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.",
    "Status": "Draft"
  },
  {
    "ID": 549,
    "Title": "CWE-549: Missing Password Field Masking",
    "Name": "Missing Password Field Masking",
    "Description": "The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 550,
    "Title": "CWE-550: Server-generated Error Message Containing Sensitive Information",
    "Name": "Server-generated Error Message Containing Sensitive Information",
    "Description": "Certain conditions, such as network failure, will cause a server error message to be displayed.",
    "ExtendedDescription": "While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.",
    "Status": "Incomplete"
  },
  {
    "ID": 551,
    "Title": "CWE-551: Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",
    "Name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",
    "Description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",
    "ExtendedDescription": "For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.",
    "Status": "Incomplete"
  },
  {
    "ID": 552,
    "Title": "CWE-552: Files or Directories Accessible to External Parties",
    "Name": "Files or Directories Accessible to External Parties",
    "Description": "The product makes files or directories accessible to unauthorized actors, even though they should not be.",
    "ExtendedDescription": "\n\nWeb servers, FTP servers, and similar servers may store a set of files underneath a \"root\" directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories.\n\n\nIn cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.\n",
    "Status": "Draft"
  },
  {
    "ID": 553,
    "Title": "CWE-553: Command Shell in Externally Accessible Directory",
    "Name": "Command Shell in Externally Accessible Directory",
    "Description": "A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 554,
    "Title": "CWE-554: ASP.NET Misconfiguration: Not Using Input Validation Framework",
    "Name": "ASP.NET Misconfiguration: Not Using Input Validation Framework",
    "Description": "The ASP.NET application does not use an input validation framework.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 555,
    "Title": "CWE-555: J2EE Misconfiguration: Plaintext Password in Configuration File",
    "Name": "J2EE Misconfiguration: Plaintext Password in Configuration File",
    "Description": "The J2EE application stores a plaintext password in a configuration file.",
    "ExtendedDescription": "Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",
    "Status": "Draft"
  },
  {
    "ID": 556,
    "Title": "CWE-556: ASP.NET Misconfiguration: Use of Identity Impersonation",
    "Name": "ASP.NET Misconfiguration: Use of Identity Impersonation",
    "Description": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.",
    "ExtendedDescription": "The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.",
    "Status": "Incomplete"
  },
  {
    "ID": 558,
    "Title": "CWE-558: Use of getlogin() in Multithreaded Application",
    "Name": "Use of getlogin() in Multithreaded Application",
    "Description": "The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",
    "ExtendedDescription": "The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.",
    "Status": "Draft"
  },
  {
    "ID": 560,
    "Title": "CWE-560: Use of umask() with chmod-style Argument",
    "Name": "Use of umask() with chmod-style Argument",
    "Description": "The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 561,
    "Title": "CWE-561: Dead Code",
    "Name": "Dead Code",
    "Description": "The product contains dead code, which can never be executed.",
    "ExtendedDescription": "Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.",
    "Status": "Draft"
  },
  {
    "ID": 562,
    "Title": "CWE-562: Return of Stack Variable Address",
    "Name": "Return of Stack Variable Address",
    "Description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",
    "ExtendedDescription": "Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",
    "Status": "Draft"
  },
  {
    "ID": 563,
    "Title": "CWE-563: Assignment to Variable without Use",
    "Name": "Assignment to Variable without Use",
    "Description": "The variable's value is assigned but never used, making it a dead store.",
    "ExtendedDescription": "After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.",
    "Status": "Draft"
  },
  {
    "ID": 564,
    "Title": "CWE-564: SQL Injection: Hibernate",
    "Name": "SQL Injection: Hibernate",
    "Description": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 565,
    "Title": "CWE-565: Reliance on Cookies without Validation and Integrity Checking",
    "Name": "Reliance on Cookies without Validation and Integrity Checking",
    "Description": "The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.",
    "ExtendedDescription": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.",
    "Status": "Incomplete"
  },
  {
    "ID": 566,
    "Title": "CWE-566: Authorization Bypass Through User-Controlled SQL Primary Key",
    "Name": "Authorization Bypass Through User-Controlled SQL Primary Key",
    "Description": "The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",
    "ExtendedDescription": "\n\nWhen a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.\n\n\nDatabase access control errors occur when:\n\n\n  - Data enters a program from an untrusted source.\n\n  - The data is used to specify the value of a primary key in a SQL query.\n\n  - The untrusted source does not have the permissions to be able to access all rows in the associated table.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 567,
    "Title": "CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context",
    "Name": "Unsynchronized Access to Shared Data in a Multithreaded Context",
    "Description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",
    "ExtendedDescription": "\n\nWithin servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.\n\n\nNote that this weakness is not unique to servlets.\n",
    "Status": "Draft"
  },
  {
    "ID": 568,
    "Title": "CWE-568: finalize() Method Without super.finalize()",
    "Name": "finalize() Method Without super.finalize()",
    "Description": "The product contains a finalize() method that does not call super.finalize().",
    "ExtendedDescription": "The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().",
    "Status": "Draft"
  },
  {
    "ID": 570,
    "Title": "CWE-570: Expression is Always False",
    "Name": "Expression is Always False",
    "Description": "The product contains an expression that will always evaluate to false.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 571,
    "Title": "CWE-571: Expression is Always True",
    "Name": "Expression is Always True",
    "Description": "The product contains an expression that will always evaluate to true.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 572,
    "Title": "CWE-572: Call to Thread run() instead of start()",
    "Name": "Call to Thread run() instead of start()",
    "Description": "The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",
    "ExtendedDescription": "In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.",
    "Status": "Draft"
  },
  {
    "ID": 573,
    "Title": "CWE-573: Improper Following of Specification by Caller",
    "Name": "Improper Following of Specification by Caller",
    "Description": "The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.",
    "ExtendedDescription": "When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.",
    "Status": "Draft"
  },
  {
    "ID": 574,
    "Title": "CWE-574: EJB Bad Practices: Use of Synchronization Primitives",
    "Name": "EJB Bad Practices: Use of Synchronization Primitives",
    "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.",
    "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances.\" The specification justifies this requirement in the following way: \"This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.\"",
    "Status": "Draft"
  },
  {
    "ID": 575,
    "Title": "CWE-575: EJB Bad Practices: Use of AWT Swing",
    "Name": "EJB Bad Practices: Use of AWT Swing",
    "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.",
    "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard.\" The specification justifies this requirement in the following way: \"Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.\"",
    "Status": "Draft"
  },
  {
    "ID": 576,
    "Title": "CWE-576: EJB Bad Practices: Use of Java I/O",
    "Name": "EJB Bad Practices: Use of Java I/O",
    "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.",
    "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the java.io package to attempt to access files and directories in the file system.\" The specification justifies this requirement in the following way: \"The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.\"",
    "Status": "Draft"
  },
  {
    "ID": 577,
    "Title": "CWE-577: EJB Bad Practices: Use of Sockets",
    "Name": "EJB Bad Practices: Use of Sockets",
    "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using sockets.",
    "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast.\" The specification justifies this requirement in the following way: \"The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.\"",
    "Status": "Draft"
  },
  {
    "ID": 578,
    "Title": "CWE-578: EJB Bad Practices: Use of Class Loader",
    "Name": "EJB Bad Practices: Use of Class Loader",
    "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.",
    "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams.\" The specification justifies this requirement in the following way: \"These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.\"",
    "Status": "Draft"
  },
  {
    "ID": 579,
    "Title": "CWE-579: J2EE Bad Practices: Non-serializable Object Stored in Session",
    "Name": "J2EE Bad Practices: Non-serializable Object Stored in Session",
    "Description": "The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.",
    "ExtendedDescription": "A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.",
    "Status": "Draft"
  },
  {
    "ID": 580,
    "Title": "CWE-580: clone() Method Without super.clone()",
    "Name": "clone() Method Without super.clone()",
    "Description": "The product contains a clone() method that does not call super.clone() to obtain the new object.",
    "ExtendedDescription": "All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.",
    "Status": "Draft"
  },
  {
    "ID": 581,
    "Title": "CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined",
    "Name": "Object Model Violation: Just One of Equals and Hashcode Defined",
    "Description": "The product does not maintain equal hashcodes for equal objects.",
    "ExtendedDescription": "Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().",
    "Status": "Draft"
  },
  {
    "ID": 582,
    "Title": "CWE-582: Array Declared Public, Final, and Static",
    "Name": "Array Declared Public, Final, and Static",
    "Description": "The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",
    "ExtendedDescription": "Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.",
    "Status": "Draft"
  },
  {
    "ID": 583,
    "Title": "CWE-583: finalize() Method Declared Public",
    "Name": "finalize() Method Declared Public",
    "Description": "The product violates secure coding principles for mobile code by declaring a finalize() method public.",
    "ExtendedDescription": "A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.",
    "Status": "Incomplete"
  },
  {
    "ID": 584,
    "Title": "CWE-584: Return Inside Finally Block",
    "Name": "Return Inside Finally Block",
    "Description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 585,
    "Title": "CWE-585: Empty Synchronized Block",
    "Name": "Empty Synchronized Block",
    "Description": "The product contains an empty synchronized block.",
    "ExtendedDescription": "An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.",
    "Status": "Draft"
  },
  {
    "ID": 586,
    "Title": "CWE-586: Explicit Call to Finalize()",
    "Name": "Explicit Call to Finalize()",
    "Description": "The product makes an explicit call to the finalize() method from outside the finalizer.",
    "ExtendedDescription": "While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.",
    "Status": "Draft"
  },
  {
    "ID": 587,
    "Title": "CWE-587: Assignment of a Fixed Address to a Pointer",
    "Name": "Assignment of a Fixed Address to a Pointer",
    "Description": "The product sets a pointer to a specific address other than NULL or 0.",
    "ExtendedDescription": "Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.",
    "Status": "Draft"
  },
  {
    "ID": 588,
    "Title": "CWE-588: Attempt to Access Child of a Non-structure Pointer",
    "Name": "Attempt to Access Child of a Non-structure Pointer",
    "Description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 589,
    "Title": "CWE-589: Call to Non-ubiquitous API",
    "Name": "Call to Non-ubiquitous API",
    "Description": "The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.",
    "ExtendedDescription": "Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.",
    "Status": "Incomplete"
  },
  {
    "ID": 590,
    "Title": "CWE-590: Free of Memory not on the Heap",
    "Name": "Free of Memory not on the Heap",
    "Description": "The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",
    "ExtendedDescription": "When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.",
    "Status": "Incomplete"
  },
  {
    "ID": 591,
    "Title": "CWE-591: Sensitive Data Storage in Improperly Locked Memory",
    "Name": "Sensitive Data Storage in Improperly Locked Memory",
    "Description": "The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",
    "ExtendedDescription": "On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.",
    "Status": "Draft"
  },
  {
    "ID": 592,
    "Title": "CWE-592: DEPRECATED: Authentication Bypass Issues",
    "Name": "DEPRECATED: Authentication Bypass Issues",
    "Description": "This weakness has been deprecated because it covered redundant concepts already described in CWE-287.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 593,
    "Title": "CWE-593: Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created",
    "Name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created",
    "Description": "The product modifies the SSL context after connection creation has begun.",
    "ExtendedDescription": "If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.",
    "Status": "Draft"
  },
  {
    "ID": 594,
    "Title": "CWE-594: J2EE Framework: Saving Unserializable Objects to Disk",
    "Name": "J2EE Framework: Saving Unserializable Objects to Disk",
    "Description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.",
    "ExtendedDescription": "In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.",
    "Status": "Incomplete"
  },
  {
    "ID": 595,
    "Title": "CWE-595: Comparison of Object References Instead of Object Contents",
    "Name": "Comparison of Object References Instead of Object Contents",
    "Description": "The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",
    "ExtendedDescription": "For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.",
    "Status": "Incomplete"
  },
  {
    "ID": 596,
    "Title": "CWE-596: DEPRECATED: Incorrect Semantic Object Comparison",
    "Name": "DEPRECATED: Incorrect Semantic Object Comparison",
    "Description": "This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 597,
    "Title": "CWE-597: Use of Wrong Operator in String Comparison",
    "Name": "Use of Wrong Operator in String Comparison",
    "Description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.",
    "ExtendedDescription": "In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.",
    "Status": "Draft"
  },
  {
    "ID": 598,
    "Title": "CWE-598: Use of GET Request Method With Sensitive Query Strings",
    "Name": "Use of GET Request Method With Sensitive Query Strings",
    "Description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.",
    "ExtendedDescription": "The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.",
    "Status": "Draft"
  },
  {
    "ID": 599,
    "Title": "CWE-599: Missing Validation of OpenSSL Certificate",
    "Name": "Missing Validation of OpenSSL Certificate",
    "Description": "The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.",
    "ExtendedDescription": "This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.",
    "Status": "Incomplete"
  },
  {
    "ID": 600,
    "Title": "CWE-600: Uncaught Exception in Servlet ",
    "Name": "Uncaught Exception in Servlet ",
    "Description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",
    "ExtendedDescription": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",
    "Status": "Draft"
  },
  {
    "ID": 601,
    "Title": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
    "Name": "URL Redirection to Untrusted Site ('Open Redirect')",
    "Description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
    "ExtendedDescription": "An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.",
    "Status": "Draft"
  },
  {
    "ID": 602,
    "Title": "CWE-602: Client-Side Enforcement of Server-Side Security",
    "Name": "Client-Side Enforcement of Server-Side Security",
    "Description": "The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.",
    "ExtendedDescription": "When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.",
    "Status": "Draft"
  },
  {
    "ID": 603,
    "Title": "CWE-603: Use of Client-Side Authentication",
    "Name": "Use of Client-Side Authentication",
    "Description": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",
    "ExtendedDescription": "Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.",
    "Status": "Draft"
  },
  {
    "ID": 605,
    "Title": "CWE-605: Multiple Binds to the Same Port",
    "Name": "Multiple Binds to the Same Port",
    "Description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.",
    "ExtendedDescription": "On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.",
    "Status": "Draft"
  },
  {
    "ID": 606,
    "Title": "CWE-606: Unchecked Input for Loop Condition",
    "Name": "Unchecked Input for Loop Condition",
    "Description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 607,
    "Title": "CWE-607: Public Static Final Field References Mutable Object",
    "Name": "Public Static Final Field References Mutable Object",
    "Description": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 608,
    "Title": "CWE-608: Struts: Non-private Field in ActionForm Class",
    "Name": "Struts: Non-private Field in ActionForm Class",
    "Description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 609,
    "Title": "CWE-609: Double-Checked Locking",
    "Name": "Double-Checked Locking",
    "Description": "The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",
    "ExtendedDescription": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",
    "Status": "Draft"
  },
  {
    "ID": 610,
    "Title": "CWE-610: Externally Controlled Reference to a Resource in Another Sphere",
    "Name": "Externally Controlled Reference to a Resource in Another Sphere",
    "Description": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 611,
    "Title": "CWE-611: Improper Restriction of XML External Entity Reference",
    "Name": "Improper Restriction of XML External Entity Reference",
    "Description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
    "ExtendedDescription": "\n\nXML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.\n\n\nBy submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as \"file:///c:/winnt/win.ini\" designates (in Windows) the file C:\\Winnt\\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.\n\n\nOnce the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.\n",
    "Status": "Draft"
  },
  {
    "ID": 612,
    "Title": "CWE-612: Improper Authorization of Index Containing Sensitive Information",
    "Name": "Improper Authorization of Index Containing Sensitive Information",
    "Description": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",
    "ExtendedDescription": "Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.",
    "Status": "Draft"
  },
  {
    "ID": 613,
    "Title": "CWE-613: Insufficient Session Expiration",
    "Name": "Insufficient Session Expiration",
    "Description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 614,
    "Title": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
    "Name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
    "Description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 615,
    "Title": "CWE-615: Inclusion of Sensitive Information in Source Code Comments",
    "Name": "Inclusion of Sensitive Information in Source Code Comments",
    "Description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.",
    "ExtendedDescription": "An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.",
    "Status": "Incomplete"
  },
  {
    "ID": 616,
    "Title": "CWE-616: Incomplete Identification of Uploaded File Variables (PHP)",
    "Name": "Incomplete Identification of Uploaded File Variables (PHP)",
    "Description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.",
    "ExtendedDescription": "These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as \"/etc/passwd\".",
    "Status": "Incomplete"
  },
  {
    "ID": 617,
    "Title": "CWE-617: Reachable Assertion",
    "Name": "Reachable Assertion",
    "Description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",
    "ExtendedDescription": "\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n",
    "Status": "Draft"
  },
  {
    "ID": 618,
    "Title": "CWE-618: Exposed Unsafe ActiveX Method",
    "Name": "Exposed Unsafe ActiveX Method",
    "Description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).",
    "ExtendedDescription": "ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.",
    "Status": "Incomplete"
  },
  {
    "ID": 619,
    "Title": "CWE-619: Dangling Database Cursor ('Cursor Injection')",
    "Name": "Dangling Database Cursor ('Cursor Injection')",
    "Description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\"",
    "ExtendedDescription": "For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.",
    "Status": "Incomplete"
  },
  {
    "ID": 620,
    "Title": "CWE-620: Unverified Password Change",
    "Name": "Unverified Password Change",
    "Description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.",
    "ExtendedDescription": "This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.",
    "Status": "Draft"
  },
  {
    "ID": 621,
    "Title": "CWE-621: Variable Extraction Error",
    "Name": "Variable Extraction Error",
    "Description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.",
    "ExtendedDescription": "\n\nFor example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.\n\n\nSimilar functionality is possible in other interpreted languages, including custom languages.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 622,
    "Title": "CWE-622: Improper Validation of Function Hook Arguments",
    "Name": "Improper Validation of Function Hook Arguments",
    "Description": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.",
    "ExtendedDescription": "Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.",
    "Status": "Draft"
  },
  {
    "ID": 623,
    "Title": "CWE-623: Unsafe ActiveX Control Marked Safe For Scripting",
    "Name": "Unsafe ActiveX Control Marked Safe For Scripting",
    "Description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.",
    "ExtendedDescription": "This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.",
    "Status": "Draft"
  },
  {
    "ID": 624,
    "Title": "CWE-624: Executable Regular Expression Error",
    "Name": "Executable Regular Expression Error",
    "Description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.",
    "ExtendedDescription": "Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.",
    "Status": "Incomplete"
  },
  {
    "ID": 625,
    "Title": "CWE-625: Permissive Regular Expression",
    "Name": "Permissive Regular Expression",
    "Description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values.",
    "ExtendedDescription": "\n\nThis effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:\n\n\n  - not identifying the beginning and end of the target string\n\n  - using wildcards instead of acceptable character ranges\n\n  - others\n\n",
    "Status": "Draft"
  },
  {
    "ID": 626,
    "Title": "CWE-626: Null Byte Interaction Error (Poison Null Byte)",
    "Name": "Null Byte Interaction Error (Poison Null Byte)",
    "Description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components.",
    "ExtendedDescription": "\n\nA null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.\n\n\nThe poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.\n",
    "Status": "Draft"
  },
  {
    "ID": 627,
    "Title": "CWE-627: Dynamic Variable Evaluation",
    "Name": "Dynamic Variable Evaluation",
    "Description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.",
    "ExtendedDescription": "The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.",
    "Status": "Incomplete"
  },
  {
    "ID": 628,
    "Title": "CWE-628: Function Call with Incorrectly Specified Arguments",
    "Name": "Function Call with Incorrectly Specified Arguments",
    "Description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",
    "ExtendedDescription": "\n\nThere are multiple ways in which this weakness can be introduced, including:\n\n\n  - the wrong variable or reference;\n\n  - an incorrect number of arguments;\n\n  - incorrect order of arguments;\n\n  - wrong type of arguments; or\n\n  - wrong value.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 636,
    "Title": "CWE-636: Not Failing Securely ('Failing Open')",
    "Name": "Not Failing Securely ('Failing Open')",
    "Description": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.",
    "ExtendedDescription": "By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to \"fail functional\" to minimize administration and support costs, instead of \"failing safe.\"",
    "Status": "Draft"
  },
  {
    "ID": 637,
    "Title": "CWE-637: Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')",
    "Name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')",
    "Description": "The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.",
    "ExtendedDescription": "Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.",
    "Status": "Draft"
  },
  {
    "ID": 638,
    "Title": "CWE-638: Not Using Complete Mediation",
    "Name": "Not Using Complete Mediation",
    "Description": "The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 639,
    "Title": "CWE-639: Authorization Bypass Through User-Controlled Key",
    "Name": "Authorization Bypass Through User-Controlled Key",
    "Description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.",
    "ExtendedDescription": "\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 640,
    "Title": "CWE-640: Weak Password Recovery Mechanism for Forgotten Password",
    "Name": "Weak Password Recovery Mechanism for Forgotten Password",
    "Description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",
    "ExtendedDescription": "\n\nIt is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.\n\n\nThis weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 641,
    "Title": "CWE-641: Improper Restriction of Names for Files and Other Resources",
    "Name": "Improper Restriction of Names for Files and Other Resources",
    "Description": "The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.",
    "ExtendedDescription": "This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.",
    "Status": "Incomplete"
  },
  {
    "ID": 642,
    "Title": "CWE-642: External Control of Critical State Data",
    "Name": "External Control of Critical State Data",
    "Description": "The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.",
    "ExtendedDescription": "\n\nIf an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.\n\n\nState information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication.\n",
    "Status": "Draft"
  },
  {
    "ID": 643,
    "Title": "CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
    "Name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
    "Description": "The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
    "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",
    "Status": "Incomplete"
  },
  {
    "ID": 644,
    "Title": "CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax",
    "Name": "Improper Neutralization of HTTP Headers for Scripting Syntax",
    "Description": "The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.",
    "ExtendedDescription": "\n\nAn attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.\n\n\nIf a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 645,
    "Title": "CWE-645: Overly Restrictive Account Lockout Mechanism",
    "Name": "Overly Restrictive Account Lockout Mechanism",
    "Description": "The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.",
    "ExtendedDescription": "Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.",
    "Status": "Incomplete"
  },
  {
    "ID": 646,
    "Title": "CWE-646: Reliance on File Name or Extension of Externally-Supplied File",
    "Name": "Reliance on File Name or Extension of Externally-Supplied File",
    "Description": "The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.",
    "ExtendedDescription": "An application might use the file name or extension of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a \".php.gif\" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.",
    "Status": "Incomplete"
  },
  {
    "ID": 647,
    "Title": "CWE-647: Use of Non-Canonical URL Paths for Authorization Decisions",
    "Name": "Use of Non-Canonical URL Paths for Authorization Decisions",
    "Description": "The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.",
    "ExtendedDescription": "\n\nIf an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:\n\n\n  - http://WWW.EXAMPLE.COM/mypage\n\n  - http://www.example.com/%6Dypage (alternate encoding)\n\n  - http://192.168.1.1/mypage (IP address)\n\n  - http://www.example.com/mypage/ (trailing /)\n\n  - http://www.example.com:80/mypage\n\nTherefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).",
    "Status": "Incomplete"
  },
  {
    "ID": 648,
    "Title": "CWE-648: Incorrect Use of Privileged APIs",
    "Name": "Incorrect Use of Privileged APIs",
    "Description": "The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.",
    "ExtendedDescription": "\n\nWhen a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:\n\n\n  - ensure that assumptions made by the APIs are valid, such as validity of arguments\n\n  - account for known weaknesses in the design/implementation of the API\n\n  - call the API from a safe context\n\nIf the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.\n\nFor instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 649,
    "Title": "CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking",
    "Name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking",
    "Description": "The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.",
    "ExtendedDescription": "When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.",
    "Status": "Incomplete"
  },
  {
    "ID": 650,
    "Title": "CWE-650: Trusting HTTP Permission Methods on the Server Side",
    "Name": "Trusting HTTP Permission Methods on the Server Side",
    "Description": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.",
    "ExtendedDescription": "The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.",
    "Status": "Incomplete"
  },
  {
    "ID": 651,
    "Title": "CWE-651: Exposure of WSDL File Containing Sensitive Information",
    "Name": "Exposure of WSDL File Containing Sensitive Information",
    "Description": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).",
    "ExtendedDescription": "\n\nAn information exposure may occur if any of the following apply:\n\n\n  - The WSDL file is accessible to a wider audience than intended.\n\n  - The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.\n\n  - Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 652,
    "Title": "CWE-652: Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')",
    "Name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')",
    "Description": "The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
    "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",
    "Status": "Incomplete"
  },
  {
    "ID": 653,
    "Title": "CWE-653: Improper Isolation or Compartmentalization",
    "Name": "Improper Isolation or Compartmentalization",
    "Description": "The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.",
    "ExtendedDescription": "When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.",
    "Status": "Draft"
  },
  {
    "ID": 654,
    "Title": "CWE-654: Reliance on a Single Factor in a Security Decision",
    "Name": "Reliance on a Single Factor in a Security Decision",
    "Description": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 655,
    "Title": "CWE-655: Insufficient Psychological Acceptability",
    "Name": "Insufficient Psychological Acceptability",
    "Description": "The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 656,
    "Title": "CWE-656: Reliance on Security Through Obscurity",
    "Name": "Reliance on Security Through Obscurity",
    "Description": "The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.",
    "ExtendedDescription": "This reliance on \"security through obscurity\" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.",
    "Status": "Draft"
  },
  {
    "ID": 657,
    "Title": "CWE-657: Violation of Secure Design Principles",
    "Name": "Violation of Secure Design Principles",
    "Description": "The product violates well-established principles for secure design.",
    "ExtendedDescription": "This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.",
    "Status": "Draft"
  },
  {
    "ID": 662,
    "Title": "CWE-662: Improper Synchronization",
    "Name": "Improper Synchronization",
    "Description": "The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",
    "ExtendedDescription": "\n\nSynchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc.\n",
    "Status": "Draft"
  },
  {
    "ID": 663,
    "Title": "CWE-663: Use of a Non-reentrant Function in a Concurrent Context",
    "Name": "Use of a Non-reentrant Function in a Concurrent Context",
    "Description": "The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 664,
    "Title": "CWE-664: Improper Control of a Resource Through its Lifetime",
    "Name": "Improper Control of a Resource Through its Lifetime",
    "Description": "The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",
    "ExtendedDescription": "\n\nResources often have explicit instructions on how to be created, used and destroyed. When code does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.\n\n\nEven without explicit instructions, various principles are expected to be adhered to, such as \"Do not use an object until after its creation is complete,\" or \"do not use an object after it has been slated for destruction.\"\n",
    "Status": "Draft"
  },
  {
    "ID": 665,
    "Title": "CWE-665: Improper Initialization",
    "Name": "Improper Initialization",
    "Description": "The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",
    "ExtendedDescription": "This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",
    "Status": "Draft"
  },
  {
    "ID": 666,
    "Title": "CWE-666: Operation on Resource in Wrong Phase of Lifetime",
    "Name": "Operation on Resource in Wrong Phase of Lifetime",
    "Description": "The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.",
    "ExtendedDescription": "A resource's lifecycle includes several phases: initialization, use, and release. For each phase, it is important to follow the specifications outlined for how to operate on the resource and to ensure that the resource is in the expected phase. Otherwise, if a resource is in one phase but the operation is not valid for that phase (i.e., an incorrect phase of the resource's lifetime), then this can produce resultant weaknesses. For example, using a resource before it has been fully initialized could cause corruption or incorrect data to be used.",
    "Status": "Draft"
  },
  {
    "ID": 667,
    "Title": "CWE-667: Improper Locking",
    "Name": "Improper Locking",
    "Description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
    "ExtendedDescription": "\n\nLocking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc.\n",
    "Status": "Draft"
  },
  {
    "ID": 668,
    "Title": "CWE-668: Exposure of Resource to Wrong Sphere",
    "Name": "Exposure of Resource to Wrong Sphere",
    "Description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
    "ExtendedDescription": "\n\nResources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.\n\n\nA separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.\n\n\nIn either case, the end result is that a resource has been exposed to the wrong party.\n",
    "Status": "Draft"
  },
  {
    "ID": 669,
    "Title": "CWE-669: Incorrect Resource Transfer Between Spheres",
    "Name": "Incorrect Resource Transfer Between Spheres",
    "Description": "The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 670,
    "Title": "CWE-670: Always-Incorrect Control Flow Implementation",
    "Name": "Always-Incorrect Control Flow Implementation",
    "Description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
    "ExtendedDescription": "This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.",
    "Status": "Draft"
  },
  {
    "ID": 671,
    "Title": "CWE-671: Lack of Administrator Control over Security",
    "Name": "Lack of Administrator Control over Security",
    "Description": "The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.",
    "ExtendedDescription": "If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.",
    "Status": "Draft"
  },
  {
    "ID": 672,
    "Title": "CWE-672: Operation on a Resource after Expiration or Release",
    "Name": "Operation on a Resource after Expiration or Release",
    "Description": "The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 673,
    "Title": "CWE-673: External Influence of Sphere Definition",
    "Name": "External Influence of Sphere Definition",
    "Description": "The product does not prevent the definition of control spheres from external actors.",
    "ExtendedDescription": "Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.",
    "Status": "Draft"
  },
  {
    "ID": 674,
    "Title": "CWE-674: Uncontrolled Recursion",
    "Name": "Uncontrolled Recursion",
    "Description": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 675,
    "Title": "CWE-675: Multiple Operations on Resource in Single-Operation Context",
    "Name": "Multiple Operations on Resource in Single-Operation Context",
    "Description": "The product performs the same operation on a resource two or more times, when the operation should only be applied once.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 676,
    "Title": "CWE-676: Use of Potentially Dangerous Function",
    "Name": "Use of Potentially Dangerous Function",
    "Description": "The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 680,
    "Title": "CWE-680: Integer Overflow to Buffer Overflow",
    "Name": "Integer Overflow to Buffer Overflow",
    "Description": "The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 681,
    "Title": "CWE-681: Incorrect Conversion between Numeric Types",
    "Name": "Incorrect Conversion between Numeric Types",
    "Description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 682,
    "Title": "CWE-682: Incorrect Calculation",
    "Name": "Incorrect Calculation",
    "Description": "The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
    "ExtendedDescription": "When product performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.",
    "Status": "Draft"
  },
  {
    "ID": 683,
    "Title": "CWE-683: Function Call With Incorrect Order of Arguments",
    "Name": "Function Call With Incorrect Order of Arguments",
    "Description": "The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.",
    "ExtendedDescription": "While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.",
    "Status": "Draft"
  },
  {
    "ID": 684,
    "Title": "CWE-684: Incorrect Provision of Specified Functionality",
    "Name": "Incorrect Provision of Specified Functionality",
    "Description": "The code does not function according to its published specifications, potentially leading to incorrect usage.",
    "ExtendedDescription": "When providing functionality to an external party, it is important that the product behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.",
    "Status": "Draft"
  },
  {
    "ID": 685,
    "Title": "CWE-685: Function Call With Incorrect Number of Arguments",
    "Name": "Function Call With Incorrect Number of Arguments",
    "Description": "The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 686,
    "Title": "CWE-686: Function Call With Incorrect Argument Type",
    "Name": "Function Call With Incorrect Argument Type",
    "Description": "The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",
    "ExtendedDescription": "This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.",
    "Status": "Draft"
  },
  {
    "ID": 687,
    "Title": "CWE-687: Function Call With Incorrectly Specified Argument Value",
    "Name": "Function Call With Incorrectly Specified Argument Value",
    "Description": "The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 688,
    "Title": "CWE-688: Function Call With Incorrect Variable or Reference as Argument",
    "Name": "Function Call With Incorrect Variable or Reference as Argument",
    "Description": "The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 689,
    "Title": "CWE-689: Permission Race Condition During Resource Copy",
    "Name": "Permission Race Condition During Resource Copy",
    "Description": "The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 690,
    "Title": "CWE-690: Unchecked Return Value to NULL Pointer Dereference",
    "Name": "Unchecked Return Value to NULL Pointer Dereference",
    "Description": "The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.",
    "ExtendedDescription": "While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur.",
    "Status": "Draft"
  },
  {
    "ID": 691,
    "Title": "CWE-691: Insufficient Control Flow Management",
    "Name": "Insufficient Control Flow Management",
    "Description": "The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 692,
    "Title": "CWE-692: Incomplete Denylist to Cross-Site Scripting",
    "Name": "Incomplete Denylist to Cross-Site Scripting",
    "Description": "The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.",
    "ExtendedDescription": "While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a denylist cannot keep track of all the variations. The \"XSS Cheat Sheet\" [REF-714] contains a large number of attacks that are intended to bypass incomplete denylists.",
    "Status": "Draft"
  },
  {
    "ID": 693,
    "Title": "CWE-693: Protection Mechanism Failure",
    "Name": "Protection Mechanism Failure",
    "Description": "The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.",
    "ExtendedDescription": "This weakness covers three distinct situations. A \"missing\" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An \"insufficient\" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an \"ignored\" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.",
    "Status": "Draft"
  },
  {
    "ID": 694,
    "Title": "CWE-694: Use of Multiple Resources with Duplicate Identifier",
    "Name": "Use of Multiple Resources with Duplicate Identifier",
    "Description": "The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.",
    "ExtendedDescription": "If the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.",
    "Status": "Incomplete"
  },
  {
    "ID": 695,
    "Title": "CWE-695: Use of Low-Level Functionality",
    "Name": "Use of Low-Level Functionality",
    "Description": "The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.",
    "ExtendedDescription": "The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 696,
    "Title": "CWE-696: Incorrect Behavior Order",
    "Name": "Incorrect Behavior Order",
    "Description": "The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 697,
    "Title": "CWE-697: Incorrect Comparison",
    "Name": "Incorrect Comparison",
    "Description": "The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
    "ExtendedDescription": "\n\nThis Pillar covers several possibilities:\n\n\n  - the comparison checks one factor incorrectly;\n\n  - the comparison should consider multiple factors, but it does not check at least one of those factors at all;\n\n  - the comparison checks the wrong factor.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 698,
    "Title": "CWE-698: Execution After Redirect (EAR)",
    "Name": "Execution After Redirect (EAR)",
    "Description": "The web application sends a redirect to another location, but instead of exiting, it executes additional code.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 703,
    "Title": "CWE-703: Improper Check or Handling of Exceptional Conditions",
    "Name": "Improper Check or Handling of Exceptional Conditions",
    "Description": "The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 704,
    "Title": "CWE-704: Incorrect Type Conversion or Cast",
    "Name": "Incorrect Type Conversion or Cast",
    "Description": "The product does not correctly convert an object, resource, or structure from one type to a different type.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 705,
    "Title": "CWE-705: Incorrect Control Flow Scoping",
    "Name": "Incorrect Control Flow Scoping",
    "Description": "The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 706,
    "Title": "CWE-706: Use of Incorrectly-Resolved Name or Reference",
    "Name": "Use of Incorrectly-Resolved Name or Reference",
    "Description": "The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 707,
    "Title": "CWE-707: Improper Neutralization",
    "Name": "Improper Neutralization",
    "Description": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.",
    "ExtendedDescription": "\n\nIf a message is malformed, it may cause the message to be incorrectly interpreted.\n\n\nNeutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is \"safe.\" This can be done by:\n\n\n  - checking that the input/output is already \"safe\" (e.g. validation)\n\n  - transformation of the input/output to be \"safe\" using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalization\n\n  - preventing the input/output from being directly provided by an attacker (e.g. \"indirect selection\" that maps externally-provided values to internally-controlled values)\n\n  - preventing the input/output from being processed at all\n\nThis weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.",
    "Status": "Incomplete"
  },
  {
    "ID": 708,
    "Title": "CWE-708: Incorrect Ownership Assignment",
    "Name": "Incorrect Ownership Assignment",
    "Description": "The product assigns an owner to a resource, but the owner is outside of the intended control sphere.",
    "ExtendedDescription": "This may allow the resource to be manipulated by actors outside of the intended control sphere.",
    "Status": "Incomplete"
  },
  {
    "ID": 710,
    "Title": "CWE-710: Improper Adherence to Coding Standards",
    "Name": "Improper Adherence to Coding Standards",
    "Description": "The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 732,
    "Title": "CWE-732: Incorrect Permission Assignment for Critical Resource",
    "Name": "Incorrect Permission Assignment for Critical Resource",
    "Description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
    "ExtendedDescription": "When a resource is given a permission setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data. For example, consider a misconfigured storage account for the cloud that can be read or written by a public or anonymous user.",
    "Status": "Draft"
  },
  {
    "ID": 733,
    "Title": "CWE-733: Compiler Optimization Removal or Modification of Security-critical Code",
    "Name": "Compiler Optimization Removal or Modification of Security-critical Code",
    "Description": "The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 749,
    "Title": "CWE-749: Exposed Dangerous Method or Function",
    "Name": "Exposed Dangerous Method or Function",
    "Description": "The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.",
    "ExtendedDescription": "\n\nThis weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on.\n\n\nThe exposure can occur in a few different ways:\n\n\n  - The function/method was never intended to be exposed to outside actors.\n\n  - The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 754,
    "Title": "CWE-754: Improper Check for Unusual or Exceptional Conditions",
    "Name": "Improper Check for Unusual or Exceptional Conditions",
    "Description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",
    "ExtendedDescription": "\n\nThe programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.\n\n\nNote that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 755,
    "Title": "CWE-755: Improper Handling of Exceptional Conditions",
    "Name": "Improper Handling of Exceptional Conditions",
    "Description": "The product does not handle or incorrectly handles an exceptional condition.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 756,
    "Title": "CWE-756: Missing Custom Error Page",
    "Name": "Missing Custom Error Page",
    "Description": "The product does not return custom error pages to the user, possibly exposing sensitive information.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 757,
    "Title": "CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
    "Name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
    "Description": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.",
    "ExtendedDescription": "When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the product by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.",
    "Status": "Incomplete"
  },
  {
    "ID": 758,
    "Title": "CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",
    "Name": "Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",
    "Description": "The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",
    "ExtendedDescription": "This can lead to resultant weaknesses when the required properties change, such as when the product is ported to a different platform or if an interaction error (CWE-435) occurs.",
    "Status": "Incomplete"
  },
  {
    "ID": 759,
    "Title": "CWE-759: Use of a One-Way Hash without a Salt",
    "Name": "Use of a One-Way Hash without a Salt",
    "Description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.",
    "ExtendedDescription": "\n\nThis makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.\n\n\nIt should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 760,
    "Title": "CWE-760: Use of a One-Way Hash with a Predictable Salt",
    "Name": "Use of a One-Way Hash with a Predictable Salt",
    "Description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.",
    "ExtendedDescription": "\n\nThis makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.\n\n\nIt should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 761,
    "Title": "CWE-761: Free of Pointer not at Start of Buffer",
    "Name": "Free of Pointer not at Start of Buffer",
    "Description": "The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.",
    "ExtendedDescription": "\n\nThis can cause the product to crash, or in some cases, modify critical program variables or execute code.\n\n\nThis weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 762,
    "Title": "CWE-762: Mismatched Memory Management Routines",
    "Name": "Mismatched Memory Management Routines",
    "Description": "The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",
    "ExtendedDescription": "\n\nThis weakness can be generally described as mismatching memory management routines, such as:\n\n\n  - The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory.\n\n  - The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator.\n\nWhen the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.",
    "Status": "Incomplete"
  },
  {
    "ID": 763,
    "Title": "CWE-763: Release of Invalid Pointer or Reference",
    "Name": "Release of Invalid Pointer or Reference",
    "Description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",
    "ExtendedDescription": "\n\nThis weakness can take several forms, such as:\n\n\n  - The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762).\n\n  - The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 764,
    "Title": "CWE-764: Multiple Locks of a Critical Resource",
    "Name": "Multiple Locks of a Critical Resource",
    "Description": "The product locks a critical resource more times than intended, leading to an unexpected state in the system.",
    "ExtendedDescription": "When a product is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.",
    "Status": "Incomplete"
  },
  {
    "ID": 765,
    "Title": "CWE-765: Multiple Unlocks of a Critical Resource",
    "Name": "Multiple Unlocks of a Critical Resource",
    "Description": "The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.",
    "ExtendedDescription": "When the product is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.",
    "Status": "Incomplete"
  },
  {
    "ID": 766,
    "Title": "CWE-766: Critical Data Element Declared Public",
    "Name": "Critical Data Element Declared Public",
    "Description": "The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 767,
    "Title": "CWE-767: Access to Critical Private Variable via Public Method",
    "Name": "Access to Critical Private Variable via Public Method",
    "Description": "The product defines a public method that reads or modifies a private variable.",
    "ExtendedDescription": "If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.",
    "Status": "Incomplete"
  },
  {
    "ID": 768,
    "Title": "CWE-768: Incorrect Short Circuit Evaluation",
    "Name": "Incorrect Short Circuit Evaluation",
    "Description": "The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",
    "ExtendedDescription": "\n\nUsage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the product's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system.\n\n\nIf the first condition of an \"or\" statement is assumed to be true under normal circumstances, or if the first condition of an \"and\" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing.\n\n\nFinally, the usage of short circuit evaluation may decrease the maintainability of the code.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 769,
    "Title": "CWE-769: DEPRECATED: Uncontrolled File Descriptor Consumption",
    "Name": "DEPRECATED: Uncontrolled File Descriptor Consumption",
    "Description": "This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 770,
    "Title": "CWE-770: Allocation of Resources Without Limits or Throttling",
    "Name": "Allocation of Resources Without Limits or Throttling",
    "Description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "ExtendedDescription": "\n\nCode frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 771,
    "Title": "CWE-771: Missing Reference to Active Allocated Resource",
    "Name": "Missing Reference to Active Allocated Resource",
    "Description": "The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",
    "ExtendedDescription": "This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.",
    "Status": "Incomplete"
  },
  {
    "ID": 772,
    "Title": "CWE-772: Missing Release of Resource after Effective Lifetime",
    "Name": "Missing Release of Resource after Effective Lifetime",
    "Description": "The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",
    "ExtendedDescription": "When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.",
    "Status": "Draft"
  },
  {
    "ID": 773,
    "Title": "CWE-773: Missing Reference to Active File Descriptor or Handle",
    "Name": "Missing Reference to Active File Descriptor or Handle",
    "Description": "The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.",
    "ExtendedDescription": "This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",
    "Status": "Incomplete"
  },
  {
    "ID": 774,
    "Title": "CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling",
    "Name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
    "Description": "The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",
    "ExtendedDescription": "This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",
    "Status": "Incomplete"
  },
  {
    "ID": 775,
    "Title": "CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime",
    "Name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
    "Description": "The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.",
    "ExtendedDescription": "When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles.",
    "Status": "Incomplete"
  },
  {
    "ID": 776,
    "Title": "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
    "Name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
    "Description": "The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",
    "ExtendedDescription": "If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.",
    "Status": "Draft"
  },
  {
    "ID": 777,
    "Title": "CWE-777: Regular Expression without Anchors",
    "Name": "Regular Expression without Anchors",
    "Description": "The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.",
    "ExtendedDescription": "When performing tasks such as validating against a set of allowed inputs (allowlist), data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.",
    "Status": "Incomplete"
  },
  {
    "ID": 778,
    "Title": "CWE-778: Insufficient Logging",
    "Name": "Insufficient Logging",
    "Description": "When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.",
    "ExtendedDescription": "\n\nWhen security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.\n\n\nAs organizations adopt cloud storage resources, these technologies often require configuration changes to enable detailed logging information, since detailed logging can incur additional costs. This could lead to telemetry gaps in critical audit logs. For example, in Azure, the default value for logging is disabled. \n",
    "Status": "Draft"
  },
  {
    "ID": 779,
    "Title": "CWE-779: Logging of Excessive Data",
    "Name": "Logging of Excessive Data",
    "Description": "The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.",
    "ExtendedDescription": "While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.",
    "Status": "Draft"
  },
  {
    "ID": 780,
    "Title": "CWE-780: Use of RSA Algorithm without OAEP",
    "Name": "Use of RSA Algorithm without OAEP",
    "Description": "The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",
    "ExtendedDescription": "Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.",
    "Status": "Incomplete"
  },
  {
    "ID": 781,
    "Title": "CWE-781: Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
    "Name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
    "Description": "The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.",
    "ExtendedDescription": "When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service.",
    "Status": "Draft"
  },
  {
    "ID": 782,
    "Title": "CWE-782: Exposed IOCTL with Insufficient Access Control",
    "Name": "Exposed IOCTL with Insufficient Access Control",
    "Description": "The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.",
    "ExtendedDescription": "\n\nWhen an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.\n\n\nThe implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.\n",
    "Status": "Draft"
  },
  {
    "ID": 783,
    "Title": "CWE-783: Operator Precedence Logic Error",
    "Name": "Operator Precedence Logic Error",
    "Description": "The product uses an expression in which operator precedence causes incorrect logic to be used.",
    "ExtendedDescription": "While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.",
    "Status": "Draft"
  },
  {
    "ID": 784,
    "Title": "CWE-784: Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
    "Name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
    "Description": "The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.",
    "ExtendedDescription": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.",
    "Status": "Draft"
  },
  {
    "ID": 785,
    "Title": "CWE-785: Use of Path Manipulation Function without Maximum-sized Buffer",
    "Name": "Use of Path Manipulation Function without Maximum-sized Buffer",
    "Description": "The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.",
    "ExtendedDescription": "Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.",
    "Status": "Incomplete"
  },
  {
    "ID": 786,
    "Title": "CWE-786: Access of Memory Location Before Start of Buffer",
    "Name": "Access of Memory Location Before Start of Buffer",
    "Description": "The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
    "ExtendedDescription": "This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",
    "Status": "Incomplete"
  },
  {
    "ID": 787,
    "Title": "CWE-787: Out-of-bounds Write",
    "Name": "Out-of-bounds Write",
    "Description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 788,
    "Title": "CWE-788: Access of Memory Location After End of Buffer",
    "Name": "Access of Memory Location After End of Buffer",
    "Description": "The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.",
    "ExtendedDescription": "This typically occurs when a pointer or its index is incremented to a position after the buffer; or when pointer arithmetic results in a position after the buffer.",
    "Status": "Incomplete"
  },
  {
    "ID": 789,
    "Title": "CWE-789: Memory Allocation with Excessive Size Value",
    "Name": "Memory Allocation with Excessive Size Value",
    "Description": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 790,
    "Title": "CWE-790: Improper Filtering of Special Elements",
    "Name": "Improper Filtering of Special Elements",
    "Description": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 791,
    "Title": "CWE-791: Incomplete Filtering of Special Elements",
    "Name": "Incomplete Filtering of Special Elements",
    "Description": "The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 792,
    "Title": "CWE-792: Incomplete Filtering of One or More Instances of Special Elements",
    "Name": "Incomplete Filtering of One or More Instances of Special Elements",
    "Description": "The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.",
    "ExtendedDescription": "\n\nIncomplete filtering of this nature involves either:\n\n\n  - only filtering a single instance of a special element when more exist, or\n\n  - not filtering all instances or all elements where multiple special elements exist.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 793,
    "Title": "CWE-793: Only Filtering One Instance of a Special Element",
    "Name": "Only Filtering One Instance of a Special Element",
    "Description": "The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.",
    "ExtendedDescription": "Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.",
    "Status": "Incomplete"
  },
  {
    "ID": 794,
    "Title": "CWE-794: Incomplete Filtering of Multiple Instances of Special Elements",
    "Name": "Incomplete Filtering of Multiple Instances of Special Elements",
    "Description": "The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.",
    "ExtendedDescription": "\n\nIncomplete filtering of this nature may be applied to:\n\n\n  - sequential elements (special elements that appear next to each other) or\n\n  - non-sequential elements (special elements that appear multiple times in different locations).\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 795,
    "Title": "CWE-795: Only Filtering Special Elements at a Specified Location",
    "Name": "Only Filtering Special Elements at a Specified Location",
    "Description": "The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.",
    "ExtendedDescription": "\n\nA filter might only account for instances of special elements when they occur:\n\n\n  - relative to a marker (e.g. \"at the beginning/end of string; the second argument\"), or\n\n  - at an absolute position (e.g. \"byte number 10\").\n\nThis may leave special elements in the data that did not match the filter position, but still may be dangerous.",
    "Status": "Incomplete"
  },
  {
    "ID": 796,
    "Title": "CWE-796: Only Filtering Special Elements Relative to a Marker",
    "Name": "Only Filtering Special Elements Relative to a Marker",
    "Description": "The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. \"at the beginning/end of a string; the second argument\"), thereby missing remaining special elements that may exist before sending it to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 797,
    "Title": "CWE-797: Only Filtering Special Elements at an Absolute Position",
    "Name": "Only Filtering Special Elements at an Absolute Position",
    "Description": "The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. \"byte number 10\"), thereby missing remaining special elements that may exist before sending it to a downstream component.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 798,
    "Title": "CWE-798: Use of Hard-coded Credentials",
    "Name": "Use of Hard-coded Credentials",
    "Description": "The product contains hard-coded credentials, such as a password or cryptographic key.",
    "ExtendedDescription": "\n\nThere are two main variations:\n\n\n  - Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In this variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. It can also be difficult for the administrator to detect.\n\n  - Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. This variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password that can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 799,
    "Title": "CWE-799: Improper Control of Interaction Frequency",
    "Name": "Improper Control of Interaction Frequency",
    "Description": "The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",
    "ExtendedDescription": "This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.",
    "Status": "Incomplete"
  },
  {
    "ID": 804,
    "Title": "CWE-804: Guessable CAPTCHA",
    "Name": "Guessable CAPTCHA",
    "Description": "The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.",
    "ExtendedDescription": "\n\nAn automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks.\n\n\nThere can be several different causes of a guessable CAPTCHA:\n\n\n  - An audio or visual image that does not have sufficient distortion from the unobfuscated source image.\n\n  - A question is generated with a format that can be automatically recognized, such as a math question.\n\n  - A question for which the number of possible answers is limited, such as birth years or favorite sports teams.\n\n  - A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular entertainers.\n\n  - Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 805,
    "Title": "CWE-805: Buffer Access with Incorrect Length Value",
    "Name": "Buffer Access with Incorrect Length Value",
    "Description": "The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",
    "ExtendedDescription": "When the length value exceeds the size of the destination, a buffer overflow could occur.",
    "Status": "Incomplete"
  },
  {
    "ID": 806,
    "Title": "CWE-806: Buffer Access Using Size of Source Buffer",
    "Name": "Buffer Access Using Size of Source Buffer",
    "Description": "The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",
    "ExtendedDescription": "When the size of the destination is smaller than the size of the source, a buffer overflow could occur.",
    "Status": "Incomplete"
  },
  {
    "ID": 807,
    "Title": "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
    "Name": "Reliance on Untrusted Inputs in a Security Decision",
    "Description": "The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",
    "ExtendedDescription": "\n\nDevelopers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.\n\n\nWithout sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 820,
    "Title": "CWE-820: Missing Synchronization",
    "Name": "Missing Synchronization",
    "Description": "The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.",
    "ExtendedDescription": "If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",
    "Status": "Incomplete"
  },
  {
    "ID": 821,
    "Title": "CWE-821: Incorrect Synchronization",
    "Name": "Incorrect Synchronization",
    "Description": "The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",
    "ExtendedDescription": "If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",
    "Status": "Incomplete"
  },
  {
    "ID": 822,
    "Title": "CWE-822: Untrusted Pointer Dereference",
    "Name": "Untrusted Pointer Dereference",
    "Description": "The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.",
    "ExtendedDescription": "\n\nAn attacker can supply a pointer for memory locations that the product is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a variable to an unexpected value (since the value will be read from an unexpected memory location).\n\n\nThere are several variants of this weakness, including but not necessarily limited to:\n\n\n  - The untrusted value is directly invoked as a function call.\n\n  - In OS kernels or drivers where there is a boundary between \"userland\" and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example).\n\n  - Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 823,
    "Title": "CWE-823: Use of Out-of-range Pointer Offset",
    "Name": "Use of Out-of-range Pointer Offset",
    "Description": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",
    "ExtendedDescription": "\n\nWhile a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.\n\n\nPrograms may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.\n\n\nIf an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 824,
    "Title": "CWE-824: Access of Uninitialized Pointer",
    "Name": "Access of Uninitialized Pointer",
    "Description": "The product accesses or uses a pointer that has not been initialized.",
    "ExtendedDescription": "\n\nIf the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the product to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks.\n\n\nDepending on memory layout, associated memory management behaviors, and product operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 825,
    "Title": "CWE-825: Expired Pointer Dereference",
    "Name": "Expired Pointer Dereference",
    "Description": "The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.",
    "ExtendedDescription": "When a product releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the product to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.",
    "Status": "Incomplete"
  },
  {
    "ID": 826,
    "Title": "CWE-826: Premature Release of Resource During Expected Lifetime",
    "Name": "Premature Release of Resource During Expected Lifetime",
    "Description": "The product releases a resource that is still intended to be used by itself or another actor.",
    "ExtendedDescription": "\n\nThis weakness focuses on errors in which the product should not release a resource, but performs the release anyway. This is different than a weakness in which the product releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access.\n\n\nWhen a product releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 827,
    "Title": "CWE-827: Improper Control of Document Type Definition",
    "Name": "Improper Control of Document Type Definition",
    "Description": "The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.",
    "ExtendedDescription": "\n\nAs DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.\n\n\nFor example, the SOAP specification prohibits SOAP messages from containing DTDs.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 828,
    "Title": "CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe",
    "Name": "Signal Handler with Functionality that is not Asynchronous-Safe",
    "Description": "The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.",
    "ExtendedDescription": "\n\nThis can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution.\n\n\nSignal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution.\n\n\nThere are several different scenarios that introduce this issue:\n\n\n  - Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant.\n\n  - Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals.\n\n  - The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831).\n\nNote that in some environments or contexts, it might be possible for the signal handler to be interrupted itself.\n\nIf both a signal handler and the normal behavior of the product have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 829,
    "Title": "CWE-829: Inclusion of Functionality from Untrusted Control Sphere",
    "Name": "Inclusion of Functionality from Untrusted Control Sphere",
    "Description": "The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
    "ExtendedDescription": "\n\nWhen including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.\n\n\nThis might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).\n",
    "Status": "Incomplete"
  },
  {
    "ID": 830,
    "Title": "CWE-830: Inclusion of Web Functionality from an Untrusted Source",
    "Name": "Inclusion of Web Functionality from an Untrusted Source",
    "Description": "The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.",
    "ExtendedDescription": "\n\nIncluding third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.\n\n\nEven if the third party is a trusted source, the product may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the product.\n\n\nThis weakness is common in \"mashup\" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=\"http://other.domain.here\">' tags, which causes the code to run in the domain of the product, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.\n\n\nSuch dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 831,
    "Title": "CWE-831: Signal Handler Function Associated with Multiple Signals",
    "Name": "Signal Handler Function Associated with Multiple Signals",
    "Description": "The product defines a function that is used as a handler for more than one signal.",
    "ExtendedDescription": "\n\nWhile sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects.\n\n\nAn attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution.\n\n\nAnother rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 832,
    "Title": "CWE-832: Unlock of a Resource that is not Locked",
    "Name": "Unlock of a Resource that is not Locked",
    "Description": "The product attempts to unlock a resource that is not locked.",
    "ExtendedDescription": "Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).",
    "Status": "Incomplete"
  },
  {
    "ID": 833,
    "Title": "CWE-833: Deadlock",
    "Name": "Deadlock",
    "Description": "The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 834,
    "Title": "CWE-834: Excessive Iteration",
    "Name": "Excessive Iteration",
    "Description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.",
    "ExtendedDescription": "If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the product or its host system; it depends on the amount of resources consumed per iteration.",
    "Status": "Incomplete"
  },
  {
    "ID": 835,
    "Title": "CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')",
    "Name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "Description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "ExtendedDescription": "If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.",
    "Status": "Incomplete"
  },
  {
    "ID": 836,
    "Title": "CWE-836: Use of Password Hash Instead of Password for Authentication",
    "Name": "Use of Password Hash Instead of Password for Authentication",
    "Description": "The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.",
    "ExtendedDescription": "\n\nSome authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.\n\n\nAs a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 837,
    "Title": "CWE-837: Improper Enforcement of a Single, Unique Action",
    "Name": "Improper Enforcement of a Single, Unique Action",
    "Description": "The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.",
    "ExtendedDescription": "In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to \"stuff the ballot box\" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the product.",
    "Status": "Incomplete"
  },
  {
    "ID": 838,
    "Title": "CWE-838: Inappropriate Encoding for Output Context",
    "Name": "Inappropriate Encoding for Output Context",
    "Description": "The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.",
    "ExtendedDescription": "\n\nThis weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.\n\n\nWhile using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.\n\n\nFor example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.\n\n\nWhile web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 839,
    "Title": "CWE-839: Numeric Range Comparison Without Minimum Check",
    "Name": "Numeric Range Comparison Without Minimum Check",
    "Description": "The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.",
    "ExtendedDescription": "\n\nSome products use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption.\n\n\nThe use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 841,
    "Title": "CWE-841: Improper Enforcement of Behavioral Workflow",
    "Name": "Improper Enforcement of Behavioral Workflow",
    "Description": "The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.",
    "ExtendedDescription": "\n\nBy performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the product or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.\n\n\nFor example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the product might still perform the transfer.\n\n\nNote that this is different than CWE-696, which focuses on when the product performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.\n\n\nWorkflow-related behaviors include:\n\n\n  - Steps are performed in the expected order.\n\n  - Required steps are not omitted.\n\n  - Steps are not interrupted.\n\n  - Steps are performed in a timely fashion.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 842,
    "Title": "CWE-842: Placement of User into Incorrect Group",
    "Name": "Placement of User into Incorrect Group",
    "Description": "The product or the administrator places a user into an incorrect group.",
    "ExtendedDescription": "If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.",
    "Status": "Incomplete"
  },
  {
    "ID": 843,
    "Title": "CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')",
    "Name": "Access of Resource Using Incompatible Type ('Type Confusion')",
    "Description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
    "ExtendedDescription": "\n\nWhen the product accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access.\n\n\nWhile this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways.\n\n\nThis weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 862,
    "Title": "CWE-862: Missing Authorization",
    "Name": "Missing Authorization",
    "Description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
    "ExtendedDescription": "\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 863,
    "Title": "CWE-863: Incorrect Authorization",
    "Name": "Incorrect Authorization",
    "Description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "ExtendedDescription": "\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 908,
    "Title": "CWE-908: Use of Uninitialized Resource",
    "Name": "Use of Uninitialized Resource",
    "Description": "The product uses or accesses a resource that has not been initialized.",
    "ExtendedDescription": "When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.",
    "Status": "Incomplete"
  },
  {
    "ID": 909,
    "Title": "CWE-909: Missing Initialization of Resource",
    "Name": "Missing Initialization of Resource",
    "Description": "The product does not initialize a critical resource.",
    "ExtendedDescription": "Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.",
    "Status": "Incomplete"
  },
  {
    "ID": 910,
    "Title": "CWE-910: Use of Expired File Descriptor",
    "Name": "Use of Expired File Descriptor",
    "Description": "The product uses or accesses a file descriptor after it has been closed.",
    "ExtendedDescription": "After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.",
    "Status": "Incomplete"
  },
  {
    "ID": 911,
    "Title": "CWE-911: Improper Update of Reference Count",
    "Name": "Improper Update of Reference Count",
    "Description": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",
    "ExtendedDescription": "Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.",
    "Status": "Incomplete"
  },
  {
    "ID": 912,
    "Title": "CWE-912: Hidden Functionality",
    "Name": "Hidden Functionality",
    "Description": "The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.",
    "ExtendedDescription": "Hidden functionality can take many forms, such as intentionally malicious code, \"Easter Eggs\" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the product's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.",
    "Status": "Incomplete"
  },
  {
    "ID": 913,
    "Title": "CWE-913: Improper Control of Dynamically-Managed Code Resources",
    "Name": "Improper Control of Dynamically-Managed Code Resources",
    "Description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",
    "ExtendedDescription": "Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.",
    "Status": "Incomplete"
  },
  {
    "ID": 914,
    "Title": "CWE-914: Improper Control of Dynamically-Identified Variables",
    "Name": "Improper Control of Dynamically-Identified Variables",
    "Description": "The product does not properly restrict reading from or writing to dynamically-identified variables.",
    "ExtendedDescription": "Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.",
    "Status": "Incomplete"
  },
  {
    "ID": 915,
    "Title": "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes",
    "Name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
    "Description": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",
    "ExtendedDescription": "\n\nIf the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.\n\n\nThis weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 916,
    "Title": "CWE-916: Use of Password Hash With Insufficient Computational Effort",
    "Name": "Use of Password Hash With Insufficient Computational Effort",
    "Description": "The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.",
    "ExtendedDescription": "\n\nMany password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.\n\n\nMany hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.\n\n\nThere are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:\n\n\n  - The amount of CPU time required to compute the hash (\"stretching\")\n\n  - The amount of memory required to compute the hash (\"memory-hard\" operations)\n\n  - Including a random value, along with the password, as input to the hash computation (\"salting\")\n\n  - Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (\"one-way\" hashing)\n\n  - Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (\"collision resistance\")\n\nNote that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.",
    "Status": "Incomplete"
  },
  {
    "ID": 917,
    "Title": "CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
    "Name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
    "Description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
    "ExtendedDescription": "Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.",
    "Status": "Incomplete"
  },
  {
    "ID": 918,
    "Title": "CWE-918: Server-Side Request Forgery (SSRF)",
    "Name": "Server-Side Request Forgery (SSRF)",
    "Description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "ExtendedDescription": "By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.",
    "Status": "Incomplete"
  },
  {
    "ID": 920,
    "Title": "CWE-920: Improper Restriction of Power Consumption",
    "Name": "Improper Restriction of Power Consumption",
    "Description": "The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.",
    "ExtendedDescription": "\n\nIn environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the product itself, and the device might not always be directly attached to a reliable power source. If the product uses too much power too quickly, then this could cause the device (and subsequently, the product) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs.\n\n\nNormal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as:\n\n\n  - Display\n\n  - CPU\n\n  - Disk I/O\n\n  - GPS\n\n  - Sound\n\n  - Microphone\n\n  - USB interface\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 921,
    "Title": "CWE-921: Storage of Sensitive Data in a Mechanism without Access Control",
    "Name": "Storage of Sensitive Data in a Mechanism without Access Control",
    "Description": "The product stores sensitive information in a file system or device that does not have built-in access control.",
    "ExtendedDescription": "\n\nWhile many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.\n\n\nOn Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 922,
    "Title": "CWE-922: Insecure Storage of Sensitive Information",
    "Name": "Insecure Storage of Sensitive Information",
    "Description": "The product stores sensitive information without properly limiting read or write access by unauthorized actors.",
    "ExtendedDescription": "If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.",
    "Status": "Incomplete"
  },
  {
    "ID": 923,
    "Title": "CWE-923: Improper Restriction of Communication Channel to Intended Endpoints",
    "Name": "Improper Restriction of Communication Channel to Intended Endpoints",
    "Description": "The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.",
    "ExtendedDescription": "\n\nAttackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.\n\n\nWhile this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 924,
    "Title": "CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel",
    "Name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel",
    "Description": "The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.",
    "ExtendedDescription": "Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control.",
    "Status": "Incomplete"
  },
  {
    "ID": 925,
    "Title": "CWE-925: Improper Verification of Intent by Broadcast Receiver",
    "Name": "Improper Verification of Intent by Broadcast Receiver",
    "Description": "The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.",
    "ExtendedDescription": "Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.",
    "Status": "Incomplete"
  },
  {
    "ID": 926,
    "Title": "CWE-926: Improper Export of Android Application Components",
    "Name": "Improper Export of Android Application Components",
    "Description": "The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
    "ExtendedDescription": "\n\nThe attacks and consequences of improperly exporting a component may depend on the exported component:\n\n\n  - If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application.\n\n  - If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application.\n\n  - If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 927,
    "Title": "CWE-927: Use of Implicit Intent for Sensitive Communication",
    "Name": "Use of Implicit Intent for Sensitive Communication",
    "Description": "The Android application uses an implicit intent for transmitting sensitive data to other applications.",
    "ExtendedDescription": "\n\nSince an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.\n\n\nOrdered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.\n\n\nSticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.\n\n\nIn addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 939,
    "Title": "CWE-939: Improper Authorization in Handler for Custom URL Scheme",
    "Name": "Improper Authorization in Handler for Custom URL Scheme",
    "Description": "The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",
    "ExtendedDescription": "Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.",
    "Status": "Incomplete"
  },
  {
    "ID": 940,
    "Title": "CWE-940: Improper Verification of Source of a Communication Channel",
    "Name": "Improper Verification of Source of a Communication Channel",
    "Description": "The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.",
    "ExtendedDescription": "When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.",
    "Status": "Incomplete"
  },
  {
    "ID": 941,
    "Title": "CWE-941: Incorrectly Specified Destination in a Communication Channel",
    "Name": "Incorrectly Specified Destination in a Communication Channel",
    "Description": "The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",
    "ExtendedDescription": "\n\nAttackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.\n\n\nThere are at least two distinct weaknesses that can cause the product to communicate with an unintended destination:\n\n\n  - If the product allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.\n\n  - If the product incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the product might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a \"sticky broadcast\" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 942,
    "Title": "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
    "Name": "Permissive Cross-domain Policy with Untrusted Domains",
    "Description": "The product uses a cross-domain policy file that includes domains that should not be trusted.",
    "ExtendedDescription": "\n\nA cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.\n\n\nTherefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.\n\n\nAn overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.\n\n\nIn many cases, the attack can be launched without the victim even being aware of it.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 943,
    "Title": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
    "Name": "Improper Neutralization of Special Elements in Data Query Logic",
    "Description": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
    "ExtendedDescription": "\n\nDepending on the capabilities of the query language, an attacker could inject additional logic into the query to:\n\n\n  - Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated\n\n  - Append additional commands to the query\n\n  - Return more entities than intended\n\n  - Return fewer entities than intended\n\n  - Cause entities to be sorted in an unexpected way\n\nThe ability to execute additional commands or change which entities are returned has obvious risks. But when the product logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.\n\nWhile this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1004,
    "Title": "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
    "Name": "Sensitive Cookie Without 'HttpOnly' Flag",
    "Description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
    "ExtendedDescription": "The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.",
    "Status": "Incomplete"
  },
  {
    "ID": 1007,
    "Title": "CWE-1007: Insufficient Visual Distinction of Homoglyphs Presented to User",
    "Name": "Insufficient Visual Distinction of Homoglyphs Presented to User",
    "Description": "The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",
    "ExtendedDescription": "\n\nSome glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase \"l\" (ell) and uppercase \"I\" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter \"A\" and the Greek capital letter \"Α\" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark \"À\" and its equivalent \"Á\" with the acute accent.\n\n\nAdversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1021,
    "Title": "CWE-1021: Improper Restriction of Rendered UI Layers or Frames",
    "Name": "Improper Restriction of Rendered UI Layers or Frames",
    "Description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",
    "ExtendedDescription": "A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.",
    "Status": "Incomplete"
  },
  {
    "ID": 1022,
    "Title": "CWE-1022: Use of Web Link to Untrusted Target with window.opener Access",
    "Name": "Use of Web Link to Untrusted Target with window.opener Access",
    "Description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.",
    "ExtendedDescription": "When a user clicks a link to an external site (\"target\"), the target=\"_blank\" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link. If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin. An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.",
    "Status": "Incomplete"
  },
  {
    "ID": 1023,
    "Title": "CWE-1023: Incomplete Comparison with Missing Factors",
    "Name": "Incomplete Comparison with Missing Factors",
    "Description": "The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.",
    "ExtendedDescription": "An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.",
    "Status": "Incomplete"
  },
  {
    "ID": 1024,
    "Title": "CWE-1024: Comparison of Incompatible Types",
    "Name": "Comparison of Incompatible Types",
    "Description": "The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.",
    "ExtendedDescription": "In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed. In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string \"123\" might be converted to a number type. See examples.",
    "Status": "Incomplete"
  },
  {
    "ID": 1025,
    "Title": "CWE-1025: Comparison Using Wrong Factors",
    "Name": "Comparison Using Wrong Factors",
    "Description": "The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.",
    "ExtendedDescription": "This can lead to incorrect results and resultant weaknesses. For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two \"equal\" objects to be considered unequal.",
    "Status": "Incomplete"
  },
  {
    "ID": 1037,
    "Title": "CWE-1037: Processor Optimization Removal or Modification of Security-critical Code",
    "Name": "Processor Optimization Removal or Modification of Security-critical Code",
    "Description": "The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 1038,
    "Title": "CWE-1038: Insecure Automated Optimizations",
    "Name": "Insecure Automated Optimizations",
    "Description": "The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 1039,
    "Title": "CWE-1039: Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations",
    "Name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations",
    "Description": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",
    "ExtendedDescription": "\n\nWhen techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision. If the automated mechanism is not developed or \"trained\" with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification.\n\n\nTargeted technologies include, but are not necessarily limited to:\n\n\n  - automated speech recognition\n\n  - automated image recognition\n\nFor example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action.",
    "Status": "Incomplete"
  },
  {
    "ID": 1041,
    "Title": "CWE-1041: Use of Redundant Code",
    "Name": "Use of Redundant Code",
    "Description": "The product has multiple functions, methods, procedures, macros, etc. that\n\t\t\t\t\tcontain the same code.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1042,
    "Title": "CWE-1042: Static Member Data Element outside of a Singleton Class Element",
    "Name": "Static Member Data Element outside of a Singleton Class Element",
    "Description": "The code contains a member element that is declared as static (but not final), in which\n\t\t\t\t\tits parent class element \n\t\t\t\t\tis not a singleton class - that is, a class element that can be used only once in\n\t\t\t\t\tthe 'to' association of a Create action.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1043,
    "Title": "CWE-1043: Data Element Aggregating an Excessively Large Number of Non-Primitive Elements",
    "Name": "Data Element Aggregating an Excessively Large Number of Non-Primitive Elements",
    "Description": "The product uses a data element that has an excessively large\n\t\t\t\t\tnumber of sub-elements with non-primitive data types such as structures or aggregated objects.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"excessively large\" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1044,
    "Title": "CWE-1044: Architecture with Number of Horizontal Layers Outside of Expected Range",
    "Name": "Architecture with Number of Horizontal Layers Outside of Expected Range",
    "Description": "The product's architecture contains too many - or too few -\n\t\t\t\t\thorizontal layers.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"expected range\" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1045,
    "Title": "CWE-1045: Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor",
    "Name": "Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor",
    "Description": "A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, since the child might not perform essential destruction operations. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1046,
    "Title": "CWE-1046: Creation of Immutable Text Using String Concatenation",
    "Name": "Creation of Immutable Text Using String Concatenation",
    "Description": "The product creates an immutable text string using string concatenation operations.",
    "ExtendedDescription": "\n\nWhen building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1047,
    "Title": "CWE-1047: Modules with Circular Dependencies",
    "Name": "Modules with Circular Dependencies",
    "Description": "The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",
    "ExtendedDescription": "\n\nAs an example, with Java, this weakness might indicate cycles between packages.\n\n\nThis issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1048,
    "Title": "CWE-1048: Invokable Control Element with Large Number of Outward Calls",
    "Name": "Invokable Control Element with Large Number of Outward Calls",
    "Description": "The code contains callable control elements that\n         contain an excessively large number of references to other\n         application objects external to the context of the callable,\n         i.e. a Fan-Out value that is excessively large.",
    "ExtendedDescription": "\n\nWhile the interpretation of \"excessively large Fan-Out value\" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1049,
    "Title": "CWE-1049: Excessive Data Query Operations in a Large Data Table",
    "Name": "Excessive Data Query Operations in a Large Data Table",
    "Description": "The product performs a data query with a large number of joins\n\t\t\t\t\tand sub-queries on a large data table.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large data table\" and \"large number of joins or sub-queries\" may vary for each product or developer, CISQ recommends a default of 1 million rows for a \"large\" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1050,
    "Title": "CWE-1050: Excessive Platform Resource Consumption within a Loop",
    "Name": "Excessive Platform Resource Consumption within a Loop",
    "Description": "The product has a loop body or loop condition that contains a control element that directly or\n\t\t\t\t\tindirectly consumes platform resources, e.g. messaging, sessions, locks, or file\n\t\t\t\t\tdescriptors.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1051,
    "Title": "CWE-1051: Initialization with Hard-Coded Network Resource Configuration Data",
    "Name": "Initialization with Hard-Coded Network Resource Configuration Data",
    "Description": "The product initializes data using hard-coded values that act as network resource identifiers.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1052,
    "Title": "CWE-1052: Excessive Use of Hard-Coded Literals in Initialization",
    "Name": "Excessive Use of Hard-Coded Literals in Initialization",
    "Description": "The product initializes a data element using a hard-coded\n\t\t\t\t\tliteral that is not a simple integer or static constant element.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1053,
    "Title": "CWE-1053: Missing Documentation for Design",
    "Name": "Missing Documentation for Design",
    "Description": "The product does not have documentation that represents how it is designed.",
    "ExtendedDescription": "\n\nThis issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1054,
    "Title": "CWE-1054: Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer",
    "Name": "Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer",
    "Description": "The code at one architectural layer invokes code that resides\n\t\t\t\t\tat a deeper layer than the adjacent layer, i.e., the invocation skips at least one\n\t\t\t\t\tlayer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1055,
    "Title": "CWE-1055: Multiple Inheritance from Concrete Classes",
    "Name": "Multiple Inheritance from Concrete Classes",
    "Description": "The product contains a class with inheritance from more than\n\t\t\t\t\tone concrete class.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1056,
    "Title": "CWE-1056: Invokable Control Element with Variadic Parameters",
    "Name": "Invokable Control Element with Variadic Parameters",
    "Description": "A named-callable or method control element has a signature that\n\t\t\t\t\tsupports a variable (variadic) number of parameters or arguments.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n\n\nWith variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1057,
    "Title": "CWE-1057: Data Access Operations Outside of Expected Data Manager Component",
    "Name": "Data Access Operations Outside of Expected Data Manager Component",
    "Description": "The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1058,
    "Title": "CWE-1058: Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
    "Name": "Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
    "Description": "The code contains a function or method that\n\t\t operates in a multi-threaded environment but owns an unsafe non-final\n\t\t                     static storable or member data element.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1059,
    "Title": "CWE-1059: Insufficient Technical Documentation",
    "Name": "Insufficient Technical Documentation",
    "Description": "The product does not contain sufficient\n         technical or engineering documentation (whether on paper or\n         in electronic form) that contains descriptions of all the\n         relevant software/hardware elements of the product, such as\n         its usage, structure, architectural components, interfaces, design, implementation,\n         configuration, operation, etc.",
    "ExtendedDescription": "\n\nWhen technical documentation is limited or lacking, products are more difficult to maintain. This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.\n\n\nWhen using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations.\n\n\nWith respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1060,
    "Title": "CWE-1060: Excessive Number of Inefficient Server-Side Data Accesses",
    "Name": "Excessive Number of Inefficient Server-Side Data Accesses",
    "Description": "The product performs too many data queries without using efficient data processing functionality such as stored procedures.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly due to computational expense. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"too many data queries\" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1061,
    "Title": "CWE-1061: Insufficient Encapsulation",
    "Name": "Insufficient Encapsulation",
    "Description": "The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1062,
    "Title": "CWE-1062: Parent Class with References to Child Class",
    "Name": "Parent Class with References to Child Class",
    "Description": "The code has a parent class that contains references to a child class, its methods, or its members.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1063,
    "Title": "CWE-1063: Creation of Class Instance within a Static Code Block",
    "Name": "Creation of Class Instance within a Static Code Block",
    "Description": "A static code block creates an instance of a class.",
    "ExtendedDescription": "\n\nThis pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static.\n\n\nThis issue can make the product perform more slowly by performing initialization before it is needed. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1064,
    "Title": "CWE-1064: Invokable Control Element with Signature Containing an Excessive Number of Parameters",
    "Name": "Invokable Control Element with Signature Containing an Excessive Number of Parameters",
    "Description": "The product contains a function, subroutine, or method whose signature has an unnecessarily large number of\n\t\t\t\t\tparameters/arguments.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"large number of parameters.\" may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1065,
    "Title": "CWE-1065: Runtime Resource Management Control Element in a Component Built to Run on Application Servers",
    "Name": "Runtime Resource Management Control Element in a Component Built to Run on Application Servers",
    "Description": "The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1066,
    "Title": "CWE-1066: Missing Serialization Control Element",
    "Name": "Missing Serialization Control Element",
    "Description": "The product contains a serializable data element that does not\n\t\t\t\t\thave an associated serialization method.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. by triggering an exception. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n\n\nAs examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1067,
    "Title": "CWE-1067: Excessive Execution of Sequential Searches of Data Resource",
    "Name": "Excessive Execution of Sequential Searches of Data Resource",
    "Description": "The product contains a data query against an SQL table or view\n\t\t\t\t\tthat is configured in a way that does not utilize an index and may cause\n\t\t\t\t\tsequential searches to be performed.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1068,
    "Title": "CWE-1068: Inconsistency Between Implementation and Documented Design",
    "Name": "Inconsistency Between Implementation and Documented Design",
    "Description": "The implementation of the product is not consistent with the\n\t\t\t\t\tdesign as described within the relevant documentation.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1069,
    "Title": "CWE-1069: Empty Exception Block",
    "Name": "Empty Exception Block",
    "Description": "An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.",
    "ExtendedDescription": "\n\nWhen an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1070,
    "Title": "CWE-1070: Serializable Data Element Containing non-Serializable Item Elements",
    "Name": "Serializable Data Element Containing non-Serializable Item Elements",
    "Description": "The product contains a serializable, storable data element such as a field or member,\n\t\t\t\t\tbut the data element contains member elements that are not\n\t\t\t\t\tserializable.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n\n\nAs examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1071,
    "Title": "CWE-1071: Empty Code Block",
    "Name": "Empty Code Block",
    "Description": "The source code contains a block that does not contain any code, i.e., the block is empty.",
    "ExtendedDescription": "\n\nEmpty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc. While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc. For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1072,
    "Title": "CWE-1072: Data Resource Access without Use of Connection Pooling",
    "Name": "Data Resource Access without Use of Connection Pooling",
    "Description": "The product accesses a data resource through a database without using a\n\t\t\t\t\tconnection pooling capability.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1073,
    "Title": "CWE-1073: Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
    "Name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
    "Description": "The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large number of data accesses/queries\" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1074,
    "Title": "CWE-1074: Class with Excessively Deep Inheritance",
    "Name": "Class with Excessively Deep Inheritance",
    "Description": "A class has an inheritance level that is too high, i.e., it\n\t\t\t\t\thas a large number of parent classes.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"large number of parent classes\" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1075,
    "Title": "CWE-1075: Unconditional Control Flow Transfer outside of Switch Block",
    "Name": "Unconditional Control Flow Transfer outside of Switch Block",
    "Description": "The product performs unconditional control transfer (such as a\n\t\t\t\t\t\"goto\") in code outside of a branching structure such as a switch\n\t\t\t\t\tblock.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1076,
    "Title": "CWE-1076: Insufficient Adherence to Expected Conventions",
    "Name": "Insufficient Adherence to Expected Conventions",
    "Description": "The product's architecture, source code, design, documentation,\n\t\t\t\t\tor other artifact does not follow required conventions.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1077,
    "Title": "CWE-1077: Floating Point Comparison with Incorrect Operator",
    "Name": "Floating Point Comparison with Incorrect Operator",
    "Description": "The code performs a comparison such as an\n        equality test between two float (floating point) values, but\n        it uses comparison operators that do not account for the\n        possibility of loss of precision.",
    "ExtendedDescription": "\n\nNumeric calculation using floating point values can generate imprecise results because of rounding errors. As a result, two different calculations might generate numbers that are mathematically equal, but have slightly different bit representations that do not translate to the same mathematically-equal values. As a result, an equality test or other comparison might produce unexpected results.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1078,
    "Title": "CWE-1078: Inappropriate Source Code Style or Formatting",
    "Name": "Inappropriate Source Code Style or Formatting",
    "Description": "The source code does not follow\n\t\t\t\tdesired style or formatting for indentation, white\n\t\t\t\tspace, comments, etc.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 1079,
    "Title": "CWE-1079: Parent Class without Virtual Destructor Method",
    "Name": "Parent Class without Virtual Destructor Method",
    "Description": "A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably due to undefined or unexpected behaviors. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1080,
    "Title": "CWE-1080: Source Code File with Excessive Number of Lines of Code",
    "Name": "Source Code File with Excessive Number of Lines of Code",
    "Description": "A source code file has too many lines of\n\t\t\t\t\tcode.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"too many lines of code\" may vary for each product or developer, CISQ recommends a default threshold value of 1000.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1082,
    "Title": "CWE-1082: Class Instance Self Destruction Control Element",
    "Name": "Class Instance Self Destruction Control Element",
    "Description": "The code contains a class instance that calls the method or function to delete or destroy itself.",
    "ExtendedDescription": "\n\nFor example, in C++, \"delete this\" will cause the object to delete itself.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1083,
    "Title": "CWE-1083: Data Access from Outside Expected Data Manager Component",
    "Name": "Data Access from Outside Expected Data Manager Component",
    "Description": "The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.",
    "ExtendedDescription": "\n\nWhen the product has a data access component, the design may be intended to handle all data access operations through that component. If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1084,
    "Title": "CWE-1084: Invokable Control Element with Excessive File or Data Access Operations",
    "Name": "Invokable Control Element with Excessive File or Data Access Operations",
    "Description": "A function or method contains too many\n\t\t\t\t\toperations that utilize a data manager or file resource.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"too many operations\" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1085,
    "Title": "CWE-1085: Invokable Control Element with Excessive Volume of Commented-out Code",
    "Name": "Invokable Control Element with Excessive Volume of Commented-out Code",
    "Description": "A function, method, procedure, etc. contains an excessive amount of code that has been\n\t\t\t\t\tcommented out within its body.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"excessive volume\" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1086,
    "Title": "CWE-1086: Class with Excessive Number of Child Classes",
    "Name": "Class with Excessive Number of Child Classes",
    "Description": "A class contains an unnecessarily large number of\n\t\t\t\t\tchildren.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"large number of children\" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1087,
    "Title": "CWE-1087: Class with Virtual Method without a Virtual Destructor",
    "Name": "Class with Virtual Method without a Virtual Destructor",
    "Description": "A class contains a virtual method, but the method does not have an associated virtual destructor.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1088,
    "Title": "CWE-1088: Synchronous Access of Remote Resource without Timeout",
    "Name": "Synchronous Access of Remote Resource without Timeout",
    "Description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, since an outage for the remote resource can cause the product to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1089,
    "Title": "CWE-1089: Large Data Table with Excessive Number of Indices",
    "Name": "Large Data Table with Excessive Number of Indices",
    "Description": "The product uses a large data table that contains an excessively large number of\n\t\t\t\t\tindices.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large data table\" and \"excessively large number of indices\" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a \"large\" table and a default threshold of 3 indices.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1090,
    "Title": "CWE-1090: Method Containing Access of a Member Element from Another Class",
    "Name": "Method Containing Access of a Member Element from Another Class",
    "Description": "A method for a class performs an operation that directly\n\t\t\t\t\taccesses a member element from another class.",
    "ExtendedDescription": "\n\nThis issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1091,
    "Title": "CWE-1091: Use of Object without Invoking Destructor Method",
    "Name": "Use of Object without Invoking Destructor Method",
    "Description": "The product contains a method that accesses an object but does not later invoke\n\t\t\t\t\tthe element's associated finalize/destructor method.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1092,
    "Title": "CWE-1092: Use of Same Invokable Control Element in Multiple Architectural Layers",
    "Name": "Use of Same Invokable Control Element in Multiple Architectural Layers",
    "Description": "The product uses the same control element across multiple\n\t\t\t\t\tarchitectural layers.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1093,
    "Title": "CWE-1093: Excessively Complex Data Representation",
    "Name": "Excessively Complex Data Representation",
    "Description": "The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1094,
    "Title": "CWE-1094: Excessive Index Range Scan for a Data Resource",
    "Name": "Excessive Index Range Scan for a Data Resource",
    "Description": "The product contains an index range scan for a large data table,\n\t\t\t\t\tbut the scan can cover a large number of rows.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large data table\" and \"excessive index range\" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1095,
    "Title": "CWE-1095: Loop Condition Value Update within the Loop",
    "Name": "Loop Condition Value Update within the Loop",
    "Description": "The product uses a loop with a control flow condition based on\n\t\t\t\t\ta value that is updated within the body of the loop.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1096,
    "Title": "CWE-1096: Singleton Class Instance Creation without Proper Locking or Synchronization",
    "Name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
    "Description": "The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1097,
    "Title": "CWE-1097: Persistent Storable Data Element without Associated Comparison Control Element",
    "Name": "Persistent Storable Data Element without Associated Comparison Control Element",
    "Description": "The product uses a storable data element that does not have\n\t\t\t\t\tall of the associated functions or methods that are necessary to support\n\t\t\t\t\tcomparison.",
    "ExtendedDescription": "\n\nFor example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined.\n\n\nThis issue can prevent the product from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1098,
    "Title": "CWE-1098: Data Element containing Pointer Item without Proper Copy Control Element",
    "Name": "Data Element containing Pointer Item without Proper Copy Control Element",
    "Description": "The code contains a data element with a pointer that does not have an associated copy or constructor method.",
    "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1099,
    "Title": "CWE-1099: Inconsistent Naming Conventions for Identifiers",
    "Name": "Inconsistent Naming Conventions for Identifiers",
    "Description": "The product's code, documentation, or other artifacts do not\n\t\t\t\t\tconsistently use the same naming conventions for variables, callables, groups of\n\t\t\t\t\trelated callables, I/O capabilities, data types, file names, or similar types of\n\t\t\t\t\telements.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1100,
    "Title": "CWE-1100: Insufficient Isolation of System-Dependent Functions",
    "Name": "Insufficient Isolation of System-Dependent Functions",
    "Description": "The product or code does not isolate system-dependent\n\t\t\t\t\tfunctionality into separate standalone modules.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1101,
    "Title": "CWE-1101: Reliance on Runtime Component in Generated Code",
    "Name": "Reliance on Runtime Component in Generated Code",
    "Description": "The product uses automatically-generated code that cannot be\n\t\t\t\t\texecuted without a specific runtime support component.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1102,
    "Title": "CWE-1102: Reliance on Machine-Dependent Data Representation",
    "Name": "Reliance on Machine-Dependent Data Representation",
    "Description": "The code uses a data representation that relies on low-level\n\t\t\t\t\tdata representation or constructs that may vary across different processors,\n\t\t\t\t\tphysical machines, OSes, or other physical components.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1103,
    "Title": "CWE-1103: Use of Platform-Dependent Third Party Components",
    "Name": "Use of Platform-Dependent Third Party Components",
    "Description": "The product relies on third-party components that do\n\t\t\t\t\tnot provide equivalent functionality across all desirable\n\t\t\t\t\tplatforms.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1104,
    "Title": "CWE-1104: Use of Unmaintained Third Party Components",
    "Name": "Use of Unmaintained Third Party Components",
    "Description": "The product relies on third-party components that are not\n\t\t\t\t\tactively supported or maintained by the original developer or a trusted proxy\n\t\t\t\t\tfor the original developer.",
    "ExtendedDescription": "\n\nReliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1105,
    "Title": "CWE-1105: Insufficient Encapsulation of Machine-Dependent Functionality",
    "Name": "Insufficient Encapsulation of Machine-Dependent Functionality",
    "Description": "The product or code uses machine-dependent functionality, but\n\t\t\t\t\tit does not sufficiently encapsulate or isolate this functionality from\n\t\t\t\t\tthe rest of the code.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1106,
    "Title": "CWE-1106: Insufficient Use of Symbolic Constants",
    "Name": "Insufficient Use of Symbolic Constants",
    "Description": "The source code uses literal constants that may need to change\n\t\t\t\t\tor evolve over time, instead of using symbolic constants.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1107,
    "Title": "CWE-1107: Insufficient Isolation of Symbolic Constant Definitions",
    "Name": "Insufficient Isolation of Symbolic Constant Definitions",
    "Description": "The source code uses symbolic constants, but it does not\n\t\t\t\t\tsufficiently place the definitions of these constants into a more centralized or\n\t\t\t\t\tisolated location.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1108,
    "Title": "CWE-1108: Excessive Reliance on Global Variables",
    "Name": "Excessive Reliance on Global Variables",
    "Description": "The code is structured in a way that relies too much on using\n\t\t\t\t\tor setting global variables throughout various points in the code, instead of\n\t\t\t\t\tpreserving the associated information in a narrower, more local\n\t\t\t\t\tcontext.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1109,
    "Title": "CWE-1109: Use of Same Variable for Multiple Purposes",
    "Name": "Use of Same Variable for Multiple Purposes",
    "Description": "The code contains a callable, block, or other code element in\n\t\t\t\t\twhich the same variable is used to control more than one unique task or store\n\t\t\t\t\tmore than one instance of data.",
    "ExtendedDescription": "\n\nUse of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1110,
    "Title": "CWE-1110: Incomplete Design Documentation",
    "Name": "Incomplete Design Documentation",
    "Description": "The product's design documentation does not adequately describe\n\t\t\t\t\tcontrol flow, data flow, system initialization, relationships between tasks,\n\t\t\t\t\tcomponents, rationales, or other important aspects of the\n\t\t\t\t\tdesign.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 1111,
    "Title": "CWE-1111: Incomplete I/O Documentation",
    "Name": "Incomplete I/O Documentation",
    "Description": "The product's documentation does not adequately define inputs,\n\t\t\t\t\toutputs, or system/software interfaces.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  },
  {
    "ID": 1112,
    "Title": "CWE-1112: Incomplete Documentation of Program Execution",
    "Name": "Incomplete Documentation of Program Execution",
    "Description": "The document does not fully define all mechanisms that are used\n\t\t\t\t\tto control or influence how product-specific programs are\n\t\t\t\t\texecuted.",
    "ExtendedDescription": "\n\nThis includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1113,
    "Title": "CWE-1113: Inappropriate Comment Style",
    "Name": "Inappropriate Comment Style",
    "Description": "The source code uses comment styles or formats that are\n\t\t\t\t\tinconsistent or do not follow expected standards for the\n\t\t\t\t\tproduct.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1114,
    "Title": "CWE-1114: Inappropriate Whitespace Style",
    "Name": "Inappropriate Whitespace Style",
    "Description": "The source code contains whitespace that is inconsistent across\n\t\t\t\t\tthe code or does not follow expected standards for the\n\t\t\t\t\tproduct.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1115,
    "Title": "CWE-1115: Source Code Element without Standard Prologue",
    "Name": "Source Code Element without Standard Prologue",
    "Description": "The source code contains elements such as source files \n\t\t\t\t\tthat do not consistently provide a prologue or header that has been\n\t\t\t\t\tstandardized for the project.",
    "ExtendedDescription": "\n\nThe lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.\n\n\nThis issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1116,
    "Title": "CWE-1116: Inaccurate Comments",
    "Name": "Inaccurate Comments",
    "Description": "The source code contains comments that do not accurately\n\t\t\t\t\tdescribe or explain aspects of the portion of the code with which the comment is\n\t\t\t\t\tassociated.",
    "ExtendedDescription": "\n\nWhen a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1117,
    "Title": "CWE-1117: Callable with Insufficient Behavioral Summary",
    "Name": "Callable with Insufficient Behavioral Summary",
    "Description": "The code contains a function or method whose signature and/or associated\n\t\t\t\t\tinline documentation does not sufficiently describe the callable's inputs, outputs,\n\t\t\t\t\tside effects, assumptions, or return codes.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1118,
    "Title": "CWE-1118: Insufficient Documentation of Error Handling Techniques",
    "Name": "Insufficient Documentation of Error Handling Techniques",
    "Description": "The documentation does not sufficiently describe the techniques\n\t\t\t\t\tthat are used for error handling, exception processing, or similar\n\t\t\t\t\tmechanisms.",
    "ExtendedDescription": "\n\nDocumentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1119,
    "Title": "CWE-1119: Excessive Use of Unconditional Branching",
    "Name": "Excessive Use of Unconditional Branching",
    "Description": "The code uses too many unconditional branches (such as\n\t\t\t\t\t\"goto\").",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1120,
    "Title": "CWE-1120: Excessive Code Complexity",
    "Name": "Excessive Code Complexity",
    "Description": "The code is too complex, as calculated using a well-defined,\n\t\t\t\t\tquantitative measure.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1121,
    "Title": "CWE-1121: Excessive McCabe Cyclomatic Complexity",
    "Name": "Excessive McCabe Cyclomatic Complexity",
    "Description": "The code contains McCabe cyclomatic complexity that exceeds a\n\tdesirable maximum.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1122,
    "Title": "CWE-1122: Excessive Halstead Complexity",
    "Name": "Excessive Halstead Complexity",
    "Description": "The code is structured in a way that a Halstead complexity\n\t\t\t\t\tmeasure exceeds a desirable maximum.",
    "ExtendedDescription": "\n\nA variety of Halstead complexity measures exist, such as program vocabulary size or volume.\n\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1123,
    "Title": "CWE-1123: Excessive Use of Self-Modifying Code",
    "Name": "Excessive Use of Self-Modifying Code",
    "Description": "The product uses too much self-modifying\n\t\t\t\t\tcode.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1124,
    "Title": "CWE-1124: Excessively Deep Nesting",
    "Name": "Excessively Deep Nesting",
    "Description": "The code contains a callable or other code grouping in which\n\t\t\t\t\tthe nesting / branching is too deep.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1125,
    "Title": "CWE-1125: Excessive Attack Surface",
    "Name": "Excessive Attack Surface",
    "Description": "The product has an attack surface whose quantitative\n\t\t\t\t\tmeasurement exceeds a desirable maximum.",
    "ExtendedDescription": "\n\nOriginating from software security, an \"attack surface\" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1126,
    "Title": "CWE-1126: Declaration of Variable with Unnecessarily Wide Scope",
    "Name": "Declaration of Variable with Unnecessarily Wide Scope",
    "Description": "The source code declares a variable in one scope, but the\n\t\t\t\t\tvariable is only used within a narrower scope.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1127,
    "Title": "CWE-1127: Compilation with Insufficient Warnings or Errors",
    "Name": "Compilation with Insufficient Warnings or Errors",
    "Description": "The code is compiled without sufficient warnings enabled, which\n\t\t\t\t\tmay prevent the detection of subtle bugs or quality\n\t\t\t\t\tissues.",
    "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1164,
    "Title": "CWE-1164: Irrelevant Code",
    "Name": "Irrelevant Code",
    "Description": "The product contains code that is not essential for execution,\n\t     i.e. makes no state changes and has no side effects that alter\n\t     data or control flow, such that removal of the code would have no impact\n\t     to functionality or correctness.",
    "ExtendedDescription": "\n\nIrrelevant code could include dead code, initialization that is not used, empty blocks, code that could be entirely removed due to optimization, etc.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1173,
    "Title": "CWE-1173: Improper Use of Validation Framework",
    "Name": "Improper Use of Validation Framework",
    "Description": "The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",
    "ExtendedDescription": "Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",
    "Status": "Draft"
  },
  {
    "ID": 1174,
    "Title": "CWE-1174: ASP.NET Misconfiguration: Improper Model Validation",
    "Name": "ASP.NET Misconfiguration: Improper Model Validation",
    "Description": "The ASP.NET application does not use, or incorrectly uses, the model validation framework.",
    "ExtendedDescription": null,
    "Status": "Draft"
  },
  {
    "ID": 1176,
    "Title": "CWE-1176: Inefficient CPU Computation",
    "Name": "Inefficient CPU Computation",
    "Description": "The product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.",
    "ExtendedDescription": "\n\nThis issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1177,
    "Title": "CWE-1177: Use of Prohibited Code",
    "Name": "Use of Prohibited Code",
    "Description": "The product uses a function, library, or third party component\n\t     that has been explicitly prohibited, whether by the developer or\n\t     the customer.",
    "ExtendedDescription": "\n\nThe developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.\n\n\nTo reduce risk of vulnerabilities, the developer might maintain a list of \"banned\" functions that programmers must avoid using because the functions are difficult or impossible to use securely. This issue can also make the product more costly and difficult to maintain.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1187,
    "Title": "CWE-1187: DEPRECATED: Use of Uninitialized Resource",
    "Name": "DEPRECATED: Use of Uninitialized Resource",
    "Description": "This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 1188,
    "Title": "CWE-1188: Initialization of a Resource with an Insecure Default",
    "Name": "Initialization of a Resource with an Insecure Default",
    "Description": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",
    "ExtendedDescription": "\n\nDevelopers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1189,
    "Title": "CWE-1189: Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
    "Name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
    "Description": "The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.",
    "ExtendedDescription": "\n\nA System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.\n",
    "Status": "Stable"
  },
  {
    "ID": 1190,
    "Title": "CWE-1190: DMA Device Enabled Too Early in Boot Phase",
    "Name": "DMA Device Enabled Too Early in Boot Phase",
    "Description": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",
    "ExtendedDescription": "\n\nDMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected.\n",
    "Status": "Draft"
  },
  {
    "ID": 1191,
    "Title": "CWE-1191: On-Chip Debug and Test Interface With Improper Access Control",
    "Name": "On-Chip Debug and Test Interface With Improper Access Control",
    "Description": "The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.",
    "ExtendedDescription": "\n\nA device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.\n\n\nIf authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.\n\n\nSometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.\n",
    "Status": "Stable"
  },
  {
    "ID": 1192,
    "Title": "CWE-1192: Improper Identifier for IP Block used in System-On-Chip (SOC)",
    "Name": "Improper Identifier for IP Block used in System-On-Chip (SOC)",
    "Description": "The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",
    "ExtendedDescription": "\n\nA System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else.\n\n\nThere are several variants of this weakness:\n\n\n  - A \"missing\" identifier is when the SoC does not define any mechanism to uniquely identify the IP.\n\n  - An \"insufficient\" identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.\n\n  - A \"misconfigured\" mechanism occurs when a mechanism is available but not implemented correctly.\n\n  - An \"ignored\" identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely.\n\n",
    "Status": "Draft"
  },
  {
    "ID": 1193,
    "Title": "CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
    "Name": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
    "Description": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.",
    "ExtendedDescription": "\n\n After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware.\n",
    "Status": "Draft"
  },
  {
    "ID": 1204,
    "Title": "CWE-1204: Generation of Weak Initialization Vector (IV)",
    "Name": "Generation of Weak Initialization Vector (IV)",
    "Description": "The product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t",
    "ExtendedDescription": "By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.",
    "Status": "Incomplete"
  },
  {
    "ID": 1209,
    "Title": "CWE-1209: Failure to Disable Reserved Bits",
    "Name": "Failure to Disable Reserved Bits",
    "Description": "The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",
    "ExtendedDescription": "\n\nReserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1220,
    "Title": "CWE-1220: Insufficient Granularity of Access Control",
    "Name": "Insufficient Granularity of Access Control",
    "Description": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection.\n\n\nA common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1221,
    "Title": "CWE-1221: Incorrect Register Defaults or Module Parameters",
    "Name": "Incorrect Register Defaults or Module Parameters",
    "Description": "Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.\n\n\nThe system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1222,
    "Title": "CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks",
    "Name": "Insufficient Granularity of Address Regions Protected by Register Locks",
    "Description": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later.\n\n\nA problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1223,
    "Title": "CWE-1223: Race Condition for Write-Once Attributes",
    "Name": "Race Condition for Write-Once Attributes",
    "Description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nImplementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1224,
    "Title": "CWE-1224: Improper Restriction of Write-Once Bit Fields",
    "Name": "Improper Restriction of Write-Once Bit Fields",
    "Description": "The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or \"sticky.\" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nFailure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value \"1\", wherein they would work as \"write-1-once\" and not \"write-once\".\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1229,
    "Title": "CWE-1229: Creation of Emergent Resource",
    "Name": "Creation of Emergent Resource",
    "Description": "The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",
    "ExtendedDescription": "\n\nA product is only expected to behave in a way that was specifically intended by the developer. Resource allocation and management is expected to be performed explicitly by the associated code. However, in systems with complex behavior, the product might indirectly produce new kinds of resources that were never intended in the original design. For example, a covert channel is a resource that was never explicitly intended by the developer, but it is useful to attackers. \"Parasitic computing,\" while not necessarily malicious in nature, effectively tricks a product into performing unintended computations on behalf of another party.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1230,
    "Title": "CWE-1230: Exposure of Sensitive Information Through Metadata",
    "Name": "Exposure of Sensitive Information Through Metadata",
    "Description": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",
    "ExtendedDescription": "\n\nDevelopers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1231,
    "Title": "CWE-1231: Improper Prevention of Lock Bit Modification",
    "Name": "Improper Prevention of Lock Bit Modification",
    "Description": "The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.",
    "ExtendedDescription": "\n\nIn integrated circuits and hardware intellectual property (IP) cores, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification.\n\n\nThis behavior is commonly implemented using a trusted lock bit. When set, the lock bit disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after it has been set. Attackers might be able to unlock the system and features that the bit is intended to protect.\n",
    "Status": "Stable"
  },
  {
    "ID": 1232,
    "Title": "CWE-1232: Improper Lock Behavior After Power State Transition",
    "Name": "Improper Lock Behavior After Power State Transition",
    "Description": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.",
    "ExtendedDescription": "\n\nDevices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions.\n\n\nAfter a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1233,
    "Title": "CWE-1233: Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
    "Name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
    "Description": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration).\n\n\nHowever, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.\n",
    "Status": "Stable"
  },
  {
    "ID": 1234,
    "Title": "CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks",
    "Name": "Hardware Internal or Debug Modes Allow Override of Locks",
    "Description": "System configuration protection may be bypassed during debug mode.",
    "ExtendedDescription": "\n\nDevice configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1235,
    "Title": "CWE-1235: Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
    "Name": "Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
    "Description": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",
    "ExtendedDescription": "\n\nLanguages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.\n\n\nHowever, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support \"impedance mismatch\" between reference types and primitives.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1236,
    "Title": "CWE-1236: Improper Neutralization of Formula Elements in a CSV File",
    "Name": "Improper Neutralization of Formula Elements in a CSV File",
    "Description": "The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.",
    "ExtendedDescription": "User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.",
    "Status": "Incomplete"
  },
  {
    "ID": 1239,
    "Title": "CWE-1239: Improper Zeroization of Hardware Register",
    "Name": "Improper Zeroization of Hardware Register",
    "Description": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.",
    "ExtendedDescription": "Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].",
    "Status": "Draft"
  },
  {
    "ID": 1240,
    "Title": "CWE-1240: Use of a Cryptographic Primitive with a Risky Implementation",
    "Name": "Use of a Cryptographic Primitive with a Risky Implementation",
    "Description": "To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.",
    "ExtendedDescription": "\n\nCryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of \"primitive\" can vary depending on point of view. See \"Terminology Notes\" for further explanation of some concepts.\n\n\nCryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time.\n\n\nIf a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is \"broken\"). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack.\n\n\nCryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly.\n\n\nIf ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences.\n\n\nThis weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.\n",
    "Status": "Draft"
  },
  {
    "ID": 1241,
    "Title": "CWE-1241: Use of Predictable Algorithm in Random Number Generator",
    "Name": "Use of Predictable Algorithm in Random Number Generator",
    "Description": "The device uses an algorithm that is predictable and generates a pseudo-random number.",
    "ExtendedDescription": "\n\nPseudo-random number generator algorithms are predictable because their registers have a finite number of possible states, which eventually lead to repeating patterns. As a result, pseudo-random number generators (PRNGs) can compromise their randomness or expose their internal state to various attacks, such as reverse engineering or tampering. It is highly recommended to use hardware-based true random number generators (TRNGs) to ensure the security of encryption schemes. TRNGs generate unpredictable, unbiased, and independent random numbers because they employ physical phenomena, e.g., electrical noise, as sources to generate random numbers.\n",
    "Status": "Draft"
  },
  {
    "ID": 1242,
    "Title": "CWE-1242: Inclusion of Undocumented Features or Chicken Bits",
    "Name": "Inclusion of Undocumented Features or Chicken Bits",
    "Description": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.",
    "ExtendedDescription": "\n\nA common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as \"chicken bits\". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1243,
    "Title": "CWE-1243: Sensitive Non-Volatile Information Not Protected During Debug",
    "Name": "Sensitive Non-Volatile Information Not Protected During Debug",
    "Description": "Access to security-sensitive information stored in fuses is not limited during debug.",
    "ExtendedDescription": "\n\nSeveral security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1244,
    "Title": "CWE-1244: Internal Asset Exposed to Unsafe Debug Access Level or State",
    "Name": "Internal Asset Exposed to Unsafe Debug Access Level or State",
    "Description": "The product uses physical debug or test\n        interfaces with support for multiple access levels, but it\n        assigns the wrong debug access level to an internal asset,\n        providing unintended access to the asset from untrusted debug\n        agents.",
    "ExtendedDescription": "\n\nDebug authorization can have multiple levels of access, defined such that different system internal assets are accessible based on the current authorized debug level. Other than debugger authentication (e.g., using passwords or challenges), the authorization can also be based on the system state or boot stage. For example, full system debug access might only be allowed early in boot after a system reset to ensure that previous session data is not accessible to the authenticated debugger.\n\n\nIf this protection mechanism does not ensure that internal assets have the correct debug access level during each boot stage or change in system state, an attacker could obtain sensitive information from the internal asset using a debugger.\n",
    "Status": "Stable"
  },
  {
    "ID": 1245,
    "Title": "CWE-1245: Improper Finite State Machines (FSMs) in Hardware Logic",
    "Name": "Improper Finite State Machines (FSMs) in Hardware Logic",
    "Description": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",
    "ExtendedDescription": "\n\nThe functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1246,
    "Title": "CWE-1246: Improper Write Handling in Limited-write Non-Volatile Memories",
    "Name": "Improper Write Handling in Limited-write Non-Volatile Memories",
    "Description": "The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.",
    "ExtendedDescription": "\n\nNon-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1247,
    "Title": "CWE-1247: Improper Protection Against Voltage and Clock Glitches",
    "Name": "Improper Protection Against Voltage and Clock Glitches",
    "Description": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
    "ExtendedDescription": "\n\nA device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\n",
    "Status": "Stable"
  },
  {
    "ID": 1248,
    "Title": "CWE-1248: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications",
    "Name": "Semiconductor Defects in Hardware Logic with Security-Sensitive Implications",
    "Description": "The security-sensitive hardware module contains semiconductor defects.",
    "ExtendedDescription": "\n\nA semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, the security objectives of the hardware module may be compromised.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1249,
    "Title": "CWE-1249: Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
    "Name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
    "Description": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",
    "ExtendedDescription": "\n\nMany products provide web-based applications or other interfaces for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems. When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise.\n\n\nFor example, numerous systems utilize a web front-end for administrative control. They also offer the ability to add, alter, and drop users with various privileges as it relates to the functionality of the system. A potential architectural weakness may exist where the user information reflected in the web interface does not mirror the users in the underlying operating system. Many web UI or REST APIs use the underlying operating system for authentication; the system's logic may also track an additional set of user capabilities within configuration files and datasets for authorization capabilities. When there is a discrepancy between the user information in the UI or REST API's interface system and the underlying operating system's user listing, this may introduce a weakness into the system. For example, if an attacker compromises the OS and adds a new user account - a \"ghost\" account - then the attacker could escape detection if the management tool does not list the newly-added account.\n\n\nThis discrepancy could be exploited in several ways:\n\n\n  - A rogue admin could insert a new account into a system that will persist if they are terminated or wish to take action on a system that cannot be directly associated with them.\n\n  - An attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh.\n\n  - An attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all.\n\n  - An attacker could create an admin account which is viewable by an administrator, use this account to create the ghost account, delete logs and delete the first created admin account.\n\nMany of these attacker scenarios can be realized by leveraging separate vulnerabilities related to XSS, command injection, authentication bypass, or logic flaws on the various systems. ",
    "Status": "Incomplete"
  },
  {
    "ID": 1250,
    "Title": "CWE-1250: Improper Preservation of Consistency Between Independent Representations of Shared State",
    "Name": "Improper Preservation of Consistency Between Independent Representations of Shared State",
    "Description": "The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.",
    "ExtendedDescription": "\n\nIn highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same \"view\" of the overall system and operate in a coordinated fashion. For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same \"view\" of the world. Alternately, a processor's Memory Management Unit (MMU) might have \"shadow\" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory.\n\n\nIn such environments, it becomes critical for the product to ensure that this \"shared state\" is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users. When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1251,
    "Title": "CWE-1251: Mirrored Regions with Different Values",
    "Name": "Mirrored Regions with Different Values",
    "Description": "The product's architecture mirrors regions without ensuring that their contents always stay in sync.",
    "ExtendedDescription": "\n\nHaving mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise.\n\n\nIn the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a \"local\" copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true.\n\n\nDuring hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called \"shadow copies\" or \"mirrored copies.\"\n\n\nIf the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast.\n\n\nThis situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: \n\n\n  - After the values in the original copy change, due to some reason the original copy does not send the \"update\" request to its shadow copies.\n\n  - After the values in the original copy change, the original copy dutifully sends the \"update\" request to its shadow copies, but due to some reason the shadow copy does not \"execute\" this update request.\n\n  - After the values in the original copy change, the original copy sends the \"update\" request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has \"new\" values and the shadow copy is still holding the \"old\" values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins.\n\n  - The attacker might send a \"spoofed\" update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker.\n\n  - Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the \"old\" value, and the shadow copy has the \"new\" value.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1252,
    "Title": "CWE-1252: CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
    "Name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
    "Description": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.",
    "ExtendedDescription": "\n\nCPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1253,
    "Title": "CWE-1253: Incorrect Selection of Fuse Values",
    "Name": "Incorrect Selection of Fuse Values",
    "Description": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.",
    "ExtendedDescription": "\n\nFuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.\n",
    "Status": "Draft"
  },
  {
    "ID": 1254,
    "Title": "CWE-1254: Incorrect Comparison Logic Granularity",
    "Name": "Incorrect Comparison Logic Granularity",
    "Description": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.",
    "ExtendedDescription": "\n\nComparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges.\n",
    "Status": "Draft"
  },
  {
    "ID": 1255,
    "Title": "CWE-1255: Comparison Logic is Vulnerable to Power Side-Channel Attacks",
    "Name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks",
    "Description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.",
    "ExtendedDescription": "\n\nThe power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a \"good\" entry and a \"bad\" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value.\n",
    "Status": "Draft"
  },
  {
    "ID": 1256,
    "Title": "CWE-1256: Improper Restriction of Software Interfaces to Hardware Features",
    "Name": "Improper Restriction of Software Interfaces to Hardware Features",
    "Description": "The product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.",
    "ExtendedDescription": "\n\nIt is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device.\n\n\nFault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]).\n\n\nSide channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.\n",
    "Status": "Stable"
  },
  {
    "ID": 1257,
    "Title": "CWE-1257: Improper Access Control Applied to Mirrored or Aliased Memory Regions",
    "Name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
    "Description": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\t\t\t",
    "ExtendedDescription": "\n\nHardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO).\n\n\nEach memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell.\n\n\nThis is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address.\n\n\nA common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory.\n\n\nAn untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1258,
    "Title": "CWE-1258: Exposure of Sensitive System Information Due to Uncleared Debug Information",
    "Name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
    "Description": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.",
    "ExtendedDescription": "\n\nSecurity sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties.\n",
    "Status": "Draft"
  },
  {
    "ID": 1259,
    "Title": "CWE-1259: Improper Restriction of Security Token Assignment",
    "Name": "Improper Restriction of Security Token Assignment",
    "Description": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.",
    "ExtendedDescription": "Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.",
    "Status": "Incomplete"
  },
  {
    "ID": 1260,
    "Title": "CWE-1260: Improper Handling of Overlap Between Protected Memory Ranges",
    "Name": "Improper Handling of Overlap Between Protected Memory Ranges",
    "Description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
    "ExtendedDescription": "\n\nIsolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software.\n\n\nIf a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.\n",
    "Status": "Stable"
  },
  {
    "ID": 1261,
    "Title": "CWE-1261: Improper Handling of Single Event Upsets",
    "Name": "Improper Handling of Single Event Upsets",
    "Description": "The hardware logic does not effectively handle when single-event upsets (SEUs) occur.",
    "ExtendedDescription": "\n\nTechnology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root.\n",
    "Status": "Draft"
  },
  {
    "ID": 1262,
    "Title": "CWE-1262: Improper Access Control for Register Interface",
    "Name": "Improper Access Control for Register Interface",
    "Description": "The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.",
    "ExtendedDescription": "\n\nSoftware commonly accesses peripherals in a System-on-Chip (SoC) or other device through a memory-mapped register interface. Malicious software could tamper with any security-critical hardware data that is accessible directly or indirectly through the register interface, which could lead to a loss of confidentiality and integrity.\n",
    "Status": "Stable"
  },
  {
    "ID": 1263,
    "Title": "CWE-1263: Improper Physical Access Control",
    "Name": "Improper Physical Access Control",
    "Description": "The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.",
    "ExtendedDescription": "Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.",
    "Status": "Incomplete"
  },
  {
    "ID": 1264,
    "Title": "CWE-1264: Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
    "Name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
    "Description": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.",
    "ExtendedDescription": "\n\nMany high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1265,
    "Title": "CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
    "Name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
    "Description": "During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.",
    "ExtendedDescription": "In a complex product, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently a concern in products that execute scripts from untrusted sources. Examples of such products are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.",
    "Status": "Draft"
  },
  {
    "ID": 1266,
    "Title": "CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device",
    "Name": "Improper Scrubbing of Sensitive Data from Decommissioned Device",
    "Description": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.",
    "ExtendedDescription": "\n\nWhen a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. \"scrubbing.\" Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1267,
    "Title": "CWE-1267: Policy Uses Obsolete Encoding",
    "Name": "Policy Uses Obsolete Encoding",
    "Description": "The product uses an obsolete encoding mechanism to implement access controls.",
    "ExtendedDescription": "\n\nWithin a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding.\n",
    "Status": "Draft"
  },
  {
    "ID": 1268,
    "Title": "CWE-1268: Policy Privileges are not Assigned Consistently Between Control and Data Agents",
    "Name": "Policy Privileges are not Assigned Consistently Between Control and Data Agents",
    "Description": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\n\t\t\t   ",
    "ExtendedDescription": "\n\nIntegrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves.\n\n\nResources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration.\n",
    "Status": "Draft"
  },
  {
    "ID": 1269,
    "Title": "CWE-1269: Product Released in Non-Release Configuration",
    "Name": "Product Released in Non-Release Configuration",
    "Description": "The product released to market is released in pre-production or manufacturing configuration.",
    "ExtendedDescription": "\n\nProducts in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to:\n\n\n  - Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity)\n\n  - Ability to read/write/modify/dump internal state (including registers and memory)\n\n  - Ability to change system configurations\n\n  - Ability to run hidden or private commands that are not allowed during production (as they expose IP).\n\nThe above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state.\n\nComplexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called \"complete\" and have the \"Manufacturing Complete\" fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1270,
    "Title": "CWE-1270: Generation of Incorrect Security Tokens",
    "Name": "Generation of Incorrect Security Tokens",
    "Description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.",
    "ExtendedDescription": "\n\nSystems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be \"read\", \"write\", \"program\", \"reset\", \"fetch\", \"compute\", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1271,
    "Title": "CWE-1271: Uninitialized Value on Reset for Registers Holding Security Settings",
    "Name": "Uninitialized Value on Reset for Registers Holding Security Settings",
    "Description": "Security-critical logic is not set to a known value on reset.",
    "ExtendedDescription": "\n\nWhen the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1272,
    "Title": "CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition",
    "Name": "Sensitive Information Uncleared Before Debug/Power State Transition",
    "Description": "The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.",
    "ExtendedDescription": "\n\nA device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\n",
    "Status": "Stable"
  },
  {
    "ID": 1273,
    "Title": "CWE-1273: Device Unlock Credential Sharing",
    "Name": "Device Unlock Credential Sharing",
    "Description": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.",
    "ExtendedDescription": "\n\n\"Unlocking a device\" often means activating certain unadvertised debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is \"locked\" in the production part. Unless the device gets unlocked by supplying the proper credentials, the debug capabilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are all employed by the same company, the risk of compromise of the credentials is greatly reduced. However, the risk is greater when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1274,
    "Title": "CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code",
    "Name": "Improper Access Control for Volatile Memory Containing Boot Code",
    "Description": "The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.",
    "ExtendedDescription": "\n\nAdversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code.\n\n\nAs a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code.\n\n\nIf the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.\n",
    "Status": "Stable"
  },
  {
    "ID": 1275,
    "Title": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
    "Name": "Sensitive Cookie with Improper SameSite Attribute",
    "Description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used.",
    "ExtendedDescription": "The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).",
    "Status": "Incomplete"
  },
  {
    "ID": 1276,
    "Title": "CWE-1276: Hardware Child Block Incorrectly Connected to Parent System",
    "Name": "Hardware Child Block Incorrectly Connected to Parent System",
    "Description": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.",
    "ExtendedDescription": "\n\nIndividual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1277,
    "Title": "CWE-1277: Firmware Not Updateable",
    "Name": "Firmware Not Updateable",
    "Description": "The product does not provide its\n\t\t\tusers with the ability to update or patch its\n\t\t\tfirmware to address any vulnerabilities or\n\t\t\tweaknesses that may be present.",
    "ExtendedDescription": "Without the ability to patch or update firmware, consumers will be left vulnerable to exploitation of any known vulnerabilities, or any vulnerabilities that are discovered in the future. This can expose consumers to permanent risk throughout the entire lifetime of the device, which could be years or decades. Some external protective measures and mitigations might be employed to aid in preventing or reducing the risk of malicious attack, but the root weakness cannot be corrected.",
    "Status": "Draft"
  },
  {
    "ID": 1278,
    "Title": "CWE-1278: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques",
    "Name": "Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques",
    "Description": "Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.",
    "ExtendedDescription": "\n\nThe physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope.\n\n\nThe goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1279,
    "Title": "CWE-1279: Cryptographic Operations are run Before Supporting Units are Ready",
    "Name": "Cryptographic Operations are run Before Supporting Units are Ready",
    "Description": "Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.",
    "ExtendedDescription": "Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied.",
    "Status": "Incomplete"
  },
  {
    "ID": 1280,
    "Title": "CWE-1280: Access Control Check Implemented After Asset is Accessed",
    "Name": "Access Control Check Implemented After Asset is Accessed",
    "Description": "A product's hardware-based access control check occurs after the asset has been accessed.",
    "ExtendedDescription": "\n\nThe product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1281,
    "Title": "CWE-1281: Sequence of Processor Instructions Leads to Unexpected Behavior",
    "Name": "Sequence of Processor Instructions Leads to Unexpected Behavior",
    "Description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.",
    "ExtendedDescription": "\n\nIf the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU. \n",
    "Status": "Incomplete"
  },
  {
    "ID": 1282,
    "Title": "CWE-1282: Assumed-Immutable Data is Stored in Writable Memory",
    "Name": "Assumed-Immutable Data is Stored in Writable Memory",
    "Description": "Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field.",
    "ExtendedDescription": "\n\nSecurity services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1283,
    "Title": "CWE-1283: Mutable Attestation or Measurement Reporting Data",
    "Name": "Mutable Attestation or Measurement Reporting Data",
    "Description": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.",
    "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1284,
    "Title": "CWE-1284: Improper Validation of Specified Quantity in Input",
    "Name": "Improper Validation of Specified Quantity in Input",
    "Description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "ExtendedDescription": "\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1285,
    "Title": "CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input",
    "Name": "Improper Validation of Specified Index, Position, or Offset in Input",
    "Description": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
    "ExtendedDescription": "\n\nOften, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures. \n",
    "Status": "Incomplete"
  },
  {
    "ID": 1286,
    "Title": "CWE-1286: Improper Validation of Syntactic Correctness of Input",
    "Name": "Improper Validation of Syntactic Correctness of Input",
    "Description": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",
    "ExtendedDescription": "\n\nOften, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1287,
    "Title": "CWE-1287: Improper Validation of Specified Type of Input",
    "Name": "Improper Validation of Specified Type of Input",
    "Description": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",
    "ExtendedDescription": "\n\nWhen input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type.\n\n\nThis weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1288,
    "Title": "CWE-1288: Improper Validation of Consistency within Input",
    "Name": "Improper Validation of Consistency within Input",
    "Description": "The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.",
    "ExtendedDescription": "\n\nSome input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1289,
    "Title": "CWE-1289: Improper Validation of Unsafe Equivalence in Input",
    "Name": "Improper Validation of Unsafe Equivalence in Input",
    "Description": "The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.",
    "ExtendedDescription": "\n\nAttackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no \"<script>\" tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could inject \"<ScrIpT>\" and trigger XSS.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1290,
    "Title": "CWE-1290: Incorrect Decoding of Security Identifiers ",
    "Name": "Incorrect Decoding of Security Identifiers ",
    "Description": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.",
    "ExtendedDescription": "\n\nIn a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections.\n\n\nA common weakness that can exist in this scenario is incorrect decoding because an untrusted agent's security identifier is decoded into a trusted agent's security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1291,
    "Title": "CWE-1291: Public Key Re-Use for Signing both Debug and Production Code",
    "Name": "Public Key Re-Use for Signing both Debug and Production Code",
    "Description": "The same public key is used for signing both debug and production code.",
    "ExtendedDescription": "\n\nA common usage of public-key cryptography is to verify the integrity and authenticity of another entity (for example a firmware binary). If a company wants to ensure that its firmware runs only on its own hardware, before the firmware runs, an encrypted hash of the firmware image will be decrypted with the public key and then verified against the now-computed hash of the firmware image. This means that the public key forms the root of trust, which necessitates that the public key itself must be protected and used properly.\n\n\nDuring the development phase, debug firmware enables many hardware debug hooks, debug modes, and debug messages for testing. Those debug facilities provide significant, additional views about the firmware's capability and, in some cases, additional capability into the chip or SoC. If compromised, these capabilities could be exploited by an attacker to take full control of the system.\n\n\nOnce the product exits the manufacturing stage and enters production, it is good practice to use a different public key. Debug firmware images are known to leak. With the debug key being reused as the production key, the debug image will also work on the production image. Thus, it will open all the internal, debug capabilities to the attacker.\n\n\nIf a different public key is used for the production image, even if the attacker gains access to the debug firmware image, they will not be able to run it on a production machine. Thus, damage will be limited to the intellectual property leakage resulting from the debug image.\n",
    "Status": "Draft"
  },
  {
    "ID": 1292,
    "Title": "CWE-1292: Incorrect Conversion of Security Identifiers",
    "Name": "Incorrect Conversion of Security Identifiers",
    "Description": "The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.",
    "ExtendedDescription": "\n\nIn a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes).\n\n\nA typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other.\n\n\nA common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset.\n",
    "Status": "Draft"
  },
  {
    "ID": 1293,
    "Title": "CWE-1293: Missing Source Correlation of Multiple Independent Data",
    "Name": "Missing Source Correlation of Multiple Independent Data",
    "Description": "The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.",
    "ExtendedDescription": "\n\nTo operate successfully, a product sometimes has to implicitly trust the integrity of an information source. When information is implicitly signed, one can ensure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried.\n",
    "Status": "Draft"
  },
  {
    "ID": 1294,
    "Title": "CWE-1294: Insecure Security Identifier Mechanism",
    "Name": "Insecure Security Identifier Mechanism",
    "Description": "The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.",
    "ExtendedDescription": "\n\nSystems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges.\n\n\nA broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1295,
    "Title": "CWE-1295: Debug Messages Revealing Unnecessary Information",
    "Name": "Debug Messages Revealing Unnecessary Information",
    "Description": "The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.",
    "ExtendedDescription": "\n\nDebug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the \"security by obscurity\" factor. While \"security by obscurity\" alone is insufficient, it can help as a part of \"Defense-in-depth\". \n",
    "Status": "Incomplete"
  },
  {
    "ID": 1296,
    "Title": "CWE-1296: Incorrect Chaining or Granularity of Debug Components",
    "Name": "Incorrect Chaining or Granularity of Debug Components",
    "Description": "The product's debug components contain incorrect chaining or granularity of debug components.",
    "ExtendedDescription": "\n\nFor debugging and troubleshooting a chip, several hardware design elements are often implemented, including:\n\n\n  - Various Test Access Ports (TAPs) allow boundary scan commands to be executed.\n\n  - For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a \"stimulus and response\" mechanism.\n\n  - Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs.\n\nLogic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions.",
    "Status": "Incomplete"
  },
  {
    "ID": 1297,
    "Title": "CWE-1297: Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
    "Name": "Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
    "Description": "The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.",
    "ExtendedDescription": "\n\nIn contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor.\n\n\nLogic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1298,
    "Title": "CWE-1298: Hardware Logic Contains Race Conditions",
    "Name": "Hardware Logic Contains Race Conditions",
    "Description": "A race condition in the hardware logic results in undermining security guarantees of the system.",
    "ExtendedDescription": "\n\nA race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections.\n",
    "Status": "Draft"
  },
  {
    "ID": 1299,
    "Title": "CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface",
    "Name": "Missing Protection Mechanism for Alternate Hardware Interface",
    "Description": "The lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.",
    "ExtendedDescription": "\n\nAn asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC.\n\n\nConsider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. \n\n\nAlternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security. \n",
    "Status": "Draft"
  },
  {
    "ID": 1300,
    "Title": "CWE-1300: Improper Protection of Physical Side Channels",
    "Name": "Improper Protection of Physical Side Channels",
    "Description": "The device does not contain sufficient protection\n\tmechanisms to prevent physical side channels from exposing\n\tsensitive information due to patterns in physically observable\n\tphenomena such as variations in power consumption,\n\telectromagnetic emissions (EME), or acoustic emissions.",
    "ExtendedDescription": "\n\nAn adversary could monitor and measure physical phenomena to detect patterns and make inferences, even if it is not possible to extract the information in the digital domain.\n\n\nPhysical side channels have been well-studied for decades in the context of breaking implementations of cryptographic algorithms or other attacks against security features. These side channels may be easily observed by an adversary with physical access to the device, or using a tool that is in close proximity. If the adversary can monitor hardware operation and correlate its data processing with power, EME, and acoustic measurements, the adversary might be able to recover of secret keys and data.\n",
    "Status": "Stable"
  },
  {
    "ID": 1301,
    "Title": "CWE-1301: Insufficient or Incomplete Data Removal within Hardware Component",
    "Name": "Insufficient or Incomplete Data Removal within Hardware Component",
    "Description": "The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.",
    "ExtendedDescription": "\n\nPhysical properties of hardware devices, such as remanence of magnetic media, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed.\n\n\nRecovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1302,
    "Title": "CWE-1302: Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)",
    "Name": "Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)",
    "Description": "The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.",
    "ExtendedDescription": "\n\nIn a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier. This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions.\n\n\nA weakness that can exist in such transaction schemes is that the source agent does not consistently include the necessary Security Identifier with the transaction. If the Security Identifier is missing, the destination agent might drop the message (resulting in an inadvertent Denial-of-Service (DoS)) or take inappropriate action by default in its attempt to execute the transaction, resulting in privilege escalation or provision of unintended access.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1303,
    "Title": "CWE-1303: Non-Transparent Sharing of Microarchitectural Resources",
    "Name": "Non-Transparent Sharing of Microarchitectural Resources",
    "Description": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.",
    "ExtendedDescription": "\n\nModern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer's view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context.\n\n\nSome examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel.\n\n\nIf the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.\n",
    "Status": "Draft"
  },
  {
    "ID": 1304,
    "Title": "CWE-1304: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
    "Name": "Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
    "Description": "The product performs a power save/restore\n            operation, but it does not ensure that the integrity of\n            the configuration state is maintained and/or verified between\n\t    the beginning and ending of the operation.",
    "ExtendedDescription": "\n\nBefore powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration. \n",
    "Status": "Draft"
  },
  {
    "ID": 1310,
    "Title": "CWE-1310: Missing Ability to Patch ROM Code",
    "Name": "Missing Ability to Patch ROM Code",
    "Description": "Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.",
    "ExtendedDescription": "\n\nA System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use.\n\n\nA common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped. This leaves the system in a vulnerable state where an adversary can compromise the SoC.\n",
    "Status": "Draft"
  },
  {
    "ID": 1311,
    "Title": "CWE-1311: Improper Translation of Security Attributes by Fabric Bridge",
    "Name": "Improper Translation of Security Attributes by Fabric Bridge",
    "Description": "The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.",
    "ExtendedDescription": "\n\nA bridge allows IP blocks supporting different fabric protocols to be integrated into the system. Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP.\n\n\nThe values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted).\n\n\nA weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service.\n",
    "Status": "Draft"
  },
  {
    "ID": 1312,
    "Title": "CWE-1312: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
    "Name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
    "Description": "The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.",
    "ExtendedDescription": "\n\nFew fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data.\n",
    "Status": "Draft"
  },
  {
    "ID": 1313,
    "Title": "CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime",
    "Name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
    "Description": "During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.",
    "ExtendedDescription": "\n\nAn adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets.\n",
    "Status": "Draft"
  },
  {
    "ID": 1314,
    "Title": "CWE-1314: Missing Write Protection for Parametric Data Values",
    "Name": "Missing Write Protection for Parametric Data Values",
    "Description": "The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.",
    "ExtendedDescription": "\n\nVarious sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software.\n\n\nThe limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits.\n\n\nWhile the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed.\n",
    "Status": "Draft"
  },
  {
    "ID": 1315,
    "Title": "CWE-1315: Improper Setting of Bus Controlling Capability in Fabric End-point",
    "Name": "Improper Setting of Bus Controlling Capability in Fabric End-point",
    "Description": "The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.",
    "ExtendedDescription": "\n\nTo support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1316,
    "Title": "CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
    "Name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
    "Description": "The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.",
    "ExtendedDescription": "\n\nVarious ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected.\n\n\nOccasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege. \n",
    "Status": "Draft"
  },
  {
    "ID": 1317,
    "Title": "CWE-1317: Improper Access Control in Fabric Bridge",
    "Name": "Improper Access Control in Fabric Bridge",
    "Description": "The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.",
    "ExtendedDescription": "\n\nIn hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect.\n\n\nFor overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge.\n",
    "Status": "Draft"
  },
  {
    "ID": 1318,
    "Title": "CWE-1318: Missing Support for Security Features in On-chip Fabrics or Buses",
    "Name": "Missing Support for Security Features in On-chip Fabrics or Buses",
    "Description": " On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control. ",
    "ExtendedDescription": "\n\nCertain on-chip fabrics and buses, especially simple and low-power buses, do not support security features. Apart from data transfer and addressing ports, some fabrics and buses do not have any interfaces to transfer privilege, immutable identity, or any other security attribute coming from the bus master. Similarly, they do not have dedicated signals to transport security-sensitive data from slave to master, such as completions for certain types of transactions. Few other on-chip fabrics and buses support security features and define specific interfaces/signals for transporting security attributes from master to slave or vice-versa. However, including these signals is not mandatory and could be left unconfigured when generating the register-transfer-level (RTL) description for the fabric. Such fabrics or buses should not be used to transport any security attribute coming from the bus master. In general, peripherals with security assets should not be connected to such buses before the transaction from the bus master reaches the bus, unless some form of access control is performed at a fabric bridge or another intermediate module.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1319,
    "Title": "CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)",
    "Name": "Improper Protection against Electromagnetic Fault Injection (EM-FI)",
    "Description": "The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.",
    "ExtendedDescription": "\n\nElectromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to:\n\n\n  - Bypassing security mechanisms such as secure JTAG or Secure Boot\n\n  - Leaking device information\n\n  - Modifying program flow\n\n  - Perturbing secure hardware modules (e.g. random number generators)\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1320,
    "Title": "CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals",
    "Name": "Improper Protection for Outbound Error Messages and Alert Signals",
    "Description": "Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\t\t\t",
    "ExtendedDescription": "\n\nHardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS. Modification of these limits may be protected by hardware mechanisms.\n\n\nWhen device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling.\n\n\nWarning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS). These alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts.\n",
    "Status": "Draft"
  },
  {
    "ID": 1321,
    "Title": "CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "Name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "Description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
    "ExtendedDescription": "\n\nBy adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the product depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf).\n\n\nThis weakness is usually exploited by using a special attribute of objects called proto, constructor or prototype. Such attributes give access to the object prototype. This weakness is often found in code that assigns object attributes based on user input, or merges or clones objects recursively.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1322,
    "Title": "CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context",
    "Name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
    "Description": "The product uses a non-blocking model that relies on a single threaded process\n\t\t\tfor features such as scalability, but it contains code that can block when it is invoked.",
    "ExtendedDescription": "\n\nWhen an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation.\n\n\nDue to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1323,
    "Title": "CWE-1323: Improper Management of Sensitive Trace Data",
    "Name": "Improper Management of Sensitive Trace Data",
    "Description": "Trace data collected from several sources on the\n                System-on-Chip (SoC) is stored in unprotected locations or\n                transported to untrusted agents.",
    "ExtendedDescription": "\n\nTo facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers.\n\n\nSince these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information.\n",
    "Status": "Draft"
  },
  {
    "ID": 1324,
    "Title": "CWE-1324: DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface",
    "Name": "DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface",
    "Description": "This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.",
    "ExtendedDescription": null,
    "Status": "Deprecated"
  },
  {
    "ID": 1325,
    "Title": "CWE-1325: Improperly Controlled Sequential Memory Allocation",
    "Name": "Improperly Controlled Sequential Memory Allocation",
    "Description": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
    "ExtendedDescription": "\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1326,
    "Title": "CWE-1326: Missing Immutable Root of Trust in Hardware",
    "Name": "Missing Immutable Root of Trust in Hardware",
    "Description": "A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.",
    "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts. Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether \"Secure Boot is enabled\". These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows.\n\n\nOne of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot.\n\n\nNote that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field. \n",
    "Status": "Draft"
  },
  {
    "ID": 1327,
    "Title": "CWE-1327: Binding to an Unrestricted IP Address",
    "Name": "Binding to an Unrestricted IP Address",
    "Description": "The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.",
    "ExtendedDescription": "\n\nWhen a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1328,
    "Title": "CWE-1328: Security Version Number Mutable to Older Versions",
    "Name": "Security Version Number Mutable to Older Versions",
    "Description": "Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.",
    "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot or verified boot. It might support a security version number, which prevents downgrading the current firmware to a vulnerable version. Once downgraded to a previous version, an adversary can launch exploits on the SoC and thus compromise the security of the SoC. These downgrade attacks are also referred to as roll-back attacks.\n\n\nThe security version number must be stored securely and persistently across power-on resets. A common weakness is that the security version number is modifiable by an adversary, allowing roll-back or downgrade attacks or, under certain circumstances, preventing upgrades (i.e. Denial-of-Service on upgrades). In both cases, the SoC is in a vulnerable state.\n",
    "Status": "Draft"
  },
  {
    "ID": 1329,
    "Title": "CWE-1329: Reliance on Component That is Not Updateable",
    "Name": "Reliance on Component That is Not Updateable",
    "Description": "The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.",
    "ExtendedDescription": "\n\n If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's owner will not be able to protect against the issue. The only option might be replacement of the product, which could be too financially or operationally expensive for the product owner. As a result, the inability to patch or update can leave the product open to attacker exploitation or critical operation failures. This weakness can be especially difficult to manage when using ROM, firmware, or similar components that traditionally have had limited or no update capabilities. \n\n\n In industries such as healthcare, \"legacy\" devices can be operated for decades. As a US task force report [REF-1197] notes, \"the inability to update or replace equipment has both large and small health care delivery organizations struggle with numerous unsupported legacy systems that cannot easily be replaced (hardware, software, and operating systems) with large numbers of vulnerabilities and few modern countermeasures.\" \n\n\n While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1330,
    "Title": "CWE-1330: Remanent Data Readable after Memory Erase",
    "Name": "Remanent Data Readable after Memory Erase",
    "Description": "Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.",
    "ExtendedDescription": "\n\nData remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware.\n\n\nData remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase.\n\n\nData remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature.\n\n\nOther than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm.\n",
    "Status": "Draft"
  },
  {
    "ID": 1331,
    "Title": "CWE-1331: Improper Isolation of Shared Resources in Network On Chip (NoC)",
    "Name": "Improper Isolation of Shared Resources in Network On Chip (NoC)",
    "Description": "The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.",
    "ExtendedDescription": "\n\nTypically, network on chips (NoC) have many internal resources that are shared between packets from different trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel, allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference, resulting in degraded throughput and latency.\n",
    "Status": "Stable"
  },
  {
    "ID": 1332,
    "Title": "CWE-1332: Improper Handling of Faults that Lead to Instruction Skips",
    "Name": "Improper Handling of Faults that Lead to Instruction Skips",
    "Description": "The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.",
    "ExtendedDescription": "\n\nThe operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions.\n\n\nIn practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points.\n\n\nAttackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a \"natural\" setting.\n",
    "Status": "Stable"
  },
  {
    "ID": 1333,
    "Title": "CWE-1333: Inefficient Regular Expression Complexity",
    "Name": "Inefficient Regular Expression Complexity",
    "Description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "ExtendedDescription": "Some regular expression engines have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match.\n Backtracking becomes a weakness if all of these conditions are met:\n\n\n  - The number of possible backtracking attempts are exponential relative to the length of the input.\n\n  - The input can fail to match the regular expression.\n\n  - The input can be long enough.\n\n Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike. ",
    "Status": "Draft"
  },
  {
    "ID": 1334,
    "Title": "CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy",
    "Name": "Unauthorized Error Injection Can Degrade Hardware Redundancy",
    "Description": "An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.",
    "ExtendedDescription": "\n\nTo ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack.\n",
    "Status": "Draft"
  },
  {
    "ID": 1335,
    "Title": "CWE-1335: Incorrect Bitwise Shift of Integer",
    "Name": "Incorrect Bitwise Shift of Integer",
    "Description": "An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.",
    "ExtendedDescription": "\n\nSpecifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue.\n\n\nSpecifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.\n",
    "Status": "Draft"
  },
  {
    "ID": 1336,
    "Title": "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine",
    "Name": "Improper Neutralization of Special Elements Used in a Template Engine",
    "Description": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
    "ExtendedDescription": "\n\nMany web applications use template engines that allow developers to insert externally-influenced values into free text or messages in order to generate a full web page, document, message, etc. Such engines include Twig, Jinja2, Pug, Java Server Pages, FreeMarker, Velocity, ColdFusion, Smarty, and many others - including PHP itself. Some CMS (Content Management Systems) also use templates.\n\n\nTemplate engines often have their own custom command or expression language. If an attacker can influence input into a template before it is processed, then the attacker can invoke arbitrary expressions, i.e. perform injection attacks. For example, in some template languages, an attacker could inject the expression \"{{7*7}}\" and determine if the output returns \"49\" instead. The syntax varies depending on the language.\n\n\nIn some cases, XSS-style attacks can work, which can obscure the root cause if the developer does not closely investigate the root cause of the error.\n\n\nTemplate engines can be used on the server or client, so both \"sides\" could be affected by injection. The mechanisms of attack or the affected technologies might be different, but the mistake is fundamentally the same.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1338,
    "Title": "CWE-1338: Improper Protections Against Hardware Overheating",
    "Name": "Improper Protections Against Hardware Overheating",
    "Description": "A hardware device is missing or has inadequate protection features to prevent overheating.",
    "ExtendedDescription": "\n\nHardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently.\n\n\nAny device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack.\n\n\nDepending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. \n\n\nThere can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.\n",
    "Status": "Draft"
  },
  {
    "ID": 1339,
    "Title": "CWE-1339: Insufficient Precision or Accuracy of a Real Number",
    "Name": "Insufficient Precision or Accuracy of a Real Number",
    "Description": "The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.",
    "ExtendedDescription": "\n\nWhen a security decision or calculation requires highly precise, accurate numbers such as financial calculations or prices, then small variations in the number could be exploited by an attacker. \n\n\nThere are multiple ways to store the fractional part of a real number in a computer. In all of these cases, there is a limit to the accuracy of recording a fraction. If the fraction can be represented in a fixed number of digits (binary or decimal), there might not be enough digits assigned to represent the number. In other cases the number cannot be represented in a fixed number of digits due to repeating in decimal or binary notation (e.g. 0.333333...) or due to a transcendental number such as Π or √2. Rounding of numbers can lead to situations where the computer results do not adequately match the result of sufficiently accurate math. \n",
    "Status": "Draft"
  },
  {
    "ID": 1341,
    "Title": "CWE-1341: Multiple Releases of Same Resource or Handle",
    "Name": "Multiple Releases of Same Resource or Handle",
    "Description": "The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.",
    "ExtendedDescription": "\n\nCode typically requires \"opening\" handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to \"close\" or \"release\" the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages.\n\n\nUnfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences.\n\n\nNote that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1342,
    "Title": "CWE-1342: Information Exposure through Microarchitectural State after Transient Execution",
    "Name": "Information Exposure through Microarchitectural State after Transient Execution",
    "Description": "The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.",
    "ExtendedDescription": "\n\nIn many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers.\n\n\nSeveral conditions may need to be fulfilled for a successful attack:\n\n\n  1. incorrect transient execution that results in remanence of sensitive information;\n\n  1. attacker has the ability to provoke microarchitectural exceptions;\n\n  1. operations and structures in victim code that can be exploited must be identified.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1351,
    "Title": "CWE-1351: Improper Handling of Hardware Behavior in Exceptionally Cold Environments",
    "Name": "Improper Handling of Hardware Behavior in Exceptionally Cold Environments",
    "Description": "A hardware device, or the firmware running on it, is\n                missing or has incorrect protection features to maintain\n                goals of security primitives when the device is cooled below\n                standard operating temperatures.",
    "ExtendedDescription": "\n\nThe hardware designer may improperly anticipate hardware behavior when exposed to exceptionally cold conditions. As a result they may introduce a weakness by not accounting for the modified behavior of critical components when in extreme environments.\n\n\nAn example of a change in behavior is that power loss won't clear/reset any volatile state when cooled below standard operating temperatures. This may result in a weakness when the starting state of the volatile memory is being relied upon for a security decision. For example, a Physical Unclonable Function (PUF) may be supplied as a security primitive to improve confidentiality, authenticity, and integrity guarantees. However, when the PUF is paired with DRAM, SRAM, or another temperature sensitive entropy source, the system designer may introduce weakness by failing to account for the chosen entropy source's behavior at exceptionally low temperatures. In the case of DRAM and SRAM, when power is cycled at low temperatures, the device will not contain the bitwise biasing caused by inconsistencies in manufacturing and will instead contain the data from previous boot. Should the PUF primitive be used in a cryptographic construction which does not account for full adversary control of PUF seed data, weakness would arise.\n\n\nThis weakness does not cover \"Cold Boot Attacks\" wherein RAM or other external storage is super cooled and read externally by an attacker.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1357,
    "Title": "CWE-1357: Reliance on Insufficiently Trustworthy Component",
    "Name": "Reliance on Insufficiently Trustworthy Component",
    "Description": "The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.",
    "ExtendedDescription": "\n\nMany modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party.\n\n\nRegardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company.\n\n\nNote that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1384,
    "Title": "CWE-1384: Improper Handling of Physical or Environmental Conditions",
    "Name": "Improper Handling of Physical or Environmental Conditions",
    "Description": "The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.",
    "ExtendedDescription": "\n\nHardware products are typically only guaranteed to behave correctly within certain physical limits or environmental conditions. Such products cannot necessarily control the physical or external conditions to which they are subjected. However, the inability to handle such conditions can undermine a product's security. For example, an unexpected physical or environmental condition may cause the flipping of a bit that is used for an authentication decision. This unexpected condition could occur naturally or be induced artificially by an adversary.\n\n\nPhysical or environmental conditions of concern are:\n\n\n  -  **Atmospheric characteristics: ** extreme temperature ranges, etc.\n\n  -  **Interference: ** electromagnetic interference (EMI), radio frequency interference (RFI), etc.\n\n  -  **Assorted light sources: ** white light, ultra-violet light (UV), lasers, infrared (IR), etc.\n\n  -  **Power variances: ** under-voltages, over-voltages, under-current, over-current, etc.\n\n  -  **Clock variances: ** glitching, overclocking, clock stretching, etc.\n\n  -  **Component aging and degradation** \n\n  -  **Materials manipulation: ** focused ion beams (FIB), etc.\n\n  -  **Exposure to radiation: ** x-rays, cosmic radiation, etc.\n\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1385,
    "Title": "CWE-1385: Missing Origin Validation in WebSockets",
    "Name": "Missing Origin Validation in WebSockets",
    "Description": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
    "ExtendedDescription": "\n\nWebSockets provide a bi-directional low latency communication (near real-time) between a client and a server. WebSockets are different than HTTP in that the connections are long-lived, as the channel will remain open until the client or the server is ready to send the message, whereas in HTTP, once the response occurs (which typically happens immediately), the transaction completes. \n\n\nA WebSocket can leverage the existing HTTP protocol over ports 80 and 443, but it is not limited to HTTP. WebSockets can make cross-origin requests that are not restricted by browser-based protection mechanisms such as the Same Origin Policy (SOP) or Cross-Origin Resource Sharing (CORS). Without explicit origin validation, this makes CSRF attacks more powerful.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1386,
    "Title": "CWE-1386: Insecure Operation on Windows Junction / Mount Point",
    "Name": "Insecure Operation on Windows Junction / Mount Point",
    "Description": "The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.",
    "ExtendedDescription": "\n\nDepending on the intended action being performed, this could allow an attacker to cause the product to read, write, delete, or otherwise operate on unauthorized files.\n\n\nIn Windows, NTFS5 allows for file system objects called reparse points. Applications can create a hard link from one directory to another directory, called a junction point. They can also create a mapping from a directory to a drive letter, called a mount point. If a file is used by a privileged program, but it can be replaced with a hard link to a sensitive file (e.g., AUTOEXEC.BAT), an attacker could excalate privileges. When the process opens the file, the attacker can assume the privileges of that process, tricking the privileged process to read, modify, or delete the sensitive file, preventing the program from accurately processing data. Note that one can also point to registries and semaphores.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1389,
    "Title": "CWE-1389: Incorrect Parsing of Numbers with Different Radices",
    "Name": "Incorrect Parsing of Numbers with Different Radices",
    "Description": "The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).",
    "ExtendedDescription": "\n\nFrequently, a numeric input that begins with \"0\" is treated as octal, or \"0x\" causes it to be treated as hexadecimal, e.g. by the inet_addr() function. For example, \"023\" (octal) is 35 decimal, or \"0x31\" is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only inputs, the code could produce incorrect numbers when the inputs are parsed using a different base. This can result in unexpected and/or dangerous behavior. For example, a \"0127.0.0.1\" IP address is parsed as octal due to the leading \"0\", whose numeric value would be the same as 87.0.0.1 (decimal), where the developer likely expected to use 127.0.0.1.\n\n\nThe consequences vary depending on the surrounding code in which this weakness occurs, but they can include bypassing network-based access control using unexpected IP addresses or netmasks, or causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications, this can enable bypassing of SSRF restrictions.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1390,
    "Title": "CWE-1390: Weak Authentication",
    "Name": "Weak Authentication",
    "Description": "The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.",
    "ExtendedDescription": "\n\nAttackers may be able to bypass weak authentication faster and/or with less effort than expected.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1391,
    "Title": "CWE-1391: Use of Weak Credentials",
    "Name": "Use of Weak Credentials",
    "Description": "The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.",
    "ExtendedDescription": "\n\nBy design, authentication protocols try to ensure that attackers must perform brute force attacks if they do not know the credentials such as a key or password. However, when these credentials are easily predictable or even fixed (as with default or hard-coded passwords and keys), then the attacker can defeat the mechanism without relying on brute force.\n\n\nCredentials may be weak for different reasons, such as:\n\n\n  - Hard-coded (i.e., static and unchangeable by the administrator)\n\n  - Default (i.e., the same static value across different deployments/installations, but able to be changed by the administrator)\n\n  - Predictable (i.e., generated in a way that produces unique credentials across deployments/installations, but can still be guessed with reasonable efficiency)\n\nEven if a new, unique credential is intended to be generated for each product installation, if the generation is predictable, then that may also simplify guessing attacks.",
    "Status": "Incomplete"
  },
  {
    "ID": 1392,
    "Title": "CWE-1392: Use of Default Credentials",
    "Name": "Use of Default Credentials",
    "Description": "The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.",
    "ExtendedDescription": "It is common practice for products to be designed to use default keys, passwords, or other mechanisms for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.",
    "Status": "Incomplete"
  },
  {
    "ID": 1393,
    "Title": "CWE-1393: Use of Default Password",
    "Name": "Use of Default Password",
    "Description": "The product uses default passwords for potentially critical functionality.",
    "ExtendedDescription": "It is common practice for products to be designed to use default passwords for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, then it makes it easier for attackers to quickly bypass authentication across multiple organizations. There are many lists of default passwords and default-password scanning tools that are easily available from the World Wide Web.",
    "Status": "Incomplete"
  },
  {
    "ID": 1394,
    "Title": "CWE-1394: Use of Default Cryptographic Key",
    "Name": "Use of Default Cryptographic Key",
    "Description": "The product uses a default cryptographic key for potentially critical functionality.",
    "ExtendedDescription": "It is common practice for products to be designed to use default keys. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.",
    "Status": "Incomplete"
  },
  {
    "ID": 1395,
    "Title": "CWE-1395: Dependency on Vulnerable Third-Party Component",
    "Name": "Dependency on Vulnerable Third-Party Component",
    "Description": "The product has a dependency on a third-party component that contains one or more known vulnerabilities.",
    "ExtendedDescription": "\n\nMany products are large enough or complex enough that part of their functionality uses libraries, modules, or other intellectual property developed by third parties who are not the product creator. For example, even an entire operating system might be from a third-party supplier in some hardware products. Whether open or closed source, these components may contain publicly known vulnerabilities that could be exploited by adversaries to compromise the product.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1419,
    "Title": "CWE-1419: Incorrect Initialization of Resource",
    "Name": "Incorrect Initialization of Resource",
    "Description": "The product attempts to initialize a resource but does not correctly do so, which might leave the resource in an unexpected, incorrect, or insecure state when it is accessed.",
    "ExtendedDescription": "\n\nThis can have security implications when the associated resource is expected to have certain properties or values. Examples include a variable that determines whether a user has been authenticated or not, or a register or fuse value that determines the security state of the product.\n\n\nFor software, this weakness can frequently occur when implicit initialization is used, meaning the resource is not explicitly set to a specific value. For example, in C, memory is not necessarily cleared when it is allocated on the stack, and many scripting languages use a default empty, null value, or zero value when a variable is not explicitly initialized.\n\n\nFor hardware, this weakness frequently appears with reset values and fuses. After a product reset, hardware may initialize registers incorrectly. During different phases of a product lifecycle, fuses may be set to incorrect values. Even if fuses are set to correct values, the lines to the fuse could be broken or there might be hardware on the fuse line that alters the fuse value to be incorrect.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1420,
    "Title": "CWE-1420: Exposure of Sensitive Information during Transient Execution",
    "Name": "Exposure of Sensitive Information during Transient Execution",
    "Description": "A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.",
    "ExtendedDescription": "\n\nWhen operations execute but do not commit to the processor's architectural state, this is commonly referred to as transient execution. This behavior can occur when the processor mis-predicts an outcome (such as a branch target), or when a processor event (such as an exception or microcode assist, etc.) is handled after younger operations have already executed. Operations that execute transiently may exhibit observable discrepancies (CWE-203) in covert channels [REF-1400] such as data caches. Observable discrepancies of this kind can be detected and analyzed using timing or power analysis techniques, which may allow an attacker to infer information about the operations that executed transiently. For example, the attacker may be able to infer confidential data that was accessed or used by those operations.\n\n\nTransient execution weaknesses may be exploited using one of two methods. In the first method, the attacker generates a code sequence that exposes data through a covert channel when it is executed transiently (the attacker must also be able to trigger transient execution). Some transient execution weaknesses can only expose data that is accessible within the attacker's processor context. For example, an attacker executing code in a software sandbox may be able to use a transient execution weakness to expose data within the same address space, but outside of the attacker's sandbox. Other transient execution weaknesses can expose data that is architecturally inaccessible, that is, data protected by hardware-enforced boundaries such as page tables or privilege rings. These weaknesses are the subject of CWE-1421.\n\n\nIn the second exploitation method, the attacker first identifies a code sequence in a victim program that, when executed transiently, can expose data that is architecturally accessible within the victim's processor context. For instance, the attacker may search the victim program for code sequences that resemble a bounds-check bypass sequence (see Demonstrative Example 1). If the attacker can trigger a mis-prediction of the conditional branch and influence the index of the out-of-bounds array access, then the attacker may be able to infer the value of out-of-bounds data by monitoring observable discrepancies in a covert channel.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1421,
    "Title": "CWE-1421: Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution",
    "Name": "Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution",
    "Description": "\n\t\t\tA processor event may allow transient operations to access\n\t\t\tarchitecturally restricted data (for example, in another address\n\t\t\tspace) in a shared microarchitectural structure (for example, a CPU\n\t\t\tcache), potentially exposing the data over a covert channel.\n\t\t  ",
    "ExtendedDescription": "\n\nMany commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components.\n\n\nMany commodity processors also share microarchitectural resources that cache (temporarily store) data, which may be confidential. These resources may be shared across processor contexts, including across SMT threads, privilege rings, or others.\n\n\nWhen transient operations allow access to ISA-protected data in a shared microarchitectural resource, this might violate users' expectations of the ISA feature that is bypassed. For example, if transient operations can access a victim's private data in a shared microarchitectural resource, then the operations' microarchitectural side effects may correspond to the accessed data. If an attacker can trigger these transient operations and observe their side effects through a covert channel [REF-1400], then the attacker may be able to infer the victim's private data. Private data could include sensitive program data, OS/VMM data, page table data (such as memory addresses), system configuration data (see Demonstrative Example 3), or any other data that the attacker does not have the required privileges to access.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1422,
    "Title": "CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution",
    "Name": "Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution",
    "Description": "A processor event or prediction may allow incorrect or stale data to\n\t\t  be forwarded to transient operations, potentially exposing data over a\n\t\t  covert channel.",
    "ExtendedDescription": "\n\nSoftware may use a variety of techniques to preserve the confidentiality of private data that is accessible within the current processor context. For example, the memory safety and type safety properties of some high-level programming languages help to prevent software written in those languages from exposing private data. As a second example, software sandboxes may co-locate multiple users' software within a single process. The processor's Instruction Set Architecture (ISA) may permit one user's software to access another user's data (because the software shares the same address space), but the sandbox prevents these accesses by using software techniques such as bounds checking.\n\n\nIf incorrect or stale data can be forwarded (for example, from a cache) to transient operations, then the operations' microarchitectural side effects may correspond to the data. If an attacker can trigger these transient operations and observe their side effects through a covert channel, then the attacker may be able to infer the data. For example, an attacker process may induce transient execution in a victim process that causes the victim to inadvertently access and then expose its private data via a covert channel. In the software sandbox example, an attacker sandbox may induce transient execution in its own code, allowing it to transiently access and expose data in a victim sandbox that shares the same address space.\n\n\nConsequently, weaknesses that arise from incorrect/stale data forwarding might violate users' expectations of software-based memory safety and isolation techniques. If the data forwarding behavior is not properly documented by the hardware vendor, this might violate the software vendor's expectation of how the hardware should behave.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1423,
    "Title": "CWE-1423: Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
    "Name": "Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution",
    "Description": "Shared microarchitectural predictor state may allow code to influence\n\t\t\t\ttransient execution across a hardware boundary, potentially exposing\n\t\t\t\tdata that is accessible beyond the boundary over a covert channel.\n\t\t\t",
    "ExtendedDescription": "\n\nMany commodity processors have Instruction Set Architecture (ISA) features that protect software components from one another. These features can include memory segmentation, virtual memory, privilege rings, trusted execution environments, and virtual machines, among others. For example, virtual memory provides each process with its own address space, which prevents processes from accessing each other's private data. Many of these features can be used to form hardware-enforced security boundaries between software components.\n\n\nWhen separate software components (for example, two processes) share microarchitectural predictor state across a hardware boundary, code in one component may be able to influence microarchitectural predictor behavior in another component. If the predictor can cause transient execution, the shared predictor state may allow an attacker to influence transient execution in a victim, and in a manner that could allow the attacker to infer private data from the victim by monitoring observable discrepancies (CWE-203) in a covert channel [REF-1400].\n\n\nPredictor state may be shared when the processor transitions from one component to another (for example, when a process makes a system call to enter the kernel). Many commodity processors have features which prevent microarchitectural predictions that occur before a boundary from influencing predictions that occur after the boundary.\n\n\nPredictor state may also be shared between hardware threads, for example, sibling hardware threads on a processor that supports simultaneous multithreading (SMT). This sharing may be benign if the hardware threads are simultaneously executing in the same software component, or it could expose a weakness if one sibling is a malicious software component, and the other sibling is a victim software component. Processors that share microarchitectural predictors between hardware threads may have features which prevent microarchitectural predictions that occur on one hardware thread from influencing predictions that occur on another hardware thread.\n\n\nFeatures that restrict predictor state sharing across transitions or between hardware threads may be always-on, on by default, or may require opt-in from software.\n",
    "Status": "Incomplete"
  },
  {
    "ID": 1426,
    "Title": "CWE-1426: Improper Validation of Generative AI Output",
    "Name": "Improper Validation of Generative AI Output",
    "Description": "The product invokes a generative AI/ML\n\t\t\tcomponent whose behaviors and outputs cannot be directly\n\t\t\tcontrolled, but the product does not validate or\n\t\t\tinsufficiently validates the outputs to ensure that they\n\t\t\talign with the intended security, content, or privacy\n\t\t\tpolicy.",
    "ExtendedDescription": null,
    "Status": "Incomplete"
  }
]
